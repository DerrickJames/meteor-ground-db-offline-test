{"version":3,"sources":["meteor://ðŸ’»app/packages/aldeed_simple-schema/packages/aldeed_simple-schema.js"],"names":[],"mappingsfile":"/packages/aldeed_simple-schema.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:simple-schema/string.js                                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\nstring.js - Copyright (C) 2012-2013, JP Richardson <jprichardson@gmail.com>                                            // 2\n*/                                                                                                                     // 3\n                                                                                                                       // 4\n!(function() {                                                                                                         // 5\n  \"use strict\";                                                                                                        // 6\n                                                                                                                       // 7\n  var VERSION = '1.5.0';                                                                                               // 8\n                                                                                                                       // 9\n  var ENTITIES = {};                                                                                                   // 10\n                                                                                                                       // 11\n  function S(s) {                                                                                                      // 12\n    if (s !== null && s !== undefined) {                                                                               // 13\n      if (typeof s === 'string')                                                                                       // 14\n        this.s = s;                                                                                                    // 15\n      else                                                                                                             // 16\n        this.s = s.toString();                                                                                         // 17\n    } else {                                                                                                           // 18\n      this.s = s; //null or undefined                                                                                  // 19\n    }                                                                                                                  // 20\n                                                                                                                       // 21\n    this.orig = s; //original object, currently only used by toCSV() and toBoolean()                                   // 22\n                                                                                                                       // 23\n    if (s !== null && s !== undefined) {                                                                               // 24\n      if (this.__defineGetter__) {                                                                                     // 25\n        this.__defineGetter__('length', function() {                                                                   // 26\n          return this.s.length;                                                                                        // 27\n        })                                                                                                             // 28\n      } else {                                                                                                         // 29\n        this.length = s.length;                                                                                        // 30\n      }                                                                                                                // 31\n    } else {                                                                                                           // 32\n      this.length = -1;                                                                                                // 33\n    }                                                                                                                  // 34\n  }                                                                                                                    // 35\n                                                                                                                       // 36\n  var __nsp = String.prototype;                                                                                        // 37\n  var __sp = S.prototype = {                                                                                           // 38\n                                                                                                                       // 39\n    between: function(left, right) {                                                                                   // 40\n      var s = this.s;                                                                                                  // 41\n      var startPos = s.indexOf(left);                                                                                  // 42\n      var endPos = s.indexOf(right);                                                                                   // 43\n      var start = startPos + left.length;                                                                              // 44\n      return new S(endPos > startPos ?  s.slice(start, endPos) : \"\");                                                  // 45\n    },                                                                                                                 // 46\n                                                                                                                       // 47\n    //# modified slightly from https://github.com/epeli/underscore.string                                              // 48\n    camelize: function() {                                                                                             // 49\n      var s = this.trim().s.replace(/(\\-|_|\\s)+(.)?/g, function(mathc, sep, c) {                                       // 50\n        return (c ? c.toUpperCase() : '');                                                                             // 51\n      });                                                                                                              // 52\n      return new S(s);                                                                                                 // 53\n    },                                                                                                                 // 54\n                                                                                                                       // 55\n    capitalize: function() {                                                                                           // 56\n      return new S(this.s.substr(0, 1).toUpperCase() + this.s.substring(1).toLowerCase());                             // 57\n    },                                                                                                                 // 58\n                                                                                                                       // 59\n    charAt: function(index) {                                                                                          // 60\n      return this.s.charAt(index);                                                                                     // 61\n    },                                                                                                                 // 62\n                                                                                                                       // 63\n    chompLeft: function(prefix) {                                                                                      // 64\n      var s = this.s;                                                                                                  // 65\n      if (s.indexOf(prefix) === 0) {                                                                                   // 66\n         s = s.slice(prefix.length);                                                                                   // 67\n         return new S(s);                                                                                              // 68\n      } else {                                                                                                         // 69\n        return this;                                                                                                   // 70\n      }                                                                                                                // 71\n    },                                                                                                                 // 72\n                                                                                                                       // 73\n    chompRight: function(suffix) {                                                                                     // 74\n      if (this.endsWith(suffix)) {                                                                                     // 75\n        var s = this.s;                                                                                                // 76\n        s = s.slice(0, s.length - suffix.length);                                                                      // 77\n        return new S(s);                                                                                               // 78\n      } else {                                                                                                         // 79\n        return this;                                                                                                   // 80\n      }                                                                                                                // 81\n    },                                                                                                                 // 82\n                                                                                                                       // 83\n    //#thanks Google                                                                                                   // 84\n    collapseWhitespace: function() {                                                                                   // 85\n      var s = this.s.replace(/[\\s\\xa0]+/g, ' ').replace(/^\\s+|\\s+$/g, '');                                             // 86\n      return new S(s);                                                                                                 // 87\n    },                                                                                                                 // 88\n                                                                                                                       // 89\n    contains: function(ss) {                                                                                           // 90\n      return this.s.indexOf(ss) >= 0;                                                                                  // 91\n    },                                                                                                                 // 92\n                                                                                                                       // 93\n    count: function(ss) {                                                                                              // 94\n      var count = 0                                                                                                    // 95\n        , pos = this.s.indexOf(ss)                                                                                     // 96\n                                                                                                                       // 97\n      while (pos >= 0) {                                                                                               // 98\n        count += 1                                                                                                     // 99\n        pos = this.s.indexOf(ss, pos + 1)                                                                              // 100\n      }                                                                                                                // 101\n                                                                                                                       // 102\n      return count                                                                                                     // 103\n    },                                                                                                                 // 104\n                                                                                                                       // 105\n    //#modified from https://github.com/epeli/underscore.string                                                        // 106\n    dasherize: function() {                                                                                            // 107\n      var s = this.trim().s.replace(/[_\\s]+/g, '-').replace(/([A-Z])/g, '-$1').replace(/-+/g, '-').toLowerCase();      // 108\n      return new S(s);                                                                                                 // 109\n    },                                                                                                                 // 110\n                                                                                                                       // 111\n    decodeHtmlEntities: function() { //https://github.com/substack/node-ent/blob/master/index.js                       // 112\n      var s = this.s;                                                                                                  // 113\n      s = s.replace(/&#(\\d+);?/g, function (_, code) {                                                                 // 114\n        return String.fromCharCode(code);                                                                              // 115\n      })                                                                                                               // 116\n      .replace(/&#[xX]([A-Fa-f0-9]+);?/g, function (_, hex) {                                                          // 117\n        return String.fromCharCode(parseInt(hex, 16));                                                                 // 118\n      })                                                                                                               // 119\n      .replace(/&([^;\\W]+;?)/g, function (m, e) {                                                                      // 120\n        var ee = e.replace(/;$/, '');                                                                                  // 121\n        var target = ENTITIES[e] || (e.match(/;$/) && ENTITIES[ee]);                                                   // 122\n                                                                                                                       // 123\n        if (typeof target === 'number') {                                                                              // 124\n          return String.fromCharCode(target);                                                                          // 125\n        }                                                                                                              // 126\n        else if (typeof target === 'string') {                                                                         // 127\n          return target;                                                                                               // 128\n        }                                                                                                              // 129\n        else {                                                                                                         // 130\n          return m;                                                                                                    // 131\n        }                                                                                                              // 132\n      })                                                                                                               // 133\n                                                                                                                       // 134\n      return new S(s);                                                                                                 // 135\n    },                                                                                                                 // 136\n                                                                                                                       // 137\n    endsWith: function(suffix) {                                                                                       // 138\n      var l  = this.s.length - suffix.length;                                                                          // 139\n      return l >= 0 && this.s.indexOf(suffix, l) === l;                                                                // 140\n    },                                                                                                                 // 141\n                                                                                                                       // 142\n    escapeHTML: function() { //from underscore.string                                                                  // 143\n      return new S(this.s.replace(/[&<>\"']/g, function(m){ return '&' + reversedEscapeChars[m] + ';'; }));             // 144\n    },                                                                                                                 // 145\n                                                                                                                       // 146\n    ensureLeft: function(prefix) {                                                                                     // 147\n      var s = this.s;                                                                                                  // 148\n      if (s.indexOf(prefix) === 0) {                                                                                   // 149\n        return this;                                                                                                   // 150\n      } else {                                                                                                         // 151\n        return new S(prefix + s);                                                                                      // 152\n      }                                                                                                                // 153\n    },                                                                                                                 // 154\n                                                                                                                       // 155\n    ensureRight: function(suffix) {                                                                                    // 156\n      var s = this.s;                                                                                                  // 157\n      if (this.endsWith(suffix))  {                                                                                    // 158\n        return this;                                                                                                   // 159\n      } else {                                                                                                         // 160\n        return new S(s + suffix);                                                                                      // 161\n      }                                                                                                                // 162\n    },                                                                                                                 // 163\n                                                                                                                       // 164\n    humanize: function() { //modified from underscore.string                                                           // 165\n      if (this.s === null || this.s === undefined)                                                                     // 166\n        return new S('')                                                                                               // 167\n      var s = this.underscore().replace(/_id$/,'').replace(/_/g, ' ').trim().capitalize()                              // 168\n      return new S(s)                                                                                                  // 169\n    },                                                                                                                 // 170\n                                                                                                                       // 171\n    isAlpha: function() {                                                                                              // 172\n      return !/[^a-z\\xC0-\\xFF]/.test(this.s.toLowerCase());                                                            // 173\n    },                                                                                                                 // 174\n                                                                                                                       // 175\n    isAlphaNumeric: function() {                                                                                       // 176\n      return !/[^0-9a-z\\xC0-\\xFF]/.test(this.s.toLowerCase());                                                         // 177\n    },                                                                                                                 // 178\n                                                                                                                       // 179\n    isEmpty: function() {                                                                                              // 180\n      return this.s === null || this.s === undefined ? true : /^[\\s\\xa0]*$/.test(this.s);                              // 181\n    },                                                                                                                 // 182\n                                                                                                                       // 183\n    isLower: function() {                                                                                              // 184\n      return this.isAlpha() && this.s.toLowerCase() === this.s;                                                        // 185\n    },                                                                                                                 // 186\n                                                                                                                       // 187\n    isNumeric: function() {                                                                                            // 188\n      return !/[^0-9]/.test(this.s);                                                                                   // 189\n    },                                                                                                                 // 190\n                                                                                                                       // 191\n    isUpper: function() {                                                                                              // 192\n      return this.isAlpha() && this.s.toUpperCase() === this.s;                                                        // 193\n    },                                                                                                                 // 194\n                                                                                                                       // 195\n    left: function(N) {                                                                                                // 196\n      if (N >= 0) {                                                                                                    // 197\n        var s = this.s.substr(0, N);                                                                                   // 198\n        return new S(s);                                                                                               // 199\n      } else {                                                                                                         // 200\n        return this.right(-N);                                                                                         // 201\n      }                                                                                                                // 202\n    },                                                                                                                 // 203\n                                                                                                                       // 204\n    lines: function() { //convert windows newlines to unix newlines then convert to an Array of lines                  // 205\n      return this.replaceAll('\\r\\n', '\\n').s.split('\\n');                                                              // 206\n    },                                                                                                                 // 207\n                                                                                                                       // 208\n    pad: function(len, ch) { //https://github.com/component/pad                                                        // 209\n      ch = ch || ' ';                                                                                                  // 210\n      if (this.s.length >= len) return new S(this.s);                                                                  // 211\n      len = len - this.s.length;                                                                                       // 212\n      var left = Array(Math.ceil(len / 2) + 1).join(ch);                                                               // 213\n      var right = Array(Math.floor(len / 2) + 1).join(ch);                                                             // 214\n      return new S(left + this.s + right);                                                                             // 215\n    },                                                                                                                 // 216\n                                                                                                                       // 217\n    padLeft: function(len, ch) { //https://github.com/component/pad                                                    // 218\n      ch = ch || ' ';                                                                                                  // 219\n      if (this.s.length >= len) return new S(this.s);                                                                  // 220\n      return new S(Array(len - this.s.length + 1).join(ch) + this.s);                                                  // 221\n    },                                                                                                                 // 222\n                                                                                                                       // 223\n    padRight: function(len, ch) { //https://github.com/component/pad                                                   // 224\n      ch = ch || ' ';                                                                                                  // 225\n      if (this.s.length >= len) return new S(this.s);                                                                  // 226\n      return new S(this.s + Array(len - this.s.length + 1).join(ch));                                                  // 227\n    },                                                                                                                 // 228\n                                                                                                                       // 229\n    parseCSV: function(delimiter, qualifier, escape, lineDelimiter) { //try to parse no matter what                    // 230\n      delimiter = delimiter || ',';                                                                                    // 231\n      escape = escape || '\\\\'                                                                                          // 232\n      if (typeof qualifier == 'undefined')                                                                             // 233\n        qualifier = '\"';                                                                                               // 234\n                                                                                                                       // 235\n      var i = 0, fieldBuffer = [], fields = [], len = this.s.length, inField = false, self = this;                     // 236\n      var ca = function(i){return self.s.charAt(i)};                                                                   // 237\n      if (typeof lineDelimiter !== 'undefined') var rows = [];                                                         // 238\n                                                                                                                       // 239\n      if (!qualifier)                                                                                                  // 240\n        inField = true;                                                                                                // 241\n                                                                                                                       // 242\n      while (i < len) {                                                                                                // 243\n        var current = ca(i);                                                                                           // 244\n        switch (current) {                                                                                             // 245\n          case escape:                                                                                                 // 246\n          //fix for issues #32 and #35                                                                                 // 247\n          if (inField && ((escape !== qualifier) || ca(i+1) === qualifier)) {                                          // 248\n              i += 1;                                                                                                  // 249\n              fieldBuffer.push(ca(i));                                                                                 // 250\n              break;                                                                                                   // 251\n          }                                                                                                            // 252\n          if (escape !== qualifier) break;                                                                             // 253\n          case qualifier:                                                                                              // 254\n            inField = !inField;                                                                                        // 255\n            break;                                                                                                     // 256\n          case delimiter:                                                                                              // 257\n            if (inField && qualifier)                                                                                  // 258\n              fieldBuffer.push(current);                                                                               // 259\n            else {                                                                                                     // 260\n              fields.push(fieldBuffer.join(''))                                                                        // 261\n              fieldBuffer.length = 0;                                                                                  // 262\n            }                                                                                                          // 263\n            break;                                                                                                     // 264\n          case lineDelimiter:                                                                                          // 265\n            if (inField) {                                                                                             // 266\n                fieldBuffer.push(current);                                                                             // 267\n            } else {                                                                                                   // 268\n                if (rows) {                                                                                            // 269\n                    fields.push(fieldBuffer.join(''))                                                                  // 270\n                    rows.push(fields);                                                                                 // 271\n                    fields = [];                                                                                       // 272\n                    fieldBuffer.length = 0;                                                                            // 273\n                }                                                                                                      // 274\n            }                                                                                                          // 275\n            break;                                                                                                     // 276\n          default:                                                                                                     // 277\n            if (inField)                                                                                               // 278\n              fieldBuffer.push(current);                                                                               // 279\n            break;                                                                                                     // 280\n        }                                                                                                              // 281\n        i += 1;                                                                                                        // 282\n      }                                                                                                                // 283\n                                                                                                                       // 284\n      fields.push(fieldBuffer.join(''));                                                                               // 285\n      if (rows) {                                                                                                      // 286\n        rows.push(fields);                                                                                             // 287\n        return rows;                                                                                                   // 288\n      }                                                                                                                // 289\n      return fields;                                                                                                   // 290\n    },                                                                                                                 // 291\n                                                                                                                       // 292\n    replaceAll: function(ss, r) {                                                                                      // 293\n      //var s = this.s.replace(new RegExp(ss, 'g'), r);                                                                // 294\n      var s = this.s.split(ss).join(r)                                                                                 // 295\n      return new S(s);                                                                                                 // 296\n    },                                                                                                                 // 297\n                                                                                                                       // 298\n    right: function(N) {                                                                                               // 299\n      if (N >= 0) {                                                                                                    // 300\n        var s = this.s.substr(this.s.length - N, N);                                                                   // 301\n        return new S(s);                                                                                               // 302\n      } else {                                                                                                         // 303\n        return this.left(-N);                                                                                          // 304\n      }                                                                                                                // 305\n    },                                                                                                                 // 306\n                                                                                                                       // 307\n    slugify: function() {                                                                                              // 308\n      var sl = (new S(this.s.replace(/[^\\w\\s-]/g, '').toLowerCase())).dasherize().s;                                   // 309\n      if (sl.charAt(0) === '-')                                                                                        // 310\n        sl = sl.substr(1);                                                                                             // 311\n      return new S(sl);                                                                                                // 312\n    },                                                                                                                 // 313\n                                                                                                                       // 314\n    startsWith: function(prefix) {                                                                                     // 315\n      return this.s.lastIndexOf(prefix, 0) === 0;                                                                      // 316\n    },                                                                                                                 // 317\n                                                                                                                       // 318\n    stripPunctuation: function() {                                                                                     // 319\n      //return new S(this.s.replace(/[\\.,-\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\"));                                             // 320\n      return new S(this.s.replace(/[^\\w\\s]|_/g, \"\").replace(/\\s+/g, \" \"));                                             // 321\n    },                                                                                                                 // 322\n                                                                                                                       // 323\n    stripTags: function() { //from sugar.js                                                                            // 324\n      var s = this.s, args = arguments.length > 0 ? arguments : [''];                                                  // 325\n      multiArgs(args, function(tag) {                                                                                  // 326\n        s = s.replace(RegExp('<\\/?' + tag + '[^<>]*>', 'gi'), '');                                                     // 327\n      });                                                                                                              // 328\n      return new S(s);                                                                                                 // 329\n    },                                                                                                                 // 330\n                                                                                                                       // 331\n    template: function(values, opening, closing) {                                                                     // 332\n      var s = this.s                                                                                                   // 333\n      var opening = opening || Export.TMPL_OPEN                                                                        // 334\n      var closing = closing || Export.TMPL_CLOSE                                                                       // 335\n      var r = new RegExp(opening + '(.+?)' + closing, 'g')                                                             // 336\n        //, r = /\\{\\{(.+?)\\}\\}/g                                                                                       // 337\n      var matches = s.match(r) || [];                                                                                  // 338\n                                                                                                                       // 339\n      matches.forEach(function(match) {                                                                                // 340\n        var key = match.substring(opening.length, match.length - closing.length);//chop {{ and }}                      // 341\n        if (values[key])                                                                                               // 342\n          s = s.replace(match, values[key]);                                                                           // 343\n      });                                                                                                              // 344\n      return new S(s);                                                                                                 // 345\n    },                                                                                                                 // 346\n                                                                                                                       // 347\n    times: function(n) {                                                                                               // 348\n      return new S(new Array(n + 1).join(this.s));                                                                     // 349\n    },                                                                                                                 // 350\n                                                                                                                       // 351\n    toBoolean: function() {                                                                                            // 352\n      if (typeof this.orig === 'string') {                                                                             // 353\n        var s = this.s.toLowerCase();                                                                                  // 354\n        return s === 'true' || s === 'yes' || s === 'on';                                                              // 355\n      } else                                                                                                           // 356\n        return this.orig === true || this.orig === 1;                                                                  // 357\n    },                                                                                                                 // 358\n                                                                                                                       // 359\n    toFloat: function(precision) {                                                                                     // 360\n      var num = parseFloat(this.s)                                                                                     // 361\n      if (precision)                                                                                                   // 362\n        return parseFloat(num.toFixed(precision))                                                                      // 363\n      else                                                                                                             // 364\n        return num                                                                                                     // 365\n    },                                                                                                                 // 366\n                                                                                                                       // 367\n    toInt: function() { //thanks Google                                                                                // 368\n      // If the string starts with '0x' or '-0x', parse as hex.                                                        // 369\n      return /^\\s*-?0x/i.test(this.s) ? parseInt(this.s, 16) : parseInt(this.s, 10)                                    // 370\n    },                                                                                                                 // 371\n                                                                                                                       // 372\n    trim: function() {                                                                                                 // 373\n      var s;                                                                                                           // 374\n      if (typeof __nsp.trim === 'undefined')                                                                           // 375\n        s = this.s.replace(/(^\\s*|\\s*$)/g, '')                                                                         // 376\n      else                                                                                                             // 377\n        s = this.s.trim()                                                                                              // 378\n      return new S(s);                                                                                                 // 379\n    },                                                                                                                 // 380\n                                                                                                                       // 381\n    trimLeft: function() {                                                                                             // 382\n      var s;                                                                                                           // 383\n      if (__nsp.trimLeft)                                                                                              // 384\n        s = this.s.trimLeft();                                                                                         // 385\n      else                                                                                                             // 386\n        s = this.s.replace(/(^\\s*)/g, '');                                                                             // 387\n      return new S(s);                                                                                                 // 388\n    },                                                                                                                 // 389\n                                                                                                                       // 390\n    trimRight: function() {                                                                                            // 391\n      var s;                                                                                                           // 392\n      if (__nsp.trimRight)                                                                                             // 393\n        s = this.s.trimRight();                                                                                        // 394\n      else                                                                                                             // 395\n        s = this.s.replace(/\\s+$/, '');                                                                                // 396\n      return new S(s);                                                                                                 // 397\n    },                                                                                                                 // 398\n                                                                                                                       // 399\n    truncate: function(length, pruneStr) { //from underscore.string, author: github.com/rwz                            // 400\n      var str = this.s;                                                                                                // 401\n                                                                                                                       // 402\n      length = ~~length;                                                                                               // 403\n      pruneStr = pruneStr || '...';                                                                                    // 404\n                                                                                                                       // 405\n      if (str.length <= length) return new S(str);                                                                     // 406\n                                                                                                                       // 407\n      var tmpl = function(c){ return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' '; },                               // 408\n        template = str.slice(0, length+1).replace(/.(?=\\W*\\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'          // 409\n                                                                                                                       // 410\n      if (template.slice(template.length-2).match(/\\w\\w/))                                                             // 411\n        template = template.replace(/\\s*\\S+$/, '');                                                                    // 412\n      else                                                                                                             // 413\n        template = new S(template.slice(0, template.length-1)).trimRight().s;                                          // 414\n                                                                                                                       // 415\n      return (template+pruneStr).length > str.length ? new S(str) : new S(str.slice(0, template.length)+pruneStr);     // 416\n    },                                                                                                                 // 417\n                                                                                                                       // 418\n    toCSV: function() {                                                                                                // 419\n      var delim = ',', qualifier = '\"', escape = '\\\\', encloseNumbers = true, keys = false;                            // 420\n      var dataArray = [];                                                                                              // 421\n                                                                                                                       // 422\n      function hasVal(it) {                                                                                            // 423\n        return it !== null && it !== '';                                                                               // 424\n      }                                                                                                                // 425\n                                                                                                                       // 426\n      if (typeof arguments[0] === 'object') {                                                                          // 427\n        delim = arguments[0].delimiter || delim;                                                                       // 428\n        delim = arguments[0].separator || delim;                                                                       // 429\n        qualifier = arguments[0].qualifier || qualifier;                                                               // 430\n        encloseNumbers = !!arguments[0].encloseNumbers;                                                                // 431\n        escape = arguments[0].escape || escape;                                                                        // 432\n        keys = !!arguments[0].keys;                                                                                    // 433\n      } else if (typeof arguments[0] === 'string') {                                                                   // 434\n        delim = arguments[0];                                                                                          // 435\n      }                                                                                                                // 436\n                                                                                                                       // 437\n      if (typeof arguments[1] === 'string')                                                                            // 438\n        qualifier = arguments[1];                                                                                      // 439\n                                                                                                                       // 440\n      if (arguments[1] === null)                                                                                       // 441\n        qualifier = null;                                                                                              // 442\n                                                                                                                       // 443\n       if (this.orig instanceof Array)                                                                                 // 444\n        dataArray  = this.orig;                                                                                        // 445\n      else { //object                                                                                                  // 446\n        for (var key in this.orig)                                                                                     // 447\n          if (this.orig.hasOwnProperty(key))                                                                           // 448\n            if (keys)                                                                                                  // 449\n              dataArray.push(key);                                                                                     // 450\n            else                                                                                                       // 451\n              dataArray.push(this.orig[key]);                                                                          // 452\n      }                                                                                                                // 453\n                                                                                                                       // 454\n      var rep = escape + qualifier;                                                                                    // 455\n      var buildString = [];                                                                                            // 456\n      for (var i = 0; i < dataArray.length; ++i) {                                                                     // 457\n        var shouldQualify = hasVal(qualifier)                                                                          // 458\n        if (typeof dataArray[i] == 'number')                                                                           // 459\n          shouldQualify &= encloseNumbers;                                                                             // 460\n                                                                                                                       // 461\n        if (shouldQualify)                                                                                             // 462\n          buildString.push(qualifier);                                                                                 // 463\n                                                                                                                       // 464\n        if (dataArray[i] !== null && dataArray[i] !== undefined) {                                                     // 465\n          var d = new S(dataArray[i]).replaceAll(qualifier, rep).s;                                                    // 466\n          buildString.push(d);                                                                                         // 467\n        } else                                                                                                         // 468\n          buildString.push('')                                                                                         // 469\n                                                                                                                       // 470\n        if (shouldQualify)                                                                                             // 471\n          buildString.push(qualifier);                                                                                 // 472\n                                                                                                                       // 473\n        if (delim)                                                                                                     // 474\n          buildString.push(delim);                                                                                     // 475\n      }                                                                                                                // 476\n                                                                                                                       // 477\n      //chop last delim                                                                                                // 478\n      //console.log(buildString.length)                                                                                // 479\n      buildString.length = buildString.length - 1;                                                                     // 480\n      return new S(buildString.join(''));                                                                              // 481\n    },                                                                                                                 // 482\n                                                                                                                       // 483\n    toString: function() {                                                                                             // 484\n      return this.s;                                                                                                   // 485\n    },                                                                                                                 // 486\n                                                                                                                       // 487\n    //#modified from https://github.com/epeli/underscore.string                                                        // 488\n    underscore: function() {                                                                                           // 489\n      var s = this.trim().s.replace(/([a-z\\d])([A-Z]+)/g, '$1_$2').replace(/[-\\s]+/g, '_').toLowerCase();              // 490\n      if ((new S(this.s.charAt(0))).isUpper()) {                                                                       // 491\n        s = '_' + s;                                                                                                   // 492\n      }                                                                                                                // 493\n      return new S(s);                                                                                                 // 494\n    },                                                                                                                 // 495\n                                                                                                                       // 496\n    unescapeHTML: function() { //from underscore.string                                                                // 497\n      return new S(this.s.replace(/\\&([^;]+);/g, function(entity, entityCode){                                         // 498\n        var match;                                                                                                     // 499\n                                                                                                                       // 500\n        if (entityCode in escapeChars) {                                                                               // 501\n          return escapeChars[entityCode];                                                                              // 502\n        } else if (match = entityCode.match(/^#x([\\da-fA-F]+)$/)) {                                                    // 503\n          return String.fromCharCode(parseInt(match[1], 16));                                                          // 504\n        } else if (match = entityCode.match(/^#(\\d+)$/)) {                                                             // 505\n          return String.fromCharCode(~~match[1]);                                                                      // 506\n        } else {                                                                                                       // 507\n          return entity;                                                                                               // 508\n        }                                                                                                              // 509\n      }));                                                                                                             // 510\n    },                                                                                                                 // 511\n                                                                                                                       // 512\n    valueOf: function() {                                                                                              // 513\n      return this.s.valueOf();                                                                                         // 514\n    }                                                                                                                  // 515\n                                                                                                                       // 516\n  }                                                                                                                    // 517\n                                                                                                                       // 518\n  var methodsAdded = [];                                                                                               // 519\n  function extendPrototype() {                                                                                         // 520\n    for (var name in __sp) {                                                                                           // 521\n      (function(name){                                                                                                 // 522\n        var func = __sp[name];                                                                                         // 523\n        if (!__nsp.hasOwnProperty(name)) {                                                                             // 524\n          methodsAdded.push(name);                                                                                     // 525\n          __nsp[name] = function() {                                                                                   // 526\n            String.prototype.s = this;                                                                                 // 527\n            return func.apply(this, arguments);                                                                        // 528\n          }                                                                                                            // 529\n        }                                                                                                              // 530\n      })(name);                                                                                                        // 531\n    }                                                                                                                  // 532\n  }                                                                                                                    // 533\n                                                                                                                       // 534\n  function restorePrototype() {                                                                                        // 535\n    for (var i = 0; i < methodsAdded.length; ++i)                                                                      // 536\n      delete String.prototype[methodsAdded[i]];                                                                        // 537\n    methodsAdded.length = 0;                                                                                           // 538\n  }                                                                                                                    // 539\n                                                                                                                       // 540\n                                                                                                                       // 541\n/*************************************                                                                                 // 542\n/* Attach Native JavaScript String Properties                                                                          // 543\n/*************************************/                                                                                // 544\n                                                                                                                       // 545\n  var nativeProperties = getNativeStringProperties();                                                                  // 546\n  for (var name in nativeProperties) {                                                                                 // 547\n    (function(name) {                                                                                                  // 548\n      var stringProp = __nsp[name];                                                                                    // 549\n      if (typeof stringProp == 'function') {                                                                           // 550\n        //console.log(stringProp)                                                                                      // 551\n        if (!__sp[name]) {                                                                                             // 552\n          if (nativeProperties[name] === 'string') {                                                                   // 553\n            __sp[name] = function() {                                                                                  // 554\n              //console.log(name)                                                                                      // 555\n              return new S(stringProp.apply(this, arguments));                                                         // 556\n            }                                                                                                          // 557\n          } else {                                                                                                     // 558\n            __sp[name] = stringProp;                                                                                   // 559\n          }                                                                                                            // 560\n        }                                                                                                              // 561\n      }                                                                                                                // 562\n    })(name);                                                                                                          // 563\n  }                                                                                                                    // 564\n                                                                                                                       // 565\n                                                                                                                       // 566\n/*************************************                                                                                 // 567\n/* Function Aliases                                                                                                    // 568\n/*************************************/                                                                                // 569\n                                                                                                                       // 570\n  __sp.repeat = __sp.times;                                                                                            // 571\n  __sp.include = __sp.contains;                                                                                        // 572\n  __sp.toInteger = __sp.toInt;                                                                                         // 573\n  __sp.toBool = __sp.toBoolean;                                                                                        // 574\n  __sp.decodeHTMLEntities = __sp.decodeHtmlEntities //ensure consistent casing scheme of 'HTML'                        // 575\n                                                                                                                       // 576\n                                                                                                                       // 577\n/*************************************                                                                                 // 578\n/* Private Functions                                                                                                   // 579\n/*************************************/                                                                                // 580\n                                                                                                                       // 581\n  function getNativeStringProperties() {                                                                               // 582\n    var names = getNativeStringPropertyNames();                                                                        // 583\n    var retObj = {};                                                                                                   // 584\n                                                                                                                       // 585\n    for (var i = 0; i < names.length; ++i) {                                                                           // 586\n      var name = names[i];                                                                                             // 587\n      var func = __nsp[name];                                                                                          // 588\n      try {                                                                                                            // 589\n        var type = typeof func.apply('teststring', []);                                                                // 590\n        retObj[name] = type;                                                                                           // 591\n      } catch (e) {}                                                                                                   // 592\n    }                                                                                                                  // 593\n    return retObj;                                                                                                     // 594\n  }                                                                                                                    // 595\n                                                                                                                       // 596\n  function getNativeStringPropertyNames() {                                                                            // 597\n    var results = [];                                                                                                  // 598\n    if (Object.getOwnPropertyNames) {                                                                                  // 599\n      results = Object.getOwnPropertyNames(__nsp);                                                                     // 600\n      results.splice(results.indexOf('valueOf'), 1);                                                                   // 601\n      results.splice(results.indexOf('toString'), 1);                                                                  // 602\n      return results;                                                                                                  // 603\n    } else { //meant for legacy cruft, this could probably be made more efficient                                      // 604\n      var stringNames = {};                                                                                            // 605\n      var objectNames = [];                                                                                            // 606\n      for (var name in String.prototype)                                                                               // 607\n        stringNames[name] = name;                                                                                      // 608\n                                                                                                                       // 609\n      for (var name in Object.prototype)                                                                               // 610\n        delete stringNames[name];                                                                                      // 611\n                                                                                                                       // 612\n      //stringNames['toString'] = 'toString'; //this was deleted with the rest of the object names                     // 613\n      for (var name in stringNames) {                                                                                  // 614\n        results.push(name);                                                                                            // 615\n      }                                                                                                                // 616\n      return results;                                                                                                  // 617\n    }                                                                                                                  // 618\n  }                                                                                                                    // 619\n                                                                                                                       // 620\n  function Export(str) {                                                                                               // 621\n    return new S(str);                                                                                                 // 622\n  };                                                                                                                   // 623\n                                                                                                                       // 624\n  //attach exports to StringJSWrapper                                                                                  // 625\n  Export.extendPrototype = extendPrototype;                                                                            // 626\n  Export.restorePrototype = restorePrototype;                                                                          // 627\n  Export.VERSION = VERSION;                                                                                            // 628\n  Export.TMPL_OPEN = '{{';                                                                                             // 629\n  Export.TMPL_CLOSE = '}}';                                                                                            // 630\n  Export.ENTITIES = ENTITIES;                                                                                          // 631\n                                                                                                                       // 632\n                                                                                                                       // 633\n                                                                                                                       // 634\n/*************************************                                                                                 // 635\n/* Exports                                                                                                             // 636\n/*************************************/                                                                                // 637\n                                                                                                                       // 638\n  if (typeof module !== 'undefined'  && typeof module.exports !== 'undefined') {                                       // 639\n    module.exports = Export;                                                                                           // 640\n                                                                                                                       // 641\n  } else {                                                                                                             // 642\n                                                                                                                       // 643\n    if(typeof define === \"function\" && define.amd) {                                                                   // 644\n      define([], function() {                                                                                          // 645\n        return Export;                                                                                                 // 646\n      });                                                                                                              // 647\n    } else {                                                                                                           // 648\n      window.S = Export;                                                                                               // 649\n    }                                                                                                                  // 650\n  }                                                                                                                    // 651\n                                                                                                                       // 652\n                                                                                                                       // 653\n/*************************************                                                                                 // 654\n/* 3rd Party Private Functions                                                                                         // 655\n/*************************************/                                                                                // 656\n                                                                                                                       // 657\n  //from sugar.js                                                                                                      // 658\n  function multiArgs(args, fn) {                                                                                       // 659\n    var result = [], i;                                                                                                // 660\n    for(i = 0; i < args.length; i++) {                                                                                 // 661\n      result.push(args[i]);                                                                                            // 662\n      if(fn) fn.call(args, args[i], i);                                                                                // 663\n    }                                                                                                                  // 664\n    return result;                                                                                                     // 665\n  }                                                                                                                    // 666\n                                                                                                                       // 667\n  //from underscore.string                                                                                             // 668\n  var escapeChars = {                                                                                                  // 669\n    lt: '<',                                                                                                           // 670\n    gt: '>',                                                                                                           // 671\n    quot: '\"',                                                                                                         // 672\n    apos: \"'\",                                                                                                         // 673\n    amp: '&'                                                                                                           // 674\n  };                                                                                                                   // 675\n                                                                                                                       // 676\n  //from underscore.string                                                                                             // 677\n  var reversedEscapeChars = {};                                                                                        // 678\n  for(var key in escapeChars){ reversedEscapeChars[escapeChars[key]] = key; }                                          // 679\n                                                                                                                       // 680\n  ENTITIES = {                                                                                                         // 681\n    \"amp\" : \"&\",                                                                                                       // 682\n    \"gt\" : \">\",                                                                                                        // 683\n    \"lt\" : \"<\",                                                                                                        // 684\n    \"quot\" : \"\\\"\",                                                                                                     // 685\n    \"apos\" : \"'\",                                                                                                      // 686\n    \"AElig\" : 198,                                                                                                     // 687\n    \"Aacute\" : 193,                                                                                                    // 688\n    \"Acirc\" : 194,                                                                                                     // 689\n    \"Agrave\" : 192,                                                                                                    // 690\n    \"Aring\" : 197,                                                                                                     // 691\n    \"Atilde\" : 195,                                                                                                    // 692\n    \"Auml\" : 196,                                                                                                      // 693\n    \"Ccedil\" : 199,                                                                                                    // 694\n    \"ETH\" : 208,                                                                                                       // 695\n    \"Eacute\" : 201,                                                                                                    // 696\n    \"Ecirc\" : 202,                                                                                                     // 697\n    \"Egrave\" : 200,                                                                                                    // 698\n    \"Euml\" : 203,                                                                                                      // 699\n    \"Iacute\" : 205,                                                                                                    // 700\n    \"Icirc\" : 206,                                                                                                     // 701\n    \"Igrave\" : 204,                                                                                                    // 702\n    \"Iuml\" : 207,                                                                                                      // 703\n    \"Ntilde\" : 209,                                                                                                    // 704\n    \"Oacute\" : 211,                                                                                                    // 705\n    \"Ocirc\" : 212,                                                                                                     // 706\n    \"Ograve\" : 210,                                                                                                    // 707\n    \"Oslash\" : 216,                                                                                                    // 708\n    \"Otilde\" : 213,                                                                                                    // 709\n    \"Ouml\" : 214,                                                                                                      // 710\n    \"THORN\" : 222,                                                                                                     // 711\n    \"Uacute\" : 218,                                                                                                    // 712\n    \"Ucirc\" : 219,                                                                                                     // 713\n    \"Ugrave\" : 217,                                                                                                    // 714\n    \"Uuml\" : 220,                                                                                                      // 715\n    \"Yacute\" : 221,                                                                                                    // 716\n    \"aacute\" : 225,                                                                                                    // 717\n    \"acirc\" : 226,                                                                                                     // 718\n    \"aelig\" : 230,                                                                                                     // 719\n    \"agrave\" : 224,                                                                                                    // 720\n    \"aring\" : 229,                                                                                                     // 721\n    \"atilde\" : 227,                                                                                                    // 722\n    \"auml\" : 228,                                                                                                      // 723\n    \"ccedil\" : 231,                                                                                                    // 724\n    \"eacute\" : 233,                                                                                                    // 725\n    \"ecirc\" : 234,                                                                                                     // 726\n    \"egrave\" : 232,                                                                                                    // 727\n    \"eth\" : 240,                                                                                                       // 728\n    \"euml\" : 235,                                                                                                      // 729\n    \"iacute\" : 237,                                                                                                    // 730\n    \"icirc\" : 238,                                                                                                     // 731\n    \"igrave\" : 236,                                                                                                    // 732\n    \"iuml\" : 239,                                                                                                      // 733\n    \"ntilde\" : 241,                                                                                                    // 734\n    \"oacute\" : 243,                                                                                                    // 735\n    \"ocirc\" : 244,                                                                                                     // 736\n    \"ograve\" : 242,                                                                                                    // 737\n    \"oslash\" : 248,                                                                                                    // 738\n    \"otilde\" : 245,                                                                                                    // 739\n    \"ouml\" : 246,                                                                                                      // 740\n    \"szlig\" : 223,                                                                                                     // 741\n    \"thorn\" : 254,                                                                                                     // 742\n    \"uacute\" : 250,                                                                                                    // 743\n    \"ucirc\" : 251,                                                                                                     // 744\n    \"ugrave\" : 249,                                                                                                    // 745\n    \"uuml\" : 252,                                                                                                      // 746\n    \"yacute\" : 253,                                                                                                    // 747\n    \"yuml\" : 255,                                                                                                      // 748\n    \"copy\" : 169,                                                                                                      // 749\n    \"reg\" : 174,                                                                                                       // 750\n    \"nbsp\" : 160,                                                                                                      // 751\n    \"iexcl\" : 161,                                                                                                     // 752\n    \"cent\" : 162,                                                                                                      // 753\n    \"pound\" : 163,                                                                                                     // 754\n    \"curren\" : 164,                                                                                                    // 755\n    \"yen\" : 165,                                                                                                       // 756\n    \"brvbar\" : 166,                                                                                                    // 757\n    \"sect\" : 167,                                                                                                      // 758\n    \"uml\" : 168,                                                                                                       // 759\n    \"ordf\" : 170,                                                                                                      // 760\n    \"laquo\" : 171,                                                                                                     // 761\n    \"not\" : 172,                                                                                                       // 762\n    \"shy\" : 173,                                                                                                       // 763\n    \"macr\" : 175,                                                                                                      // 764\n    \"deg\" : 176,                                                                                                       // 765\n    \"plusmn\" : 177,                                                                                                    // 766\n    \"sup1\" : 185,                                                                                                      // 767\n    \"sup2\" : 178,                                                                                                      // 768\n    \"sup3\" : 179,                                                                                                      // 769\n    \"acute\" : 180,                                                                                                     // 770\n    \"micro\" : 181,                                                                                                     // 771\n    \"para\" : 182,                                                                                                      // 772\n    \"middot\" : 183,                                                                                                    // 773\n    \"cedil\" : 184,                                                                                                     // 774\n    \"ordm\" : 186,                                                                                                      // 775\n    \"raquo\" : 187,                                                                                                     // 776\n    \"frac14\" : 188,                                                                                                    // 777\n    \"frac12\" : 189,                                                                                                    // 778\n    \"frac34\" : 190,                                                                                                    // 779\n    \"iquest\" : 191,                                                                                                    // 780\n    \"times\" : 215,                                                                                                     // 781\n    \"divide\" : 247,                                                                                                    // 782\n    \"OElig;\" : 338,                                                                                                    // 783\n    \"oelig;\" : 339,                                                                                                    // 784\n    \"Scaron;\" : 352,                                                                                                   // 785\n    \"scaron;\" : 353,                                                                                                   // 786\n    \"Yuml;\" : 376,                                                                                                     // 787\n    \"fnof;\" : 402,                                                                                                     // 788\n    \"circ;\" : 710,                                                                                                     // 789\n    \"tilde;\" : 732,                                                                                                    // 790\n    \"Alpha;\" : 913,                                                                                                    // 791\n    \"Beta;\" : 914,                                                                                                     // 792\n    \"Gamma;\" : 915,                                                                                                    // 793\n    \"Delta;\" : 916,                                                                                                    // 794\n    \"Epsilon;\" : 917,                                                                                                  // 795\n    \"Zeta;\" : 918,                                                                                                     // 796\n    \"Eta;\" : 919,                                                                                                      // 797\n    \"Theta;\" : 920,                                                                                                    // 798\n    \"Iota;\" : 921,                                                                                                     // 799\n    \"Kappa;\" : 922,                                                                                                    // 800\n    \"Lambda;\" : 923,                                                                                                   // 801\n    \"Mu;\" : 924,                                                                                                       // 802\n    \"Nu;\" : 925,                                                                                                       // 803\n    \"Xi;\" : 926,                                                                                                       // 804\n    \"Omicron;\" : 927,                                                                                                  // 805\n    \"Pi;\" : 928,                                                                                                       // 806\n    \"Rho;\" : 929,                                                                                                      // 807\n    \"Sigma;\" : 931,                                                                                                    // 808\n    \"Tau;\" : 932,                                                                                                      // 809\n    \"Upsilon;\" : 933,                                                                                                  // 810\n    \"Phi;\" : 934,                                                                                                      // 811\n    \"Chi;\" : 935,                                                                                                      // 812\n    \"Psi;\" : 936,                                                                                                      // 813\n    \"Omega;\" : 937,                                                                                                    // 814\n    \"alpha;\" : 945,                                                                                                    // 815\n    \"beta;\" : 946,                                                                                                     // 816\n    \"gamma;\" : 947,                                                                                                    // 817\n    \"delta;\" : 948,                                                                                                    // 818\n    \"epsilon;\" : 949,                                                                                                  // 819\n    \"zeta;\" : 950,                                                                                                     // 820\n    \"eta;\" : 951,                                                                                                      // 821\n    \"theta;\" : 952,                                                                                                    // 822\n    \"iota;\" : 953,                                                                                                     // 823\n    \"kappa;\" : 954,                                                                                                    // 824\n    \"lambda;\" : 955,                                                                                                   // 825\n    \"mu;\" : 956,                                                                                                       // 826\n    \"nu;\" : 957,                                                                                                       // 827\n    \"xi;\" : 958,                                                                                                       // 828\n    \"omicron;\" : 959,                                                                                                  // 829\n    \"pi;\" : 960,                                                                                                       // 830\n    \"rho;\" : 961,                                                                                                      // 831\n    \"sigmaf;\" : 962,                                                                                                   // 832\n    \"sigma;\" : 963,                                                                                                    // 833\n    \"tau;\" : 964,                                                                                                      // 834\n    \"upsilon;\" : 965,                                                                                                  // 835\n    \"phi;\" : 966,                                                                                                      // 836\n    \"chi;\" : 967,                                                                                                      // 837\n    \"psi;\" : 968,                                                                                                      // 838\n    \"omega;\" : 969,                                                                                                    // 839\n    \"thetasym;\" : 977,                                                                                                 // 840\n    \"upsih;\" : 978,                                                                                                    // 841\n    \"piv;\" : 982,                                                                                                      // 842\n    \"ensp;\" : 8194,                                                                                                    // 843\n    \"emsp;\" : 8195,                                                                                                    // 844\n    \"thinsp;\" : 8201,                                                                                                  // 845\n    \"zwnj;\" : 8204,                                                                                                    // 846\n    \"zwj;\" : 8205,                                                                                                     // 847\n    \"lrm;\" : 8206,                                                                                                     // 848\n    \"rlm;\" : 8207,                                                                                                     // 849\n    \"ndash;\" : 8211,                                                                                                   // 850\n    \"mdash;\" : 8212,                                                                                                   // 851\n    \"lsquo;\" : 8216,                                                                                                   // 852\n    \"rsquo;\" : 8217,                                                                                                   // 853\n    \"sbquo;\" : 8218,                                                                                                   // 854\n    \"ldquo;\" : 8220,                                                                                                   // 855\n    \"rdquo;\" : 8221,                                                                                                   // 856\n    \"bdquo;\" : 8222,                                                                                                   // 857\n    \"dagger;\" : 8224,                                                                                                  // 858\n    \"Dagger;\" : 8225,                                                                                                  // 859\n    \"bull;\" : 8226,                                                                                                    // 860\n    \"hellip;\" : 8230,                                                                                                  // 861\n    \"permil;\" : 8240,                                                                                                  // 862\n    \"prime;\" : 8242,                                                                                                   // 863\n    \"Prime;\" : 8243,                                                                                                   // 864\n    \"lsaquo;\" : 8249,                                                                                                  // 865\n    \"rsaquo;\" : 8250,                                                                                                  // 866\n    \"oline;\" : 8254,                                                                                                   // 867\n    \"frasl;\" : 8260,                                                                                                   // 868\n    \"euro;\" : 8364,                                                                                                    // 869\n    \"image;\" : 8465,                                                                                                   // 870\n    \"weierp;\" : 8472,                                                                                                  // 871\n    \"real;\" : 8476,                                                                                                    // 872\n    \"trade;\" : 8482,                                                                                                   // 873\n    \"alefsym;\" : 8501,                                                                                                 // 874\n    \"larr;\" : 8592,                                                                                                    // 875\n    \"uarr;\" : 8593,                                                                                                    // 876\n    \"rarr;\" : 8594,                                                                                                    // 877\n    \"darr;\" : 8595,                                                                                                    // 878\n    \"harr;\" : 8596,                                                                                                    // 879\n    \"crarr;\" : 8629,                                                                                                   // 880\n    \"lArr;\" : 8656,                                                                                                    // 881\n    \"uArr;\" : 8657,                                                                                                    // 882\n    \"rArr;\" : 8658,                                                                                                    // 883\n    \"dArr;\" : 8659,                                                                                                    // 884\n    \"hArr;\" : 8660,                                                                                                    // 885\n    \"forall;\" : 8704,                                                                                                  // 886\n    \"part;\" : 8706,                                                                                                    // 887\n    \"exist;\" : 8707,                                                                                                   // 888\n    \"empty;\" : 8709,                                                                                                   // 889\n    \"nabla;\" : 8711,                                                                                                   // 890\n    \"isin;\" : 8712,                                                                                                    // 891\n    \"notin;\" : 8713,                                                                                                   // 892\n    \"ni;\" : 8715,                                                                                                      // 893\n    \"prod;\" : 8719,                                                                                                    // 894\n    \"sum;\" : 8721,                                                                                                     // 895\n    \"minus;\" : 8722,                                                                                                   // 896\n    \"lowast;\" : 8727,                                                                                                  // 897\n    \"radic;\" : 8730,                                                                                                   // 898\n    \"prop;\" : 8733,                                                                                                    // 899\n    \"infin;\" : 8734,                                                                                                   // 900\n    \"ang;\" : 8736,                                                                                                     // 901\n    \"and;\" : 8743,                                                                                                     // 902\n    \"or;\" : 8744,                                                                                                      // 903\n    \"cap;\" : 8745,                                                                                                     // 904\n    \"cup;\" : 8746,                                                                                                     // 905\n    \"int;\" : 8747,                                                                                                     // 906\n    \"there4;\" : 8756,                                                                                                  // 907\n    \"sim;\" : 8764,                                                                                                     // 908\n    \"cong;\" : 8773,                                                                                                    // 909\n    \"asymp;\" : 8776,                                                                                                   // 910\n    \"ne;\" : 8800,                                                                                                      // 911\n    \"equiv;\" : 8801,                                                                                                   // 912\n    \"le;\" : 8804,                                                                                                      // 913\n    \"ge;\" : 8805,                                                                                                      // 914\n    \"sub;\" : 8834,                                                                                                     // 915\n    \"sup;\" : 8835,                                                                                                     // 916\n    \"nsub;\" : 8836,                                                                                                    // 917\n    \"sube;\" : 8838,                                                                                                    // 918\n    \"supe;\" : 8839,                                                                                                    // 919\n    \"oplus;\" : 8853,                                                                                                   // 920\n    \"otimes;\" : 8855,                                                                                                  // 921\n    \"perp;\" : 8869,                                                                                                    // 922\n    \"sdot;\" : 8901,                                                                                                    // 923\n    \"lceil;\" : 8968,                                                                                                   // 924\n    \"rceil;\" : 8969,                                                                                                   // 925\n    \"lfloor;\" : 8970,                                                                                                  // 926\n    \"rfloor;\" : 8971,                                                                                                  // 927\n    \"lang;\" : 9001,                                                                                                    // 928\n    \"rang;\" : 9002,                                                                                                    // 929\n    \"loz;\" : 9674,                                                                                                     // 930\n    \"spades;\" : 9824,                                                                                                  // 931\n    \"clubs;\" : 9827,                                                                                                   // 932\n    \"hearts;\" : 9829,                                                                                                  // 933\n    \"diams;\" : 9830                                                                                                    // 934\n  }                                                                                                                    // 935\n                                                                                                                       // 936\n                                                                                                                       // 937\n}).call(this);                                                                                                         // 938\n                                                                                                                       // 939\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:simple-schema/mongo-object.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * @constructor                                                                                                        // 2\n * @param {Object} objOrModifier                                                                                       // 3\n * @param {string[]} blackBoxKeys - A list of the names of keys that shouldn't be traversed                            // 4\n * @returns {undefined}                                                                                                // 5\n *                                                                                                                     // 6\n * Creates a new MongoObject instance. The object passed as the first argument                                         // 7\n * will be modified in place by calls to instance methods. Also, immediately                                           // 8\n * upon creation of the instance, the object will have any `undefined` keys                                            // 9\n * removed recursively.                                                                                                // 10\n */                                                                                                                    // 11\nMongoObject = function(objOrModifier, blackBoxKeys) {                                                                  // 12\n  var self = this;                                                                                                     // 13\n  self._obj = objOrModifier;                                                                                           // 14\n  self._affectedKeys = {};                                                                                             // 15\n  self._genericAffectedKeys = {};                                                                                      // 16\n  self._parentPositions = [];                                                                                          // 17\n  self._positionsInsideArrays = [];                                                                                    // 18\n  self._objectPositions = [];                                                                                          // 19\n                                                                                                                       // 20\n  function parseObj(val, currentPosition, affectedKey, operator, adjusted, isWithinArray) {                            // 21\n                                                                                                                       // 22\n    // Adjust for first-level modifier operators                                                                       // 23\n    if (!operator && affectedKey && affectedKey.substring(0, 1) === \"$\") {                                             // 24\n      operator = affectedKey;                                                                                          // 25\n      affectedKey = null;                                                                                              // 26\n    }                                                                                                                  // 27\n                                                                                                                       // 28\n    var affectedKeyIsBlackBox = false;                                                                                 // 29\n    var affectedKeyGeneric;                                                                                            // 30\n    var stop = false;                                                                                                  // 31\n    if (affectedKey) {                                                                                                 // 32\n                                                                                                                       // 33\n      // Adjust for $push and $addToSet and $pull and $pop                                                             // 34\n      if (!adjusted) {                                                                                                 // 35\n        if (operator === \"$push\" || operator === \"$addToSet\" || operator === \"$pop\") {                                 // 36\n          // Adjust for $each                                                                                          // 37\n          // We can simply jump forward and pretend like the $each array                                               // 38\n          // is the array for the field. This has the added benefit of                                                 // 39\n          // skipping past any $slice, which we also don't care about.                                                 // 40\n          if (isBasicObject(val) && \"$each\" in val) {                                                                  // 41\n            val = val.$each;                                                                                           // 42\n            currentPosition = currentPosition + \"[$each]\";                                                             // 43\n          } else {                                                                                                     // 44\n            affectedKey = affectedKey + \".0\";                                                                          // 45\n          }                                                                                                            // 46\n          adjusted = true;                                                                                             // 47\n        } else if (operator === \"$pull\") {                                                                             // 48\n          affectedKey = affectedKey + \".0\";                                                                            // 49\n          if (isBasicObject(val)) {                                                                                    // 50\n            stop = true;                                                                                               // 51\n          }                                                                                                            // 52\n          adjusted = true;                                                                                             // 53\n        }                                                                                                              // 54\n      }                                                                                                                // 55\n                                                                                                                       // 56\n      // Make generic key                                                                                              // 57\n      affectedKeyGeneric = makeGeneric(affectedKey);                                                                   // 58\n                                                                                                                       // 59\n      // Determine whether affected key should be treated as a black box                                               // 60\n      affectedKeyIsBlackBox = _.contains(blackBoxKeys, affectedKeyGeneric);                                            // 61\n                                                                                                                       // 62\n      // Mark that this position affects this generic and non-generic key                                              // 63\n      if (currentPosition) {                                                                                           // 64\n        self._affectedKeys[currentPosition] = affectedKey;                                                             // 65\n        self._genericAffectedKeys[currentPosition] = affectedKeyGeneric;                                               // 66\n                                                                                                                       // 67\n        // If we're within an array, mark this position so we can omit it from flat docs                               // 68\n        isWithinArray && self._positionsInsideArrays.push(currentPosition);                                            // 69\n      }                                                                                                                // 70\n    }                                                                                                                  // 71\n                                                                                                                       // 72\n    if (stop)                                                                                                          // 73\n      return;                                                                                                          // 74\n                                                                                                                       // 75\n    // Loop through arrays                                                                                             // 76\n    if (_.isArray(val) && !_.isEmpty(val)) {                                                                           // 77\n      if (currentPosition) {                                                                                           // 78\n        // Mark positions with arrays that should be ignored when we want endpoints only                               // 79\n        self._parentPositions.push(currentPosition);                                                                   // 80\n      }                                                                                                                // 81\n                                                                                                                       // 82\n      // Loop                                                                                                          // 83\n      _.each(val, function(v, i) {                                                                                     // 84\n        parseObj(v, (currentPosition ? currentPosition + \"[\" + i + \"]\" : i), affectedKey + '.' + i, operator, adjusted, true);\n      });                                                                                                              // 86\n    }                                                                                                                  // 87\n                                                                                                                       // 88\n    // Loop through object keys, only for basic objects,                                                               // 89\n    // but always for the passed-in object, even if it                                                                 // 90\n    // is a custom object.                                                                                             // 91\n    else if ((isBasicObject(val) && !affectedKeyIsBlackBox) || !currentPosition) {                                     // 92\n      if (currentPosition && !_.isEmpty(val)) {                                                                        // 93\n        // Mark positions with objects that should be ignored when we want endpoints only                              // 94\n        self._parentPositions.push(currentPosition);                                                                   // 95\n        // Mark positions with objects that should be left out of flat docs.                                           // 96\n        self._objectPositions.push(currentPosition);                                                                   // 97\n      }                                                                                                                // 98\n      // Loop                                                                                                          // 99\n      _.each(val, function(v, k) {                                                                                     // 100\n        if (v === void 0) {                                                                                            // 101\n          delete val[k];                                                                                               // 102\n        } else if (k !== \"$slice\") {                                                                                   // 103\n          parseObj(v, (currentPosition ? currentPosition + \"[\" + k + \"]\" : k), appendAffectedKey(affectedKey, k), operator, adjusted, isWithinArray);\n        }                                                                                                              // 105\n      });                                                                                                              // 106\n    }                                                                                                                  // 107\n                                                                                                                       // 108\n  }                                                                                                                    // 109\n  parseObj(self._obj);                                                                                                 // 110\n                                                                                                                       // 111\n  function reParseObj() {                                                                                              // 112\n    self._affectedKeys = {};                                                                                           // 113\n    self._genericAffectedKeys = {};                                                                                    // 114\n    self._parentPositions = [];                                                                                        // 115\n    self._positionsInsideArrays = [];                                                                                  // 116\n    self._objectPositions = [];                                                                                        // 117\n    parseObj(self._obj);                                                                                               // 118\n  }                                                                                                                    // 119\n                                                                                                                       // 120\n  /**                                                                                                                  // 121\n   * @method MongoObject.forEachNode                                                                                   // 122\n   * @param {Function} func                                                                                            // 123\n   * @param {Object} [options]                                                                                         // 124\n   * @param {Boolean} [options.endPointsOnly=true] - Only call function for endpoints and not for nodes that contain other nodes\n   * @returns {undefined}                                                                                              // 126\n   *                                                                                                                   // 127\n   * Runs a function for each endpoint node in the object tree, including all items in every array.                    // 128\n   * The function arguments are                                                                                        // 129\n   * (1) the value at this node                                                                                        // 130\n   * (2) a string representing the node position                                                                       // 131\n   * (3) the representation of what would be changed in mongo, using mongo dot notation                                // 132\n   * (4) the generic equivalent of argument 3, with \"$\" instead of numeric pieces                                      // 133\n   */                                                                                                                  // 134\n  self.forEachNode = function(func, options) {                                                                         // 135\n    if (typeof func !== \"function\")                                                                                    // 136\n      throw new Error(\"filter requires a loop function\");                                                              // 137\n                                                                                                                       // 138\n    options = _.extend({                                                                                               // 139\n      endPointsOnly: true                                                                                              // 140\n    }, options);                                                                                                       // 141\n                                                                                                                       // 142\n    var updatedValues = {};                                                                                            // 143\n    _.each(self._affectedKeys, function(affectedKey, position) {                                                       // 144\n      if (options.endPointsOnly && _.contains(self._parentPositions, position))                                        // 145\n        return; //only endpoints                                                                                       // 146\n      func.call({                                                                                                      // 147\n        value: self.getValueForPosition(position),                                                                     // 148\n        operator: extractOp(position),                                                                                 // 149\n        position: position,                                                                                            // 150\n        key: affectedKey,                                                                                              // 151\n        genericKey: self._genericAffectedKeys[position],                                                               // 152\n        updateValue: function(newVal) {                                                                                // 153\n          updatedValues[position] = newVal;                                                                            // 154\n        },                                                                                                             // 155\n        remove: function() {                                                                                           // 156\n          updatedValues[position] = void 0;                                                                            // 157\n        }                                                                                                              // 158\n      });                                                                                                              // 159\n    });                                                                                                                // 160\n                                                                                                                       // 161\n    // Actually update/remove values as instructed                                                                     // 162\n    _.each(updatedValues, function(newVal, position) {                                                                 // 163\n      self.setValueForPosition(position, newVal);                                                                      // 164\n    });                                                                                                                // 165\n                                                                                                                       // 166\n  };                                                                                                                   // 167\n                                                                                                                       // 168\n  self.getValueForPosition = function(position) {                                                                      // 169\n    var subkey, subkeys = position.split(\"[\"), current = self._obj;                                                    // 170\n    for (var i = 0, ln = subkeys.length; i < ln; i++) {                                                                // 171\n      subkey = subkeys[i];                                                                                             // 172\n      // If the subkey ends in \"]\", remove the ending                                                                  // 173\n      if (subkey.slice(-1) === \"]\") {                                                                                  // 174\n        subkey = subkey.slice(0, -1);                                                                                  // 175\n      }                                                                                                                // 176\n      current = current[subkey];                                                                                       // 177\n      if (!_.isArray(current) && !isBasicObject(current) && i < ln - 1) {                                              // 178\n        return;                                                                                                        // 179\n      }                                                                                                                // 180\n    }                                                                                                                  // 181\n    return current;                                                                                                    // 182\n  };                                                                                                                   // 183\n                                                                                                                       // 184\n  /**                                                                                                                  // 185\n   * @method MongoObject.prototype.setValueForPosition                                                                 // 186\n   * @param {String} position                                                                                          // 187\n   * @param {Any} value                                                                                                // 188\n   * @returns {undefined}                                                                                              // 189\n   */                                                                                                                  // 190\n  self.setValueForPosition = function(position, value) {                                                               // 191\n    var nextPiece, subkey, subkeys = position.split(\"[\"), current = self._obj;                                         // 192\n                                                                                                                       // 193\n    for (var i = 0, ln = subkeys.length; i < ln; i++) {                                                                // 194\n      subkey = subkeys[i];                                                                                             // 195\n      // If the subkey ends in \"]\", remove the ending                                                                  // 196\n      if (subkey.slice(-1) === \"]\") {                                                                                  // 197\n        subkey = subkey.slice(0, -1);                                                                                  // 198\n      }                                                                                                                // 199\n      // If we've reached the key in the object tree that needs setting or                                             // 200\n      // deleting, do it.                                                                                              // 201\n      if (i === ln - 1) {                                                                                              // 202\n        current[subkey] = value;                                                                                       // 203\n        //if value is undefined, delete the property                                                                   // 204\n        if (value === void 0)                                                                                          // 205\n          delete current[subkey];                                                                                      // 206\n      }                                                                                                                // 207\n      // Otherwise attempt to keep moving deeper into the object.                                                      // 208\n      else {                                                                                                           // 209\n        // If we're setting (as opposed to deleting) a key and we hit a place                                          // 210\n        // in the ancestor chain where the keys are not yet created, create them.                                      // 211\n        if (current[subkey] === void 0 && value !== void 0) {                                                          // 212\n          //see if the next piece is a number                                                                          // 213\n          nextPiece = subkeys[i + 1];                                                                                  // 214\n          nextPiece = parseInt(nextPiece, 10);                                                                         // 215\n          current[subkey] = isNaN(nextPiece) ? {} : [];                                                                // 216\n        }                                                                                                              // 217\n                                                                                                                       // 218\n        // Move deeper into the object                                                                                 // 219\n        current = current[subkey];                                                                                     // 220\n                                                                                                                       // 221\n        // If we can go no further, then quit                                                                          // 222\n        if (!_.isArray(current) && !isBasicObject(current) && i < ln - 1) {                                            // 223\n          return;                                                                                                      // 224\n        }                                                                                                              // 225\n      }                                                                                                                // 226\n    }                                                                                                                  // 227\n                                                                                                                       // 228\n    reParseObj();                                                                                                      // 229\n  };                                                                                                                   // 230\n                                                                                                                       // 231\n  /**                                                                                                                  // 232\n   * @method MongoObject.prototype.removeValueForPosition                                                              // 233\n   * @param {String} position                                                                                          // 234\n   * @returns {undefined}                                                                                              // 235\n   */                                                                                                                  // 236\n  self.removeValueForPosition = function(position) {                                                                   // 237\n    self.setValueForPosition(position, void 0);                                                                        // 238\n  };                                                                                                                   // 239\n                                                                                                                       // 240\n  /**                                                                                                                  // 241\n   * @method MongoObject.prototype.getKeyForPosition                                                                   // 242\n   * @param {String} position                                                                                          // 243\n   * @returns {undefined}                                                                                              // 244\n   */                                                                                                                  // 245\n  self.getKeyForPosition = function(position) {                                                                        // 246\n    return self._affectedKeys[position];                                                                               // 247\n  };                                                                                                                   // 248\n                                                                                                                       // 249\n  /**                                                                                                                  // 250\n   * @method MongoObject.prototype.getGenericKeyForPosition                                                            // 251\n   * @param {String} position                                                                                          // 252\n   * @returns {undefined}                                                                                              // 253\n   */                                                                                                                  // 254\n  self.getGenericKeyForPosition = function(position) {                                                                 // 255\n    return self._genericAffectedKeys[position];                                                                        // 256\n  };                                                                                                                   // 257\n                                                                                                                       // 258\n  /**                                                                                                                  // 259\n   * @method MongoObject.getInfoForKey                                                                                 // 260\n   * @param {String} key - Non-generic key                                                                             // 261\n   * @returns {undefined|Object}                                                                                       // 262\n   *                                                                                                                   // 263\n   * Returns the value and operator of the requested non-generic key.                                                  // 264\n   * Example: {value: 1, operator: \"$pull\"}                                                                            // 265\n   */                                                                                                                  // 266\n  self.getInfoForKey = function(key) {                                                                                 // 267\n    // Get the info                                                                                                    // 268\n    var position = self.getPositionForKey(key);                                                                        // 269\n    if (position) {                                                                                                    // 270\n      return {                                                                                                         // 271\n        value: self.getValueForPosition(position),                                                                     // 272\n        operator: extractOp(position)                                                                                  // 273\n      };                                                                                                               // 274\n    }                                                                                                                  // 275\n                                                                                                                       // 276\n    // If we haven't returned yet, check to see if there is an array value                                             // 277\n    // corresponding to this key                                                                                       // 278\n    // We find the first item within the array, strip the last piece off the                                           // 279\n    // position string, and then return whatever is at that new position in                                            // 280\n    // the original object.                                                                                            // 281\n    var positions = self.getPositionsForGenericKey(key + \".$\"), p, v;                                                  // 282\n    for (var i = 0, ln = positions.length; i < ln; i++) {                                                              // 283\n      p = positions[i];                                                                                                // 284\n      v = self.getValueForPosition(p) || self.getValueForPosition(p.slice(0, p.lastIndexOf(\"[\")));                     // 285\n      if (v) {                                                                                                         // 286\n        return {                                                                                                       // 287\n          value: v,                                                                                                    // 288\n          operator: extractOp(p)                                                                                       // 289\n        };                                                                                                             // 290\n      }                                                                                                                // 291\n    }                                                                                                                  // 292\n  };                                                                                                                   // 293\n                                                                                                                       // 294\n  /**                                                                                                                  // 295\n   * @method MongoObject.getPositionForKey                                                                             // 296\n   * @param {String} key - Non-generic key                                                                             // 297\n   * @returns {undefined|String} Position string                                                                       // 298\n   *                                                                                                                   // 299\n   * Returns the position string for the place in the object that                                                      // 300\n   * affects the requested non-generic key.                                                                            // 301\n   * Example: 'foo[bar][0]'                                                                                            // 302\n   */                                                                                                                  // 303\n  self.getPositionForKey = function(key) {                                                                             // 304\n    // Get the info                                                                                                    // 305\n    for (var position in self._affectedKeys) {                                                                         // 306\n      if (self._affectedKeys.hasOwnProperty(position)) {                                                               // 307\n        if (self._affectedKeys[position] === key) {                                                                    // 308\n          // We return the first one we find. While it's                                                               // 309\n          // possible that multiple update operators could                                                             // 310\n          // affect the same non-generic key, we'll assume that's not the case.                                        // 311\n          return position;                                                                                             // 312\n        }                                                                                                              // 313\n      }                                                                                                                // 314\n    }                                                                                                                  // 315\n                                                                                                                       // 316\n    // If we haven't returned yet, we need to check for affected keys                                                  // 317\n  };                                                                                                                   // 318\n                                                                                                                       // 319\n  /**                                                                                                                  // 320\n   * @method MongoObject.getPositionsForGenericKey                                                                     // 321\n   * @param {String} key - Generic key                                                                                 // 322\n   * @returns {String[]} Array of position strings                                                                     // 323\n   *                                                                                                                   // 324\n   * Returns an array of position strings for the places in the object that                                            // 325\n   * affect the requested generic key.                                                                                 // 326\n   * Example: ['foo[bar][0]']                                                                                          // 327\n   */                                                                                                                  // 328\n  self.getPositionsForGenericKey = function(key) {                                                                     // 329\n    // Get the info                                                                                                    // 330\n    var list = [];                                                                                                     // 331\n    for (var position in self._genericAffectedKeys) {                                                                  // 332\n      if (self._genericAffectedKeys.hasOwnProperty(position)) {                                                        // 333\n        if (self._genericAffectedKeys[position] === key) {                                                             // 334\n          list.push(position);                                                                                         // 335\n        }                                                                                                              // 336\n      }                                                                                                                // 337\n    }                                                                                                                  // 338\n                                                                                                                       // 339\n    return list;                                                                                                       // 340\n  };                                                                                                                   // 341\n                                                                                                                       // 342\n  /**                                                                                                                  // 343\n   * @deprecated Use getInfoForKey                                                                                     // 344\n   * @method MongoObject.getValueForKey                                                                                // 345\n   * @param {String} key - Non-generic key                                                                             // 346\n   * @returns {undefined|Any}                                                                                          // 347\n   *                                                                                                                   // 348\n   * Returns the value of the requested non-generic key                                                                // 349\n   */                                                                                                                  // 350\n  self.getValueForKey = function(key) {                                                                                // 351\n    var position = self.getPositionForKey(key);                                                                        // 352\n    if (position) {                                                                                                    // 353\n      return self.getValueForPosition(position);                                                                       // 354\n    }                                                                                                                  // 355\n  };                                                                                                                   // 356\n                                                                                                                       // 357\n  /**                                                                                                                  // 358\n   * @method MongoObject.prototype.addKey                                                                              // 359\n   * @param {String} key - Key to set                                                                                  // 360\n   * @param {Any} val - Value to give this key                                                                         // 361\n   * @param {String} op - Operator under which to set it, or `null` for a non-modifier object                          // 362\n   * @returns {undefined}                                                                                              // 363\n   *                                                                                                                   // 364\n   * Adds `key` with value `val` under operator `op` to the source object.                                             // 365\n   */                                                                                                                  // 366\n  self.addKey = function(key, val, op) {                                                                               // 367\n    var position = op ? op + \"[\" + key + \"]\" : MongoObject._keyToPosition(key);                                        // 368\n    self.setValueForPosition(position, val);                                                                           // 369\n  };                                                                                                                   // 370\n                                                                                                                       // 371\n  /**                                                                                                                  // 372\n   * @method MongoObject.prototype.removeGenericKeys                                                                   // 373\n   * @param {String[]} keys                                                                                            // 374\n   * @returns {undefined}                                                                                              // 375\n   *                                                                                                                   // 376\n   * Removes anything that affects any of the generic keys in the list                                                 // 377\n   */                                                                                                                  // 378\n  self.removeGenericKeys = function(keys) {                                                                            // 379\n    for (var position in self._genericAffectedKeys) {                                                                  // 380\n      if (self._genericAffectedKeys.hasOwnProperty(position)) {                                                        // 381\n        if (_.contains(keys, self._genericAffectedKeys[position])) {                                                   // 382\n          self.removeValueForPosition(position);                                                                       // 383\n        }                                                                                                              // 384\n      }                                                                                                                // 385\n    }                                                                                                                  // 386\n  };                                                                                                                   // 387\n                                                                                                                       // 388\n  /**                                                                                                                  // 389\n   * @method MongoObject.removeGenericKey                                                                              // 390\n   * @param {String} key                                                                                               // 391\n   * @returns {undefined}                                                                                              // 392\n   *                                                                                                                   // 393\n   * Removes anything that affects the requested generic key                                                           // 394\n   */                                                                                                                  // 395\n  self.removeGenericKey = function(key) {                                                                              // 396\n    for (var position in self._genericAffectedKeys) {                                                                  // 397\n      if (self._genericAffectedKeys.hasOwnProperty(position)) {                                                        // 398\n        if (self._genericAffectedKeys[position] === key) {                                                             // 399\n          self.removeValueForPosition(position);                                                                       // 400\n        }                                                                                                              // 401\n      }                                                                                                                // 402\n    }                                                                                                                  // 403\n  };                                                                                                                   // 404\n                                                                                                                       // 405\n  /**                                                                                                                  // 406\n   * @method MongoObject.removeKey                                                                                     // 407\n   * @param {String} key                                                                                               // 408\n   * @returns {undefined}                                                                                              // 409\n   *                                                                                                                   // 410\n   * Removes anything that affects the requested non-generic key                                                       // 411\n   */                                                                                                                  // 412\n  self.removeKey = function(key) {                                                                                     // 413\n    // We don't use getPositionForKey here because we want to be sure to                                               // 414\n    // remove for all positions if there are multiple.                                                                 // 415\n    for (var position in self._affectedKeys) {                                                                         // 416\n      if (self._affectedKeys.hasOwnProperty(position)) {                                                               // 417\n        if (self._affectedKeys[position] === key) {                                                                    // 418\n          self.removeValueForPosition(position);                                                                       // 419\n        }                                                                                                              // 420\n      }                                                                                                                // 421\n    }                                                                                                                  // 422\n  };                                                                                                                   // 423\n                                                                                                                       // 424\n  /**                                                                                                                  // 425\n   * @method MongoObject.removeKeys                                                                                    // 426\n   * @param {String[]} keys                                                                                            // 427\n   * @returns {undefined}                                                                                              // 428\n   *                                                                                                                   // 429\n   * Removes anything that affects any of the non-generic keys in the list                                             // 430\n   */                                                                                                                  // 431\n  self.removeKeys = function(keys) {                                                                                   // 432\n    for (var i = 0, ln = keys.length; i < ln; i++) {                                                                   // 433\n      self.removeKey(keys[i]);                                                                                         // 434\n    }                                                                                                                  // 435\n  };                                                                                                                   // 436\n                                                                                                                       // 437\n  /**                                                                                                                  // 438\n   * @method MongoObject.filterGenericKeys                                                                             // 439\n   * @param {Function} test - Test function                                                                            // 440\n   * @returns {undefined}                                                                                              // 441\n   *                                                                                                                   // 442\n   * Passes all affected keys to a test function, which                                                                // 443\n   * should return false to remove whatever is affecting that key                                                      // 444\n   */                                                                                                                  // 445\n  self.filterGenericKeys = function(test) {                                                                            // 446\n    var gk, checkedKeys = [], keysToRemove = [];                                                                       // 447\n    for (var position in self._genericAffectedKeys) {                                                                  // 448\n      if (self._genericAffectedKeys.hasOwnProperty(position)) {                                                        // 449\n        gk = self._genericAffectedKeys[position];                                                                      // 450\n        if (!_.contains(checkedKeys, gk)) {                                                                            // 451\n          checkedKeys.push(gk);                                                                                        // 452\n          if (gk && !test(gk)) {                                                                                       // 453\n            keysToRemove.push(gk);                                                                                     // 454\n          }                                                                                                            // 455\n        }                                                                                                              // 456\n      }                                                                                                                // 457\n    }                                                                                                                  // 458\n                                                                                                                       // 459\n    _.each(keysToRemove, function(key) {                                                                               // 460\n      self.removeGenericKey(key);                                                                                      // 461\n    });                                                                                                                // 462\n  };                                                                                                                   // 463\n                                                                                                                       // 464\n  /**                                                                                                                  // 465\n   * @method MongoObject.setValueForKey                                                                                // 466\n   * @param {String} key                                                                                               // 467\n   * @param {Any} val                                                                                                  // 468\n   * @returns {undefined}                                                                                              // 469\n   *                                                                                                                   // 470\n   * Sets the value for every place in the object that affects                                                         // 471\n   * the requested non-generic key                                                                                     // 472\n   */                                                                                                                  // 473\n  self.setValueForKey = function(key, val) {                                                                           // 474\n    // We don't use getPositionForKey here because we want to be sure to                                               // 475\n    // set the value for all positions if there are multiple.                                                          // 476\n    for (var position in self._affectedKeys) {                                                                         // 477\n      if (self._affectedKeys.hasOwnProperty(position)) {                                                               // 478\n        if (self._affectedKeys[position] === key) {                                                                    // 479\n          self.setValueForPosition(position, val);                                                                     // 480\n        }                                                                                                              // 481\n      }                                                                                                                // 482\n    }                                                                                                                  // 483\n  };                                                                                                                   // 484\n                                                                                                                       // 485\n  /**                                                                                                                  // 486\n   * @method MongoObject.setValueForGenericKey                                                                         // 487\n   * @param {String} key                                                                                               // 488\n   * @param {Any} val                                                                                                  // 489\n   * @returns {undefined}                                                                                              // 490\n   *                                                                                                                   // 491\n   * Sets the value for every place in the object that affects                                                         // 492\n   * the requested generic key                                                                                         // 493\n   */                                                                                                                  // 494\n  self.setValueForGenericKey = function(key, val) {                                                                    // 495\n    // We don't use getPositionForKey here because we want to be sure to                                               // 496\n    // set the value for all positions if there are multiple.                                                          // 497\n    for (var position in self._genericAffectedKeys) {                                                                  // 498\n      if (self._genericAffectedKeys.hasOwnProperty(position)) {                                                        // 499\n        if (self._genericAffectedKeys[position] === key) {                                                             // 500\n          self.setValueForPosition(position, val);                                                                     // 501\n        }                                                                                                              // 502\n      }                                                                                                                // 503\n    }                                                                                                                  // 504\n  };                                                                                                                   // 505\n                                                                                                                       // 506\n  /**                                                                                                                  // 507\n   * @method MongoObject.getObject                                                                                     // 508\n   * @returns {Object}                                                                                                 // 509\n   *                                                                                                                   // 510\n   * Get the source object, potentially modified by other method calls on this                                         // 511\n   * MongoObject instance.                                                                                             // 512\n   */                                                                                                                  // 513\n  self.getObject = function() {                                                                                        // 514\n    return self._obj;                                                                                                  // 515\n  };                                                                                                                   // 516\n                                                                                                                       // 517\n  /**                                                                                                                  // 518\n   * @method MongoObject.getFlatObject                                                                                 // 519\n   * @returns {Object}                                                                                                 // 520\n   *                                                                                                                   // 521\n   * Gets a flat object based on the MongoObject instance.                                                             // 522\n   * In a flat object, the key is the name of the non-generic affectedKey,                                             // 523\n   * with mongo dot notation if necessary, and the value is the value for                                              // 524\n   * that key.                                                                                                         // 525\n   *                                                                                                                   // 526\n   * With `keepArrays: true`, we don't flatten within arrays. Currently                                                // 527\n   * MongoDB does not see a key such as `a.0.b` and automatically assume                                               // 528\n   * an array. Instead it would create an object with key \"0\" if there                                                 // 529\n   * wasn't already an array saved as the value of `a`, which is rarely                                                // 530\n   * if ever what we actually want. To avoid this confusion, we                                                        // 531\n   * set entire arrays.                                                                                                // 532\n   */                                                                                                                  // 533\n  self.getFlatObject = function(options) {                                                                             // 534\n    options = options || {};                                                                                           // 535\n    var newObj = {};                                                                                                   // 536\n    _.each(self._affectedKeys, function(affectedKey, position) {                                                       // 537\n      if (typeof affectedKey === \"string\" &&                                                                           // 538\n        (options.keepArrays === true && !_.contains(self._positionsInsideArrays, position) && !_.contains(self._objectPositions, position)) ||\n        (!options.keepArrays && !_.contains(self._parentPositions, position))                                          // 540\n        ) {                                                                                                            // 541\n        newObj[affectedKey] = self.getValueForPosition(position);                                                      // 542\n      }                                                                                                                // 543\n    });                                                                                                                // 544\n    return newObj;                                                                                                     // 545\n  };                                                                                                                   // 546\n                                                                                                                       // 547\n  /**                                                                                                                  // 548\n   * @method MongoObject.affectsKey                                                                                    // 549\n   * @param {String} key                                                                                               // 550\n   * @returns {Object}                                                                                                 // 551\n   *                                                                                                                   // 552\n   * Returns true if the non-generic key is affected by this object                                                    // 553\n   */                                                                                                                  // 554\n  self.affectsKey = function(key) {                                                                                    // 555\n    return !!self.getPositionForKey(key);                                                                              // 556\n  };                                                                                                                   // 557\n                                                                                                                       // 558\n  /**                                                                                                                  // 559\n   * @method MongoObject.affectsGenericKey                                                                             // 560\n   * @param {String} key                                                                                               // 561\n   * @returns {Object}                                                                                                 // 562\n   *                                                                                                                   // 563\n   * Returns true if the generic key is affected by this object                                                        // 564\n   */                                                                                                                  // 565\n  self.affectsGenericKey = function(key) {                                                                             // 566\n    for (var position in self._genericAffectedKeys) {                                                                  // 567\n      if (self._genericAffectedKeys.hasOwnProperty(position)) {                                                        // 568\n        if (self._genericAffectedKeys[position] === key) {                                                             // 569\n          return true;                                                                                                 // 570\n        }                                                                                                              // 571\n      }                                                                                                                // 572\n    }                                                                                                                  // 573\n    return false;                                                                                                      // 574\n  };                                                                                                                   // 575\n                                                                                                                       // 576\n  /**                                                                                                                  // 577\n   * @method MongoObject.affectsGenericKeyImplicit                                                                     // 578\n   * @param {String} key                                                                                               // 579\n   * @returns {Object}                                                                                                 // 580\n   *                                                                                                                   // 581\n   * Like affectsGenericKey, but will return true if a child key is affected                                           // 582\n   */                                                                                                                  // 583\n  self.affectsGenericKeyImplicit = function(key) {                                                                     // 584\n    for (var position in self._genericAffectedKeys) {                                                                  // 585\n      if (self._genericAffectedKeys.hasOwnProperty(position)) {                                                        // 586\n        var affectedKey = self._genericAffectedKeys[position];                                                         // 587\n                                                                                                                       // 588\n        // If the affected key is the test key                                                                         // 589\n        if (affectedKey === key) {                                                                                     // 590\n          return true;                                                                                                 // 591\n        }                                                                                                              // 592\n                                                                                                                       // 593\n        // If the affected key implies the test key because the affected key                                           // 594\n        // starts with the test key followed by a period                                                               // 595\n        if (affectedKey.substring(0, key.length + 1) === key + \".\") {                                                  // 596\n          return true;                                                                                                 // 597\n        }                                                                                                              // 598\n                                                                                                                       // 599\n        // If the affected key implies the test key because the affected key                                           // 600\n        // starts with the test key and the test key ends with \".$\"                                                    // 601\n        var lastTwo = key.slice(-2);                                                                                   // 602\n        if (lastTwo === \".$\" && key.slice(0, -2) === affectedKey) {                                                    // 603\n          return true;                                                                                                 // 604\n        }                                                                                                              // 605\n      }                                                                                                                // 606\n    }                                                                                                                  // 607\n    return false;                                                                                                      // 608\n  };                                                                                                                   // 609\n};                                                                                                                     // 610\n                                                                                                                       // 611\n/** Takes a string representation of an object key and its value                                                       // 612\n *  and updates \"obj\" to contain that key with that value.                                                             // 613\n *                                                                                                                     // 614\n *  Example keys and results if val is 1:                                                                              // 615\n *    \"a\" -> {a: 1}                                                                                                    // 616\n *    \"a[b]\" -> {a: {b: 1}}                                                                                            // 617\n *    \"a[b][0]\" -> {a: {b: [1]}}                                                                                       // 618\n *    \"a[b.0.c]\" -> {a: {'b.0.c': 1}}                                                                                  // 619\n */                                                                                                                    // 620\n                                                                                                                       // 621\n/** Takes a string representation of an object key and its value                                                       // 622\n *  and updates \"obj\" to contain that key with that value.                                                             // 623\n *                                                                                                                     // 624\n *  Example keys and results if val is 1:                                                                              // 625\n *    \"a\" -> {a: 1}                                                                                                    // 626\n *    \"a[b]\" -> {a: {b: 1}}                                                                                            // 627\n *    \"a[b][0]\" -> {a: {b: [1]}}                                                                                       // 628\n *    \"a[b.0.c]\" -> {a: {'b.0.c': 1}}                                                                                  // 629\n *                                                                                                                     // 630\n * @param {any} val                                                                                                    // 631\n * @param {String} key                                                                                                 // 632\n * @param {Object} obj                                                                                                 // 633\n * @returns {undefined}                                                                                                // 634\n */                                                                                                                    // 635\nMongoObject.expandKey = function(val, key, obj) {                                                                      // 636\n  var nextPiece, subkey, subkeys = key.split(\"[\"), current = obj;                                                      // 637\n  for (var i = 0, ln = subkeys.length; i < ln; i++) {                                                                  // 638\n    subkey = subkeys[i];                                                                                               // 639\n    if (subkey.slice(-1) === \"]\") {                                                                                    // 640\n      subkey = subkey.slice(0, -1);                                                                                    // 641\n    }                                                                                                                  // 642\n    if (i === ln - 1) {                                                                                                // 643\n      //last iteration; time to set the value; always overwrite                                                        // 644\n      current[subkey] = val;                                                                                           // 645\n      //if val is undefined, delete the property                                                                       // 646\n      if (val === void 0)                                                                                              // 647\n        delete current[subkey];                                                                                        // 648\n    } else {                                                                                                           // 649\n      //see if the next piece is a number                                                                              // 650\n      nextPiece = subkeys[i + 1];                                                                                      // 651\n      nextPiece = parseInt(nextPiece, 10);                                                                             // 652\n      if (!current[subkey]) {                                                                                          // 653\n        current[subkey] = isNaN(nextPiece) ? {} : [];                                                                  // 654\n      }                                                                                                                // 655\n    }                                                                                                                  // 656\n    current = current[subkey];                                                                                         // 657\n  }                                                                                                                    // 658\n};                                                                                                                     // 659\n                                                                                                                       // 660\nMongoObject._keyToPosition = function keyToPosition(key, wrapAll) {                                                    // 661\n  var position = '';                                                                                                   // 662\n  _.each(key.split(\".\"), function (piece, i) {                                                                         // 663\n    if (i === 0 && !wrapAll) {                                                                                         // 664\n      position += piece;                                                                                               // 665\n    } else {                                                                                                           // 666\n      position += \"[\" + piece + \"]\";                                                                                   // 667\n    }                                                                                                                  // 668\n  });                                                                                                                  // 669\n  return position;                                                                                                     // 670\n};                                                                                                                     // 671\n                                                                                                                       // 672\n/**                                                                                                                    // 673\n * @method MongoObject._positionToKey                                                                                  // 674\n * @param {String} position                                                                                            // 675\n * @returns {String} The key that this position in an object would affect.                                             // 676\n *                                                                                                                     // 677\n * This is different from MongoObject.prototype.getKeyForPosition in that                                              // 678\n * this method does not depend on the requested position actually being                                                // 679\n * present in any particular MongoObject.                                                                              // 680\n */                                                                                                                    // 681\nMongoObject._positionToKey = function positionToKey(position) {                                                        // 682\n  //XXX Probably a better way to do this, but this is                                                                  // 683\n  //foolproof for now.                                                                                                 // 684\n  var mDoc = new MongoObject({});                                                                                      // 685\n  mDoc.setValueForPosition(position, 1); //value doesn't matter                                                        // 686\n  var key = mDoc.getKeyForPosition(position);                                                                          // 687\n  mDoc = null;                                                                                                         // 688\n  return key;                                                                                                          // 689\n};                                                                                                                     // 690\n                                                                                                                       // 691\nvar isArray = _.isArray;                                                                                               // 692\n                                                                                                                       // 693\nvar isObject = function(obj) {                                                                                         // 694\n  return obj === Object(obj);                                                                                          // 695\n};                                                                                                                     // 696\n                                                                                                                       // 697\n// getPrototypeOf polyfill                                                                                             // 698\nif (typeof Object.getPrototypeOf !== \"function\") {                                                                     // 699\n  if (typeof \"\".__proto__ === \"object\") {                                                                              // 700\n    Object.getPrototypeOf = function(object) {                                                                         // 701\n      return object.__proto__;                                                                                         // 702\n    };                                                                                                                 // 703\n  } else {                                                                                                             // 704\n    Object.getPrototypeOf = function(object) {                                                                         // 705\n      // May break if the constructor has been tampered with                                                           // 706\n      return object.constructor.prototype;                                                                             // 707\n    };                                                                                                                 // 708\n  }                                                                                                                    // 709\n}                                                                                                                      // 710\n                                                                                                                       // 711\n/* Tests whether \"obj\" is an Object as opposed to                                                                      // 712\n * something that inherits from Object                                                                                 // 713\n *                                                                                                                     // 714\n * @param {any} obj                                                                                                    // 715\n * @returns {Boolean}                                                                                                  // 716\n */                                                                                                                    // 717\nvar isBasicObject = function(obj) {                                                                                    // 718\n  return isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;                                             // 719\n};                                                                                                                     // 720\n                                                                                                                       // 721\n/* Takes a specific string that uses mongo-style dot notation                                                          // 722\n * and returns a generic string equivalent. Replaces all numeric                                                       // 723\n * \"pieces\" with a dollar sign ($).                                                                                    // 724\n *                                                                                                                     // 725\n * @param {type} name                                                                                                  // 726\n * @returns {unresolved}                                                                                               // 727\n */                                                                                                                    // 728\nvar makeGeneric = function makeGeneric(name) {                                                                         // 729\n  if (typeof name !== \"string\")                                                                                        // 730\n    return null;                                                                                                       // 731\n  return name.replace(/\\.[0-9]+\\./g, '.$.').replace(/\\.[0-9]+/g, '.$');                                                // 732\n};                                                                                                                     // 733\n                                                                                                                       // 734\nvar appendAffectedKey = function appendAffectedKey(affectedKey, key) {                                                 // 735\n  if (key === \"$each\") {                                                                                               // 736\n    return affectedKey;                                                                                                // 737\n  } else {                                                                                                             // 738\n    return (affectedKey ? affectedKey + \".\" + key : key);                                                              // 739\n  }                                                                                                                    // 740\n};                                                                                                                     // 741\n                                                                                                                       // 742\n// Extracts operator piece, if present, from position string                                                           // 743\nvar extractOp = function extractOp(position) {                                                                         // 744\n  var firstPositionPiece = position.slice(0, position.indexOf(\"[\"));                                                   // 745\n  return (firstPositionPiece.substring(0, 1) === \"$\") ? firstPositionPiece : null;                                     // 746\n};                                                                                                                     // 747\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:simple-schema/simple-schema-utility.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nUtility = {                                                                                                            // 1\n  appendAffectedKey: function appendAffectedKey(affectedKey, key) {                                                    // 2\n    if (key === \"$each\") {                                                                                             // 3\n      return affectedKey;                                                                                              // 4\n    } else {                                                                                                           // 5\n      return (affectedKey ? affectedKey + \".\" + key : key);                                                            // 6\n    }                                                                                                                  // 7\n  },                                                                                                                   // 8\n  shouldCheck: function shouldCheck(key) {                                                                             // 9\n    if (key === \"$pushAll\") {                                                                                          // 10\n      throw new Error(\"$pushAll is not supported; use $push + $each\");                                                 // 11\n    }                                                                                                                  // 12\n    return !_.contains([\"$pull\", \"$pullAll\", \"$pop\", \"$slice\"], key);                                                  // 13\n  },                                                                                                                   // 14\n  errorObject: function errorObject(errorType, keyName, keyValue, def, ss) {                                           // 15\n    return {name: keyName, type: errorType, value: keyValue};                                                          // 16\n  },                                                                                                                   // 17\n  // Tests whether it's an Object as opposed to something that inherits from Object                                    // 18\n  isBasicObject: function isBasicObject(obj) {                                                                         // 19\n    return _.isObject(obj) && Object.getPrototypeOf(obj) === Object.prototype;                                         // 20\n  },                                                                                                                   // 21\n  // The latest Safari returns false for Uint8Array, etc. instanceof Function                                          // 22\n  // unlike other browsers.                                                                                            // 23\n  safariBugFix: function safariBugFix(type) {                                                                          // 24\n    return (typeof Uint8Array !== \"undefined\" && type === Uint8Array)                                                  // 25\n    || (typeof Uint16Array !== \"undefined\" && type === Uint16Array)                                                    // 26\n    || (typeof Uint32Array !== \"undefined\" && type === Uint32Array)                                                    // 27\n    || (typeof Uint8ClampedArray !== \"undefined\" && type === Uint8ClampedArray);                                       // 28\n  },                                                                                                                   // 29\n  isNotNullOrUndefined: function isNotNullOrUndefined(val) {                                                           // 30\n    return val !== void 0 && val !== null;                                                                             // 31\n  },                                                                                                                   // 32\n  // Extracts operator piece, if present, from position string                                                         // 33\n  extractOp: function extractOp(position) {                                                                            // 34\n    var firstPositionPiece = position.slice(0, position.indexOf(\"[\"));                                                 // 35\n    return (firstPositionPiece.substring(0, 1) === \"$\") ? firstPositionPiece : null;                                   // 36\n  },                                                                                                                   // 37\n  deleteIfPresent: function deleteIfPresent(obj, key) {                                                                // 38\n    if (key in obj) {                                                                                                  // 39\n      delete obj[key];                                                                                                 // 40\n    }                                                                                                                  // 41\n  },                                                                                                                   // 42\n  looksLikeModifier: function looksLikeModifier(obj) {                                                                 // 43\n    for (var key in obj) {                                                                                             // 44\n      if (obj.hasOwnProperty(key) && key.substring(0, 1) === \"$\") {                                                    // 45\n        return true;                                                                                                   // 46\n      }                                                                                                                // 47\n    }                                                                                                                  // 48\n    return false;                                                                                                      // 49\n  },                                                                                                                   // 50\n  dateToDateString: function dateToDateString(date) {                                                                  // 51\n    var m = (date.getUTCMonth() + 1);                                                                                  // 52\n    if (m < 10) {                                                                                                      // 53\n      m = \"0\" + m;                                                                                                     // 54\n    }                                                                                                                  // 55\n    var d = date.getUTCDate();                                                                                         // 56\n    if (d < 10) {                                                                                                      // 57\n      d = \"0\" + d;                                                                                                     // 58\n    }                                                                                                                  // 59\n    return date.getUTCFullYear() + '-' + m + '-' + d;                                                                  // 60\n  }                                                                                                                    // 61\n};                                                                                                                     // 62\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:simple-schema/simple-schema.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nif (Meteor.isServer) {                                                                                                 // 1\n  S = Npm.require(\"string\");                                                                                           // 2\n}                                                                                                                      // 3\nif (Meteor.isClient) {                                                                                                 // 4\n  S = window.S;                                                                                                        // 5\n}                                                                                                                      // 6\n                                                                                                                       // 7\nvar schemaDefinition = {                                                                                               // 8\n  type: Match.Any,                                                                                                     // 9\n  label: Match.Optional(Match.OneOf(String, Function)),                                                                // 10\n  optional: Match.Optional(Match.OneOf(Boolean, Function)),                                                            // 11\n  min: Match.Optional(Match.OneOf(Number, Date, Function)),                                                            // 12\n  max: Match.Optional(Match.OneOf(Number, Date, Function)),                                                            // 13\n  minCount: Match.Optional(Match.OneOf(Number, Function)),                                                             // 14\n  maxCount: Match.Optional(Match.OneOf(Number, Function)),                                                             // 15\n  allowedValues: Match.Optional(Match.OneOf([Match.Any], Function)),                                                   // 16\n  decimal: Match.Optional(Boolean),                                                                                    // 17\n  regEx: Match.Optional(Match.OneOf(RegExp, [RegExp])),                                                                // 18\n  custom: Match.Optional(Function),                                                                                    // 19\n  blackbox: Match.Optional(Boolean),                                                                                   // 20\n  autoValue: Match.Optional(Function),                                                                                 // 21\n  defaultValue: Match.Optional(Match.Any),                                                                             // 22\n  trim: Match.Optional(Boolean)                                                                                        // 23\n};                                                                                                                     // 24\n                                                                                                                       // 25\n//exported                                                                                                             // 26\nSimpleSchema = function(schemas, options) {                                                                            // 27\n  var self = this;                                                                                                     // 28\n  var firstLevelSchemaKeys = [];                                                                                       // 29\n  var fieldNameRoot;                                                                                                   // 30\n  options = options || {};                                                                                             // 31\n  schemas = schemas || {};                                                                                             // 32\n                                                                                                                       // 33\n  if (!_.isArray(schemas)) {                                                                                           // 34\n    schemas = [schemas];                                                                                               // 35\n  }                                                                                                                    // 36\n                                                                                                                       // 37\n  // adjust and store a copy of the schema definitions                                                                 // 38\n  self._schema = mergeSchemas(schemas);                                                                                // 39\n                                                                                                                       // 40\n  // store the list of defined keys for speedier checking                                                              // 41\n  self._schemaKeys = [];                                                                                               // 42\n                                                                                                                       // 43\n  // store autoValue functions by key                                                                                  // 44\n  self._autoValues = {};                                                                                               // 45\n                                                                                                                       // 46\n  // store the list of blackbox keys for passing to MongoObject constructor                                            // 47\n  self._blackboxKeys = [];                                                                                             // 48\n                                                                                                                       // 49\n  // a place to store custom validators for this instance                                                              // 50\n  self._validators = [];                                                                                               // 51\n                                                                                                                       // 52\n  // a place to store custom error messages for this schema                                                            // 53\n  self._messages = {};                                                                                                 // 54\n                                                                                                                       // 55\n  self._depsMessages = new Deps.Dependency;                                                                            // 56\n  self._depsLabels = {};                                                                                               // 57\n                                                                                                                       // 58\n  _.each(self._schema, function(definition, fieldName) {                                                               // 59\n    // Validate the field definition                                                                                   // 60\n    if (!Match.test(definition, schemaDefinition)) {                                                                   // 61\n      throw new Error('Invalid definition for ' + fieldName + ' field.');                                              // 62\n    }                                                                                                                  // 63\n                                                                                                                       // 64\n    fieldNameRoot = fieldName.split(\".\")[0];                                                                           // 65\n                                                                                                                       // 66\n    self._schemaKeys.push(fieldName);                                                                                  // 67\n                                                                                                                       // 68\n    // We support defaultValue shortcut by converting it immediately into an                                           // 69\n    // autoValue.                                                                                                      // 70\n    if ('defaultValue' in definition) {                                                                                // 71\n      if ('autoValue' in definition) {                                                                                 // 72\n        console.warn('SimpleSchema: Found both autoValue and defaultValue options for \"' + fieldName + '\". Ignoring defaultValue.');\n      } else {                                                                                                         // 74\n        if (fieldName.slice(-2) === \".$\") {                                                                            // 75\n          throw new Error('An array item field (one that ends with \".$\") cannot have defaultValue.')                   // 76\n        }                                                                                                              // 77\n        self._autoValues[fieldName] = (function defineAutoValue(v) {                                                   // 78\n          return function() {                                                                                          // 79\n            if (this.operator === null && !this.isSet) {                                                               // 80\n              return v;                                                                                                // 81\n            }                                                                                                          // 82\n          };                                                                                                           // 83\n        })(definition.defaultValue);                                                                                   // 84\n      }                                                                                                                // 85\n    }                                                                                                                  // 86\n                                                                                                                       // 87\n    if ('autoValue' in definition) {                                                                                   // 88\n      if (fieldName.slice(-2) === \".$\") {                                                                              // 89\n        throw new Error('An array item field (one that ends with \".$\") cannot have autoValue.')                        // 90\n      }                                                                                                                // 91\n      self._autoValues[fieldName] = definition.autoValue;                                                              // 92\n    }                                                                                                                  // 93\n                                                                                                                       // 94\n    self._depsLabels[fieldName] = new Deps.Dependency;                                                                 // 95\n                                                                                                                       // 96\n    if (definition.blackbox === true) {                                                                                // 97\n      self._blackboxKeys.push(fieldName);                                                                              // 98\n    }                                                                                                                  // 99\n                                                                                                                       // 100\n    if (!_.contains(firstLevelSchemaKeys, fieldNameRoot)) {                                                            // 101\n      firstLevelSchemaKeys.push(fieldNameRoot);                                                                        // 102\n    }                                                                                                                  // 103\n  });                                                                                                                  // 104\n                                                                                                                       // 105\n                                                                                                                       // 106\n  // Cache these lists                                                                                                 // 107\n  self._firstLevelSchemaKeys = firstLevelSchemaKeys;                                                                   // 108\n  self._objectKeys = getObjectKeys(self._schema, self._schemaKeys);                                                    // 109\n                                                                                                                       // 110\n  // We will store named validation contexts here                                                                      // 111\n  self._validationContexts = {};                                                                                       // 112\n};                                                                                                                     // 113\n                                                                                                                       // 114\n// This allows other packages or users to extend the schema                                                            // 115\n// definition options that are supported.                                                                              // 116\nSimpleSchema.extendOptions = function(options) {                                                                       // 117\n  _.extend(schemaDefinition, options);                                                                                 // 118\n};                                                                                                                     // 119\n                                                                                                                       // 120\n// this domain regex matches all domains that have at least one .                                                      // 121\n// sadly IPv4 Adresses will be caught too but technically those are valid domains                                      // 122\n// this expression is extracted from the original RFC 5322 mail expression                                             // 123\n// a modification enforces that the tld consists only of characters                                                    // 124\nvar RX_DOMAIN = '(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z](?:[a-z-]*[a-z])?';                                       // 125\n// this domain regex matches everythign that could be a domain in intranet                                             // 126\n// that means \"localhost\" is a valid domain                                                                            // 127\nvar RX_NAME_DOMAIN = '(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?(?:\\\\.|$))+';                                                  // 128\n// strict IPv4 expression which allows 0-255 per oktett                                                                // 129\nvar RX_IPv4 = '(?:(?:[0-1]?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])(?:\\\\.|$)){4}';                                                  // 130\n// strict IPv6 expression which allows (and validates) all shortcuts                                                   // 131\nvar RX_IPv6 = '(?:(?:[\\\\dA-Fa-f]{1,4}(?::|$)){8}' // full adress                                                       // 132\n  + '|(?=(?:[^:\\\\s]|:[^:\\\\s])*::(?:[^:\\\\s]|:[^:\\\\s])*$)' // or min/max one '::'                                        // 133\n  + '[\\\\dA-Fa-f]{0,4}(?:::?(?:[\\\\dA-Fa-f]{1,4}|$)){1,6})'; // and short adress                                         // 134\n// this allows domains (also localhost etc) and ip adresses                                                            // 135\nvar RX_WEAK_DOMAIN = '(?:' + [RX_NAME_DOMAIN,RX_IPv4,RX_IPv6].join('|') + ')';                                         // 136\n                                                                                                                       // 137\nSimpleSchema.RegEx = {                                                                                                 // 138\n  // We use the RegExp suggested by W3C in http://www.w3.org/TR/html5/forms.html#valid-e-mail-address                  // 139\n  // This is probably the same logic used by most browsers when type=email, which is our goal. It is                   // 140\n  // a very permissive expression. Some apps may wish to be more strict and can write their own RegExp.                // 141\n  Email: /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n                                                                                                                       // 143\n  Domain: new RegExp('^' + RX_DOMAIN + '$'),                                                                           // 144\n  WeakDomain: new RegExp('^' + RX_WEAK_DOMAIN + '$'),                                                                  // 145\n                                                                                                                       // 146\n  IP: new RegExp('^(?:' + RX_IPv4 + '|' + RX_IPv6 + ')$'),                                                             // 147\n  IPv4: new RegExp('^' + RX_IPv4 + '$'),                                                                               // 148\n  IPv6: new RegExp('^' + RX_IPv6 + '$'),                                                                               // 149\n  // URL RegEx from https://gist.github.com/dperini/729294                                                             // 150\n  // http://mathiasbynens.be/demo/url-regex                                                                            // 151\n  Url: /^(?:(?:https?|ftp):\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!10(?:\\.\\d{1,3}){3})(?!127(?:\\.\\d{1,3}){3})(?!169\\.254(?:\\.\\d{1,3}){2})(?!192\\.168(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/i,\n  // unique id from the random package also used by minimongo                                                          // 153\n  // character list: https://github.com/meteor/meteor/blob/release/0.8.0/packages/random/random.js#L88                 // 154\n  // string length: https://github.com/meteor/meteor/blob/release/0.8.0/packages/random/random.js#L143                 // 155\n  Id: /^[23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz]{17}$/                                                // 156\n};                                                                                                                     // 157\n                                                                                                                       // 158\nSimpleSchema._makeGeneric = function(name) {                                                                           // 159\n  if (typeof name !== \"string\")                                                                                        // 160\n    return null;                                                                                                       // 161\n                                                                                                                       // 162\n  return name.replace(/\\.[0-9]+\\./g, '.$.').replace(/\\.[0-9]+/g, '.$');                                                // 163\n};                                                                                                                     // 164\n                                                                                                                       // 165\nSimpleSchema._depsGlobalMessages = new Deps.Dependency;                                                                // 166\n                                                                                                                       // 167\n// Inherit from Match.Where                                                                                            // 168\n// This allow SimpleSchema instance to be recognized as a Match.Where instance as well                                 // 169\n// as a SimpleSchema instance                                                                                          // 170\nSimpleSchema.prototype = new Match.Where();                                                                            // 171\n                                                                                                                       // 172\n// If an object is an instance of Match.Where, Meteor built-in check API will look at                                  // 173\n// the function named `condition` and will pass it the document to validate                                            // 174\nSimpleSchema.prototype.condition = function(obj) {                                                                     // 175\n  var self = this;                                                                                                     // 176\n                                                                                                                       // 177\n  //determine whether obj is a modifier                                                                                // 178\n  var isModifier, isNotModifier;                                                                                       // 179\n  _.each(obj, function(val, key) {                                                                                     // 180\n    if (key.substring(0, 1) === \"$\") {                                                                                 // 181\n      isModifier = true;                                                                                               // 182\n    } else {                                                                                                           // 183\n      isNotModifier = true;                                                                                            // 184\n    }                                                                                                                  // 185\n  });                                                                                                                  // 186\n                                                                                                                       // 187\n  if (isModifier && isNotModifier)                                                                                     // 188\n    throw new Match.Error(\"Object cannot contain modifier operators alongside other keys\");                            // 189\n                                                                                                                       // 190\n  if (!self.newContext().validate(obj, {modifier: isModifier, filter: false, autoConvert: false}))                     // 191\n    throw new Match.Error(\"One or more properties do not match the schema.\");                                          // 192\n                                                                                                                       // 193\n  return true;                                                                                                         // 194\n};                                                                                                                     // 195\n                                                                                                                       // 196\nfunction logInvalidKeysForContext(context, name) {                                                                     // 197\n  Meteor.startup(function() {                                                                                          // 198\n    Deps.autorun(function() {                                                                                          // 199\n      if (!context.isValid()) {                                                                                        // 200\n        console.log('SimpleSchema invalid keys for \"' + name + '\" context:', context.invalidKeys());                   // 201\n      }                                                                                                                // 202\n    });                                                                                                                // 203\n  });                                                                                                                  // 204\n}                                                                                                                      // 205\n                                                                                                                       // 206\nSimpleSchema.prototype.namedContext = function(name) {                                                                 // 207\n  var self = this;                                                                                                     // 208\n  if (typeof name !== \"string\") {                                                                                      // 209\n    name = \"default\";                                                                                                  // 210\n  }                                                                                                                    // 211\n  if (!self._validationContexts[name]) {                                                                               // 212\n    self._validationContexts[name] = new SimpleSchemaValidationContext(self);                                          // 213\n                                                                                                                       // 214\n    // In debug mode, log all invalid key errors to the browser console                                                // 215\n    if (SimpleSchema.debug && Meteor.isClient) {                                                                       // 216\n      Deps.nonreactive(function() {                                                                                    // 217\n        logInvalidKeysForContext(self._validationContexts[name], name);                                                // 218\n      });                                                                                                              // 219\n    }                                                                                                                  // 220\n  }                                                                                                                    // 221\n  return self._validationContexts[name];                                                                               // 222\n};                                                                                                                     // 223\n                                                                                                                       // 224\n// Global custom validators                                                                                            // 225\nSimpleSchema._validators = [];                                                                                         // 226\nSimpleSchema.addValidator = function(func) {                                                                           // 227\n  SimpleSchema._validators.push(func);                                                                                 // 228\n};                                                                                                                     // 229\n                                                                                                                       // 230\n// Instance custom validators                                                                                          // 231\n// validator is deprecated; use addValidator                                                                           // 232\nSimpleSchema.prototype.addValidator = SimpleSchema.prototype.validator = function(func) {                              // 233\n  this._validators.push(func);                                                                                         // 234\n};                                                                                                                     // 235\n                                                                                                                       // 236\n/**                                                                                                                    // 237\n * @method SimpleSchema.prototype.pick                                                                                 // 238\n * @param {[fields]} The list of fields to pick to instantiate the subschema                                           // 239\n * @returns {SimpleSchema} The subschema                                                                               // 240\n */                                                                                                                    // 241\nSimpleSchema.prototype.pick = function(/* arguments */) {                                                              // 242\n  var self = this;                                                                                                     // 243\n  var args = _.toArray(arguments);                                                                                     // 244\n  args.unshift(self._schema);                                                                                          // 245\n                                                                                                                       // 246\n  var newSchema = _.pick.apply(null, args);                                                                            // 247\n  return new SimpleSchema(newSchema);                                                                                  // 248\n};                                                                                                                     // 249\n                                                                                                                       // 250\n/**                                                                                                                    // 251\n * @method SimpleSchema.prototype.clean                                                                                // 252\n * @param {Object} doc - Document or modifier to clean. Referenced object will be modified in place.                   // 253\n * @param {Object} [options]                                                                                           // 254\n * @param {Boolean} [options.filter=true] - Do filtering?                                                              // 255\n * @param {Boolean} [options.autoConvert=true] - Do automatic type converting?                                         // 256\n * @param {Boolean} [options.removeEmptyStrings=true] - Remove keys in normal object or $set where the value is an empty string?\n * @param {Boolean} [options.trimStrings=true] - Trim string values?                                                   // 258\n * @param {Boolean} [options.getAutoValues=true] - Inject automatic and default values?                                // 259\n * @param {Boolean} [options.isModifier=false] - Is doc a modifier object?                                             // 260\n * @param {Object} [options.extendAutoValueContext] - This object will be added to the `this` context of autoValue functions.\n * @returns {Object} The modified doc.                                                                                 // 262\n *                                                                                                                     // 263\n * Cleans a document or modifier object. By default, will filter, automatically                                        // 264\n * type convert where possible, and inject automatic/default values. Use the options                                   // 265\n * to skip one or more of these.                                                                                       // 266\n */                                                                                                                    // 267\nSimpleSchema.prototype.clean = function(doc, options) {                                                                // 268\n  var self = this;                                                                                                     // 269\n                                                                                                                       // 270\n  // By default, doc will be filtered and autoconverted                                                                // 271\n  options = _.extend({                                                                                                 // 272\n    filter: true,                                                                                                      // 273\n    autoConvert: true,                                                                                                 // 274\n    removeEmptyStrings: true,                                                                                          // 275\n    trimStrings: true,                                                                                                 // 276\n    getAutoValues: true,                                                                                               // 277\n    isModifier: false,                                                                                                 // 278\n    extendAutoValueContext: {}                                                                                         // 279\n  }, options || {});                                                                                                   // 280\n                                                                                                                       // 281\n  // Convert $pushAll (deprecated) to $push with $each                                                                 // 282\n  if (\"$pushAll\" in doc) {                                                                                             // 283\n    console.warn(\"SimpleSchema.clean: $pushAll is deprecated; converting to $push with $each\");                        // 284\n    doc.$push = doc.$push || {};                                                                                       // 285\n    for (var field in doc.$pushAll) {                                                                                  // 286\n      doc.$push[field] = doc.$push[field] || {};                                                                       // 287\n      doc.$push[field].$each = doc.$push[field].$each || [];                                                           // 288\n      for (var i = 0, ln = doc.$pushAll[field].length; i < ln; i++) {                                                  // 289\n        doc.$push[field].$each.push(doc.$pushAll[field][i]);                                                           // 290\n      }                                                                                                                // 291\n      delete doc.$pushAll;                                                                                             // 292\n    }                                                                                                                  // 293\n  }                                                                                                                    // 294\n                                                                                                                       // 295\n  var mDoc = new MongoObject(doc, self._blackboxKeys);                                                                 // 296\n                                                                                                                       // 297\n  // Clean loop                                                                                                        // 298\n  if (options.filter || options.autoConvert || options.removeEmptyStrings || options.trimStrings) {                    // 299\n    mDoc.forEachNode(function() {                                                                                      // 300\n      var gKey = this.genericKey;                                                                                      // 301\n      if (gKey) {                                                                                                      // 302\n        var def = self._schema[gKey];                                                                                  // 303\n        var val = this.value;                                                                                          // 304\n        // Filter out props if necessary; any property is OK for $unset because we want to                             // 305\n        // allow conversions to remove props that have been removed from the schema.                                   // 306\n        if (options.filter && this.operator !== \"$unset\" && !self.allowsKey(gKey)) {                                   // 307\n          // XXX Special handling for $each; maybe this could be made nicer                                            // 308\n          if (this.position.slice(-7) === \"[$each]\") {                                                                 // 309\n            mDoc.removeValueForPosition(this.position.slice(0, -7));                                                   // 310\n          } else {                                                                                                     // 311\n            this.remove();                                                                                             // 312\n          }                                                                                                            // 313\n          if (SimpleSchema.debug) {                                                                                    // 314\n            console.info('SimpleSchema.clean: filtered out value that would have affected key \"' + gKey + '\", which is not allowed by the schema');\n          }                                                                                                            // 316\n          return; // no reason to do more                                                                              // 317\n        }                                                                                                              // 318\n        if (val !== void 0) {                                                                                          // 319\n          // Autoconvert values if requested and if possible                                                           // 320\n          var wasAutoConverted = false;                                                                                // 321\n          if (options.autoConvert && def) {                                                                            // 322\n            var newVal = typeconvert(val, def.type);                                                                   // 323\n            if (newVal !== void 0 && newVal !== val) {                                                                 // 324\n              // remove empty strings                                                                                  // 325\n              if (options.removeEmptyStrings && (!this.operator || this.operator === \"$set\") && typeof newVal === \"string\" && !newVal.length) {\n                // For a document, we remove any fields that are being set to an empty string                          // 327\n                newVal = void 0;                                                                                       // 328\n                // For a modifier, we $unset any fields that are being set to an empty string                          // 329\n                if (this.operator === \"$set\") {                                                                        // 330\n                  var p = this.position.replace(\"$set\", \"$unset\");                                                     // 331\n                  mDoc.setValueForPosition(p, \"\");                                                                     // 332\n                }                                                                                                      // 333\n              }                                                                                                        // 334\n              // trim strings                                                                                          // 335\n              else if (options.trimStrings && typeof newVal === \"string\") {                                            // 336\n                newVal = S(newVal).trim().s;                                                                           // 337\n              }                                                                                                        // 338\n                                                                                                                       // 339\n              // Change value; if undefined, will remove it                                                            // 340\n              SimpleSchema.debug && console.info('SimpleSchema.clean: autoconverted value ' + val + ' from ' + typeof val + ' to ' + typeof newVal + ' for ' + gKey);\n              this.updateValue(newVal);                                                                                // 342\n              wasAutoConverted = true;                                                                                 // 343\n            }                                                                                                          // 344\n          }                                                                                                            // 345\n          if (!wasAutoConverted) {                                                                                     // 346\n            // remove empty strings                                                                                    // 347\n            if (options.removeEmptyStrings && (!this.operator || this.operator === \"$set\") && typeof val === \"string\" && !val.length) {\n              // For a document, we remove any fields that are being set to an empty string                            // 349\n              this.remove();                                                                                           // 350\n              // For a modifier, we $unset any fields that are being set to an empty string                            // 351\n              if (this.operator === \"$set\") {                                                                          // 352\n                var p = this.position.replace(\"$set\", \"$unset\");                                                       // 353\n                mDoc.setValueForPosition(p, \"\");                                                                       // 354\n              }                                                                                                        // 355\n            }                                                                                                          // 356\n            // trim strings                                                                                            // 357\n            else if (options.trimStrings && typeof val === \"string\" && (!def || (def && def.trim !== false))) {        // 358\n              this.updateValue(S(val).trim().s);                                                                       // 359\n            }                                                                                                          // 360\n          }                                                                                                            // 361\n        }                                                                                                              // 362\n      }                                                                                                                // 363\n    }, {endPointsOnly: false});                                                                                        // 364\n  }                                                                                                                    // 365\n                                                                                                                       // 366\n  // Set automatic values                                                                                              // 367\n  options.getAutoValues && getAutoValues.call(self, mDoc, options.isModifier, options.extendAutoValueContext);         // 368\n                                                                                                                       // 369\n  return doc;                                                                                                          // 370\n};                                                                                                                     // 371\n                                                                                                                       // 372\n// Returns the entire schema object or just the definition for one key                                                 // 373\n// in the schema.                                                                                                      // 374\nSimpleSchema.prototype.schema = function(key) {                                                                        // 375\n  var self = this;                                                                                                     // 376\n  // if not null or undefined (more specific)                                                                          // 377\n  if (key != null) {                                                                                                   // 378\n    return self._schema[SimpleSchema._makeGeneric(key)];                                                               // 379\n  } else {                                                                                                             // 380\n    return self._schema;                                                                                               // 381\n  }                                                                                                                    // 382\n};                                                                                                                     // 383\n                                                                                                                       // 384\n// Returns the evaluated definition for one key in the schema                                                          // 385\n// key = non-generic key                                                                                               // 386\n// [propList] = props to include in the result, for performance                                                        // 387\n// [functionContext] = used for evaluating schema options that are functions                                           // 388\nSimpleSchema.prototype.getDefinition = function(key, propList, functionContext) {                                      // 389\n  var self = this;                                                                                                     // 390\n  var defs = self.schema(key);                                                                                         // 391\n  if (!defs)                                                                                                           // 392\n    return;                                                                                                            // 393\n                                                                                                                       // 394\n  if (_.isArray(propList)) {                                                                                           // 395\n    defs = _.pick(defs, propList);                                                                                     // 396\n  } else {                                                                                                             // 397\n    defs = _.clone(defs);                                                                                              // 398\n  }                                                                                                                    // 399\n                                                                                                                       // 400\n  // For any options that support specifying a function,                                                               // 401\n  // evaluate the functions.                                                                                           // 402\n  _.each(['min', 'max', 'minCount', 'maxCount', 'allowedValues', 'optional', 'label'], function (prop) {               // 403\n    if (_.isFunction(defs[prop])) {                                                                                    // 404\n      defs[prop] = defs[prop].call(functionContext || {});                                                             // 405\n    }                                                                                                                  // 406\n  });                                                                                                                  // 407\n                                                                                                                       // 408\n  // Inflect label if not defined                                                                                      // 409\n  defs[\"label\"] = defs[\"label\"] || inflectedLabel(key);                                                                // 410\n                                                                                                                       // 411\n  return defs;                                                                                                         // 412\n};                                                                                                                     // 413\n                                                                                                                       // 414\n// Check if the key is a nested dot-syntax key inside of a blackbox object                                             // 415\nSimpleSchema.prototype.keyIsInBlackBox = function(key) {                                                               // 416\n  var self = this;                                                                                                     // 417\n  var parentPath = SimpleSchema._makeGeneric(key), lastDot, def;                                                       // 418\n                                                                                                                       // 419\n  // Iterate the dot-syntax hierarchy until we find a key in our schema                                                // 420\n  do {                                                                                                                 // 421\n    lastDot = parentPath.lastIndexOf('.');                                                                             // 422\n    if (lastDot !== -1) {                                                                                              // 423\n      parentPath = parentPath.slice(0, lastDot); // Remove last path component                                         // 424\n      def = self.getDefinition(parentPath);                                                                            // 425\n    }                                                                                                                  // 426\n  } while (lastDot !== -1 && !def);                                                                                    // 427\n                                                                                                                       // 428\n  return !!(def && def.blackbox);                                                                                      // 429\n};                                                                                                                     // 430\n                                                                                                                       // 431\n// Use to dynamically change the schema labels.                                                                        // 432\nSimpleSchema.prototype.labels = function(labels) {                                                                     // 433\n  var self = this;                                                                                                     // 434\n  _.each(labels, function(label, fieldName) {                                                                          // 435\n    if (!_.isString(label) && !_.isFunction(label))                                                                    // 436\n      return;                                                                                                          // 437\n                                                                                                                       // 438\n    if (!(fieldName in self._schema))                                                                                  // 439\n      return;                                                                                                          // 440\n                                                                                                                       // 441\n    self._schema[fieldName].label = label;                                                                             // 442\n    self._depsLabels[fieldName] && self._depsLabels[fieldName].changed();                                              // 443\n  });                                                                                                                  // 444\n};                                                                                                                     // 445\n                                                                                                                       // 446\n// should be used to safely get a label as string                                                                      // 447\nSimpleSchema.prototype.label = function(key) {                                                                         // 448\n  var self = this;                                                                                                     // 449\n                                                                                                                       // 450\n  // Get all labels                                                                                                    // 451\n  if (key == null) {                                                                                                   // 452\n    var result = {};                                                                                                   // 453\n    _.each(self.schema(), function(def, fieldName) {                                                                   // 454\n      result[fieldName] = self.label(fieldName);                                                                       // 455\n    });                                                                                                                // 456\n    return result;                                                                                                     // 457\n  }                                                                                                                    // 458\n                                                                                                                       // 459\n  // Get label for one field                                                                                           // 460\n  var def = self.getDefinition(key);                                                                                   // 461\n  if (def) {                                                                                                           // 462\n    var genericKey = SimpleSchema._makeGeneric(key);                                                                   // 463\n    self._depsLabels[genericKey] && self._depsLabels[genericKey].depend();                                             // 464\n    return def.label;                                                                                                  // 465\n  }                                                                                                                    // 466\n                                                                                                                       // 467\n  return null;                                                                                                         // 468\n};                                                                                                                     // 469\n                                                                                                                       // 470\n// Global messages                                                                                                     // 471\n                                                                                                                       // 472\nSimpleSchema._globalMessages = {                                                                                       // 473\n  required: \"[label] is required\",                                                                                     // 474\n  minString: \"[label] must be at least [min] characters\",                                                              // 475\n  maxString: \"[label] cannot exceed [max] characters\",                                                                 // 476\n  minNumber: \"[label] must be at least [min]\",                                                                         // 477\n  maxNumber: \"[label] cannot exceed [max]\",                                                                            // 478\n  minDate: \"[label] must be on or after [min]\",                                                                        // 479\n  maxDate: \"[label] cannot be after [max]\",                                                                            // 480\n  minCount: \"You must specify at least [minCount] values\",                                                             // 481\n  maxCount: \"You cannot specify more than [maxCount] values\",                                                          // 482\n  noDecimal: \"[label] must be an integer\",                                                                             // 483\n  notAllowed: \"[value] is not an allowed value\",                                                                       // 484\n  expectedString: \"[label] must be a string\",                                                                          // 485\n  expectedNumber: \"[label] must be a number\",                                                                          // 486\n  expectedBoolean: \"[label] must be a boolean\",                                                                        // 487\n  expectedArray: \"[label] must be an array\",                                                                           // 488\n  expectedObject: \"[label] must be an object\",                                                                         // 489\n  expectedConstructor: \"[label] must be a [type]\",                                                                     // 490\n  regEx: [                                                                                                             // 491\n    {msg: \"[label] failed regular expression validation\"},                                                             // 492\n    {exp: SimpleSchema.RegEx.Email, msg: \"[label] must be a valid e-mail address\"},                                    // 493\n    {exp: SimpleSchema.RegEx.WeakEmail, msg: \"[label] must be a valid e-mail address\"},                                // 494\n    {exp: SimpleSchema.RegEx.Domain, msg: \"[label] must be a valid domain\"},                                           // 495\n    {exp: SimpleSchema.RegEx.WeakDomain, msg: \"[label] must be a valid domain\"},                                       // 496\n    {exp: SimpleSchema.RegEx.IP, msg: \"[label] must be a valid IPv4 or IPv6 address\"},                                 // 497\n    {exp: SimpleSchema.RegEx.IPv4, msg: \"[label] must be a valid IPv4 address\"},                                       // 498\n    {exp: SimpleSchema.RegEx.IPv6, msg: \"[label] must be a valid IPv6 address\"},                                       // 499\n    {exp: SimpleSchema.RegEx.Url, msg: \"[label] must be a valid URL\"},                                                 // 500\n    {exp: SimpleSchema.RegEx.Id, msg: \"[label] must be a valid alphanumeric ID\"}                                       // 501\n  ],                                                                                                                   // 502\n  keyNotInSchema: \"[label] is not allowed by the schema\"                                                               // 503\n};                                                                                                                     // 504\n                                                                                                                       // 505\nSimpleSchema.messages = function(messages) {                                                                           // 506\n  _.extend(SimpleSchema._globalMessages, messages);                                                                    // 507\n  SimpleSchema._depsGlobalMessages.changed();                                                                          // 508\n};                                                                                                                     // 509\n                                                                                                                       // 510\n// Schema-specific messages                                                                                            // 511\n                                                                                                                       // 512\nSimpleSchema.prototype.messages = function(messages) {                                                                 // 513\n  var self = this;                                                                                                     // 514\n  _.extend(self._messages, messages);                                                                                  // 515\n  self._depsMessages.changed();                                                                                        // 516\n};                                                                                                                     // 517\n                                                                                                                       // 518\n// Returns a string message for the given error type and key. Uses the                                                 // 519\n// def and value arguments to fill in placeholders in the error messages.                                              // 520\nSimpleSchema.prototype.messageForError = function(type, key, def, value) {                                             // 521\n  var self = this;                                                                                                     // 522\n                                                                                                                       // 523\n  // We proceed even if we can't get a definition because it might be a keyNotInSchema error                           // 524\n  def = def || self.getDefinition(key, ['regEx', 'label', 'minCount', 'maxCount', 'min', 'max', 'type']) || {};        // 525\n                                                                                                                       // 526\n  // Adjust for complex types, currently only regEx,                                                                   // 527\n  // where we might have regEx.1 meaning the second                                                                    // 528\n  // expression in the array.                                                                                          // 529\n  var firstTypePeriod = type.indexOf(\".\"), index = null;                                                               // 530\n  if (firstTypePeriod !== -1) {                                                                                        // 531\n    index = type.substring(firstTypePeriod + 1);                                                                       // 532\n    index = parseInt(index, 10);                                                                                       // 533\n    type = type.substring(0, firstTypePeriod);                                                                         // 534\n  }                                                                                                                    // 535\n                                                                                                                       // 536\n  // Which regExp is it?                                                                                               // 537\n  var regExpMatch;                                                                                                     // 538\n  if (type === \"regEx\") {                                                                                              // 539\n    if (index != null && !isNaN(index)) {                                                                              // 540\n      regExpMatch = def.regEx[index];                                                                                  // 541\n    } else {                                                                                                           // 542\n      regExpMatch = def.regEx;                                                                                         // 543\n    }                                                                                                                  // 544\n    if (regExpMatch) {                                                                                                 // 545\n      regExpMatch = regExpMatch.toString();                                                                            // 546\n    }                                                                                                                  // 547\n  }                                                                                                                    // 548\n                                                                                                                       // 549\n  // Prep some strings to be used when finding the correct message for this error                                      // 550\n  var typePlusKey = type + \" \" + key;                                                                                  // 551\n  var genericKey = SimpleSchema._makeGeneric(key);                                                                     // 552\n  var typePlusGenKey = type + \" \" + genericKey;                                                                        // 553\n                                                                                                                       // 554\n  // reactively update when message templates or labels are changed                                                    // 555\n  SimpleSchema._depsGlobalMessages.depend();                                                                           // 556\n  self._depsMessages.depend();                                                                                         // 557\n  self._depsLabels[key] && self._depsLabels[key].depend();                                                             // 558\n                                                                                                                       // 559\n  // Prep a function that finds the correct message for regEx errors                                                   // 560\n  function findRegExError(message) {                                                                                   // 561\n    if (type !== \"regEx\" || !_.isArray(message)) {                                                                     // 562\n      return message;                                                                                                  // 563\n    }                                                                                                                  // 564\n    // Parse regEx messages, which are provided in a special object array format                                       // 565\n    // [{exp: RegExp, msg: \"Foo\"}]                                                                                     // 566\n    // Where `exp` is optional                                                                                         // 567\n                                                                                                                       // 568\n    var msgObj;                                                                                                        // 569\n    // First see if there's one where exp matches this expression                                                      // 570\n    if (regExpMatch) {                                                                                                 // 571\n      msgObj = _.find(message, function (o) {                                                                          // 572\n        return o.exp && o.exp.toString() === regExpMatch;                                                              // 573\n      });                                                                                                              // 574\n    }                                                                                                                  // 575\n                                                                                                                       // 576\n    // If not, see if there's a default message defined                                                                // 577\n    if (!msgObj) {                                                                                                     // 578\n      msgObj = _.findWhere(message, {exp: null});                                                                      // 579\n      if (!msgObj) {                                                                                                   // 580\n        msgObj = _.findWhere(message, {exp: void 0});                                                                  // 581\n      }                                                                                                                // 582\n    }                                                                                                                  // 583\n                                                                                                                       // 584\n    return msgObj ? msgObj.msg : null;                                                                                 // 585\n  }                                                                                                                    // 586\n                                                                                                                       // 587\n  // Try finding the correct message to use at various levels, from most                                               // 588\n  // specific to least specific.                                                                                       // 589\n  var message = self._messages[typePlusKey] ||                  // (1) Use schema-specific message for specific key    // 590\n                self._messages[typePlusGenKey] ||               // (2) Use schema-specific message for generic key     // 591\n                self._messages[type];                           // (3) Use schema-specific message for type            // 592\n  message = findRegExError(message);                                                                                   // 593\n                                                                                                                       // 594\n  if (!message) {                                                                                                      // 595\n    message = SimpleSchema._globalMessages[typePlusKey] ||      // (4) Use global message for specific key             // 596\n              SimpleSchema._globalMessages[typePlusGenKey] ||   // (5) Use global message for generic key              // 597\n              SimpleSchema._globalMessages[type];               // (6) Use global message for type                     // 598\n    message = findRegExError(message);                                                                                 // 599\n  }                                                                                                                    // 600\n                                                                                                                       // 601\n  if (!message) {                                                                                                      // 602\n    return \"Unknown validation error\";                                                                                 // 603\n  }                                                                                                                    // 604\n                                                                                                                       // 605\n  // Now replace all placeholders in the message with the correct values                                               // 606\n                                                                                                                       // 607\n  // [label]                                                                                                           // 608\n  self._depsLabels[key] && self._depsLabels[key].depend(); // React to label changes                                   // 609\n  message = message.replace(\"[label]\", def.label);                                                                     // 610\n                                                                                                                       // 611\n  // [minCount]                                                                                                        // 612\n  if (typeof def.minCount !== \"undefined\") {                                                                           // 613\n    message = message.replace(\"[minCount]\", def.minCount);                                                             // 614\n  }                                                                                                                    // 615\n                                                                                                                       // 616\n  // [maxCount]                                                                                                        // 617\n  if (typeof def.maxCount !== \"undefined\") {                                                                           // 618\n    message = message.replace(\"[maxCount]\", def.maxCount);                                                             // 619\n  }                                                                                                                    // 620\n                                                                                                                       // 621\n  // [value]                                                                                                           // 622\n  if (value !== void 0 && value !== null) {                                                                            // 623\n    message = message.replace(\"[value]\", value.toString());                                                            // 624\n  } else {                                                                                                             // 625\n    message = message.replace(\"[value]\", 'null');                                                                      // 626\n  }                                                                                                                    // 627\n                                                                                                                       // 628\n  // [min] and [max]                                                                                                   // 629\n  var min = def.min;                                                                                                   // 630\n  var max = def.max;                                                                                                   // 631\n  if (def.type === Date || def.type === [Date]) {                                                                      // 632\n    if (typeof min !== \"undefined\") {                                                                                  // 633\n      message = message.replace(\"[min]\", Utility.dateToDateString(min));                                               // 634\n    }                                                                                                                  // 635\n    if (typeof max !== \"undefined\") {                                                                                  // 636\n      message = message.replace(\"[max]\", Utility.dateToDateString(max));                                               // 637\n    }                                                                                                                  // 638\n  } else {                                                                                                             // 639\n    if (typeof min !== \"undefined\") {                                                                                  // 640\n      message = message.replace(\"[min]\", min);                                                                         // 641\n    }                                                                                                                  // 642\n    if (typeof max !== \"undefined\") {                                                                                  // 643\n      message = message.replace(\"[max]\", max);                                                                         // 644\n    }                                                                                                                  // 645\n  }                                                                                                                    // 646\n                                                                                                                       // 647\n  // [type]                                                                                                            // 648\n  if (def.type instanceof Function) {                                                                                  // 649\n    message = message.replace(\"[type]\", def.type.name);                                                                // 650\n  }                                                                                                                    // 651\n                                                                                                                       // 652\n  // Now return the message                                                                                            // 653\n  return message;                                                                                                      // 654\n};                                                                                                                     // 655\n                                                                                                                       // 656\n// Returns true if key is explicitly allowed by the schema or implied                                                  // 657\n// by other explicitly allowed keys.                                                                                   // 658\n// The key string should have $ in place of any numeric array positions.                                               // 659\nSimpleSchema.prototype.allowsKey = function(key) {                                                                     // 660\n  var self = this;                                                                                                     // 661\n                                                                                                                       // 662\n  // Loop through all keys in the schema                                                                               // 663\n  return _.any(self._schemaKeys, function(schemaKey) {                                                                 // 664\n                                                                                                                       // 665\n    // If the schema key is the test key, it's allowed.                                                                // 666\n    if (schemaKey === key) {                                                                                           // 667\n      return true;                                                                                                     // 668\n    }                                                                                                                  // 669\n                                                                                                                       // 670\n    // Black box handling                                                                                              // 671\n    if (self.schema(schemaKey).blackbox === true) {                                                                    // 672\n      var kl = schemaKey.length;                                                                                       // 673\n      var compare1 = key.slice(0, kl + 2);                                                                             // 674\n      var compare2 = compare1.slice(0, -1);                                                                            // 675\n                                                                                                                       // 676\n      // If the test key is the black box key + \".$\", then the test                                                    // 677\n      // key is NOT allowed because black box keys are by definition                                                   // 678\n      // only for objects, and not for arrays.                                                                         // 679\n      if (compare1 === schemaKey + '.$')                                                                               // 680\n        return false;                                                                                                  // 681\n                                                                                                                       // 682\n      // Otherwise                                                                                                     // 683\n      if (compare2 === schemaKey + '.')                                                                                // 684\n        return true;                                                                                                   // 685\n    }                                                                                                                  // 686\n                                                                                                                       // 687\n    return false;                                                                                                      // 688\n  });                                                                                                                  // 689\n};                                                                                                                     // 690\n                                                                                                                       // 691\nSimpleSchema.prototype.newContext = function() {                                                                       // 692\n  return new SimpleSchemaValidationContext(this);                                                                      // 693\n};                                                                                                                     // 694\n                                                                                                                       // 695\n// Returns all the child keys for the object identified by the generic prefix,                                         // 696\n// or all the top level keys if no prefix is supplied.                                                                 // 697\nSimpleSchema.prototype.objectKeys = function(keyPrefix) {                                                              // 698\n  var self = this;                                                                                                     // 699\n  if (!keyPrefix) {                                                                                                    // 700\n    return self._firstLevelSchemaKeys;                                                                                 // 701\n  }                                                                                                                    // 702\n  return self._objectKeys[keyPrefix + \".\"] || [];                                                                      // 703\n};                                                                                                                     // 704\n                                                                                                                       // 705\n/*                                                                                                                     // 706\n * PRIVATE FUNCTIONS                                                                                                   // 707\n */                                                                                                                    // 708\n                                                                                                                       // 709\n//called by clean()                                                                                                    // 710\nvar typeconvert = function(value, type) {                                                                              // 711\n  if (_.isArray(value) || (_.isObject(value) && !(value instanceof Date)))                                             // 712\n    return value; //can't and shouldn't convert arrays or objects                                                      // 713\n  if (type === String) {                                                                                               // 714\n    if (typeof value !== \"undefined\" && value !== null && typeof value !== \"string\") {                                 // 715\n      return value.toString();                                                                                         // 716\n    }                                                                                                                  // 717\n    return value;                                                                                                      // 718\n  }                                                                                                                    // 719\n  if (type === Number) {                                                                                               // 720\n    if (typeof value === \"string\" && !S(value).isEmpty()) {                                                            // 721\n      //try to convert numeric strings to numbers                                                                      // 722\n      var numberVal = Number(value);                                                                                   // 723\n      if (!isNaN(numberVal)) {                                                                                         // 724\n        return numberVal;                                                                                              // 725\n      } else {                                                                                                         // 726\n        return value; //leave string; will fail validation                                                             // 727\n      }                                                                                                                // 728\n    }                                                                                                                  // 729\n    return value;                                                                                                      // 730\n  }                                                                                                                    // 731\n  return value;                                                                                                        // 732\n};                                                                                                                     // 733\n                                                                                                                       // 734\nvar mergeSchemas = function(schemas) {                                                                                 // 735\n                                                                                                                       // 736\n  // Merge all provided schema definitions.                                                                            // 737\n  // This is effectively a shallow clone of each object, too,                                                          // 738\n  // which is what we want since we are going to manipulate it.                                                        // 739\n  var mergedSchema = {};                                                                                               // 740\n  _.each(schemas, function(schema) {                                                                                   // 741\n                                                                                                                       // 742\n    // Create a temporary SS instance so that the internal object                                                      // 743\n    // we use for merging/extending will be fully expanded                                                             // 744\n    if (Match.test(schema, SimpleSchema)) {                                                                            // 745\n      schema = schema._schema;                                                                                         // 746\n    } else {                                                                                                           // 747\n      schema = addImplicitKeys(expandSchema(schema));                                                                  // 748\n    }                                                                                                                  // 749\n                                                                                                                       // 750\n    // Loop through and extend each individual field                                                                   // 751\n    // definition. That way you can extend and overwrite                                                               // 752\n    // base field definitions.                                                                                         // 753\n    _.each(schema, function(def, field) {                                                                              // 754\n      mergedSchema[field] = mergedSchema[field] || {};                                                                 // 755\n      _.extend(mergedSchema[field], def);                                                                              // 756\n    });                                                                                                                // 757\n                                                                                                                       // 758\n  });                                                                                                                  // 759\n                                                                                                                       // 760\n  // If we merged some schemas, do this again to make sure                                                             // 761\n  // extended definitions are pushed into array item field                                                             // 762\n  // definitions properly.                                                                                             // 763\n  schemas.length && adjustArrayFields(mergedSchema);                                                                   // 764\n                                                                                                                       // 765\n  return mergedSchema;                                                                                                 // 766\n};                                                                                                                     // 767\n                                                                                                                       // 768\nvar expandSchema = function(schema) {                                                                                  // 769\n  // Flatten schema by inserting nested definitions                                                                    // 770\n  _.each(schema, function(val, key) {                                                                                  // 771\n    var dot, type;                                                                                                     // 772\n    if (!val)                                                                                                          // 773\n      return;                                                                                                          // 774\n    if (Match.test(val.type, SimpleSchema)) {                                                                          // 775\n      dot = '.';                                                                                                       // 776\n      type = val.type;                                                                                                 // 777\n      val.type = Object;                                                                                               // 778\n    } else if (Match.test(val.type, [SimpleSchema])) {                                                                 // 779\n      dot = '.$.';                                                                                                     // 780\n      type = val.type[0];                                                                                              // 781\n      val.type = [Object];                                                                                             // 782\n    } else {                                                                                                           // 783\n      return;                                                                                                          // 784\n    }                                                                                                                  // 785\n    //add child schema definitions to parent schema                                                                    // 786\n    _.each(type._schema, function(subVal, subKey) {                                                                    // 787\n      var newKey = key + dot + subKey;                                                                                 // 788\n      if (!(newKey in schema))                                                                                         // 789\n        schema[newKey] = subVal;                                                                                       // 790\n    });                                                                                                                // 791\n  });                                                                                                                  // 792\n  return schema;                                                                                                       // 793\n};                                                                                                                     // 794\n                                                                                                                       // 795\nvar adjustArrayFields = function(schema) {                                                                             // 796\n  _.each(schema, function(def, existingKey) {                                                                          // 797\n    if (_.isArray(def.type) || def.type === Array) {                                                                   // 798\n      // Copy some options to array-item definition                                                                    // 799\n      var itemKey = existingKey + \".$\";                                                                                // 800\n      if (!(itemKey in schema)) {                                                                                      // 801\n        schema[itemKey] = {};                                                                                          // 802\n      }                                                                                                                // 803\n      if (_.isArray(def.type)) {                                                                                       // 804\n        schema[itemKey].type = def.type[0];                                                                            // 805\n      }                                                                                                                // 806\n      if (def.label) {                                                                                                 // 807\n        schema[itemKey].label = def.label;                                                                             // 808\n      }                                                                                                                // 809\n      schema[itemKey].optional = true;                                                                                 // 810\n      if (typeof def.min !== \"undefined\") {                                                                            // 811\n        schema[itemKey].min = def.min;                                                                                 // 812\n      }                                                                                                                // 813\n      if (typeof def.max !== \"undefined\") {                                                                            // 814\n        schema[itemKey].max = def.max;                                                                                 // 815\n      }                                                                                                                // 816\n      if (typeof def.allowedValues !== \"undefined\") {                                                                  // 817\n        schema[itemKey].allowedValues = def.allowedValues;                                                             // 818\n      }                                                                                                                // 819\n      if (typeof def.decimal !== \"undefined\") {                                                                        // 820\n        schema[itemKey].decimal = def.decimal;                                                                         // 821\n      }                                                                                                                // 822\n      if (typeof def.regEx !== \"undefined\") {                                                                          // 823\n        schema[itemKey].regEx = def.regEx;                                                                             // 824\n      }                                                                                                                // 825\n      if (typeof def.blackbox !== \"undefined\") {                                                                       // 826\n        schema[itemKey].blackbox = def.blackbox;                                                                       // 827\n      }                                                                                                                // 828\n      // Remove copied options and adjust type                                                                         // 829\n      def.type = Array;                                                                                                // 830\n      _.each(['min', 'max', 'allowedValues', 'decimal', 'regEx', 'blackbox'], function(k) {                            // 831\n        Utility.deleteIfPresent(def, k);                                                                               // 832\n      });                                                                                                              // 833\n    }                                                                                                                  // 834\n  });                                                                                                                  // 835\n};                                                                                                                     // 836\n                                                                                                                       // 837\n/**                                                                                                                    // 838\n * Adds implied keys.                                                                                                  // 839\n * * If schema contains a key like \"foo.$.bar\" but not \"foo\", adds \"foo\".                                              // 840\n * * If schema contains a key like \"foo\" with an array type, adds \"foo.$\".                                             // 841\n * @param {Object} schema                                                                                              // 842\n * @returns {Object} modified schema                                                                                   // 843\n */                                                                                                                    // 844\nvar addImplicitKeys = function(schema) {                                                                               // 845\n  var arrayKeysToAdd = [], objectKeysToAdd = [], newKey, key;                                                          // 846\n                                                                                                                       // 847\n  // Pass 1 (objects)                                                                                                  // 848\n  _.each(schema, function(def, existingKey) {                                                                          // 849\n    var pos = existingKey.indexOf(\".\");                                                                                // 850\n    while (pos !== -1) {                                                                                               // 851\n      newKey = existingKey.substring(0, pos);                                                                          // 852\n                                                                                                                       // 853\n      // It's an array item; nothing to add                                                                            // 854\n      if (newKey.substring(newKey.length - 2) === \".$\") {                                                              // 855\n        pos = -1;                                                                                                      // 856\n      }                                                                                                                // 857\n      // It's an array of objects; add it with type [Object] if not already in the schema                              // 858\n      else if (existingKey.substring(pos, pos + 3) === \".$.\") {                                                        // 859\n        arrayKeysToAdd.push(newKey); // add later, since we are iterating over schema right now                        // 860\n        pos = existingKey.indexOf(\".\", pos + 3); // skip over next dot, find the one after                             // 861\n      }                                                                                                                // 862\n      // It's an object; add it with type Object if not already in the schema                                          // 863\n      else {                                                                                                           // 864\n        objectKeysToAdd.push(newKey); // add later, since we are iterating over schema right now                       // 865\n        pos = existingKey.indexOf(\".\", pos + 1); // find next dot                                                      // 866\n      }                                                                                                                // 867\n    }                                                                                                                  // 868\n  });                                                                                                                  // 869\n                                                                                                                       // 870\n  for (var i = 0, ln = arrayKeysToAdd.length; i < ln; i++) {                                                           // 871\n    key = arrayKeysToAdd[i];                                                                                           // 872\n    if (!(key in schema)) {                                                                                            // 873\n      schema[key] = {type: [Object], optional: true};                                                                  // 874\n    }                                                                                                                  // 875\n  }                                                                                                                    // 876\n                                                                                                                       // 877\n  for (var i = 0, ln = objectKeysToAdd.length; i < ln; i++) {                                                          // 878\n    key = objectKeysToAdd[i];                                                                                          // 879\n    if (!(key in schema)) {                                                                                            // 880\n      schema[key] = {type: Object, optional: true};                                                                    // 881\n    }                                                                                                                  // 882\n  }                                                                                                                    // 883\n                                                                                                                       // 884\n  // Pass 2 (arrays)                                                                                                   // 885\n  adjustArrayFields(schema);                                                                                           // 886\n                                                                                                                       // 887\n  return schema;                                                                                                       // 888\n};                                                                                                                     // 889\n                                                                                                                       // 890\n// Returns an object relating the keys in the list                                                                     // 891\n// to their parent object.                                                                                             // 892\nvar getObjectKeys = function(schema, schemaKeyList) {                                                                  // 893\n  var keyPrefix, remainingText, rKeys = {}, loopArray;                                                                 // 894\n  _.each(schema, function(definition, fieldName) {                                                                     // 895\n    if (definition.type === Object) {                                                                                  // 896\n      //object                                                                                                         // 897\n      keyPrefix = fieldName + \".\";                                                                                     // 898\n    } else {                                                                                                           // 899\n      return;                                                                                                          // 900\n    }                                                                                                                  // 901\n                                                                                                                       // 902\n    loopArray = [];                                                                                                    // 903\n    _.each(schemaKeyList, function(fieldName2) {                                                                       // 904\n      if (S(fieldName2).startsWith(keyPrefix)) {                                                                       // 905\n        remainingText = fieldName2.substring(keyPrefix.length);                                                        // 906\n        if (remainingText.indexOf(\".\") === -1) {                                                                       // 907\n          loopArray.push(remainingText);                                                                               // 908\n        }                                                                                                              // 909\n      }                                                                                                                // 910\n    });                                                                                                                // 911\n    rKeys[keyPrefix] = loopArray;                                                                                      // 912\n  });                                                                                                                  // 913\n  return rKeys;                                                                                                        // 914\n};                                                                                                                     // 915\n                                                                                                                       // 916\n// returns an inflected version of fieldName to use as the label                                                       // 917\nvar inflectedLabel = function(fieldName) {                                                                             // 918\n  var label = fieldName, lastPeriod = label.lastIndexOf(\".\");                                                          // 919\n  if (lastPeriod !== -1) {                                                                                             // 920\n    label = label.substring(lastPeriod + 1);                                                                           // 921\n    if (label === \"$\") {                                                                                               // 922\n      var pcs = fieldName.split(\".\");                                                                                  // 923\n      label = pcs[pcs.length - 2];                                                                                     // 924\n    }                                                                                                                  // 925\n  }                                                                                                                    // 926\n  if (label === \"_id\")                                                                                                 // 927\n    return \"ID\";                                                                                                       // 928\n  return S(label).humanize().s;                                                                                        // 929\n};                                                                                                                     // 930\n                                                                                                                       // 931\n/**                                                                                                                    // 932\n * @method getAutoValues                                                                                               // 933\n * @private                                                                                                            // 934\n * @param {MongoObject} mDoc                                                                                           // 935\n * @param {Boolean} [isModifier=false] - Is it a modifier doc?                                                         // 936\n * @param {Object} [extendedAutoValueContext] - Object that will be added to the context when calling each autoValue function\n * @returns {undefined}                                                                                                // 938\n *                                                                                                                     // 939\n * Updates doc with automatic values from autoValue functions or default                                               // 940\n * values from defaultValue. Modifies the referenced object in place.                                                  // 941\n */                                                                                                                    // 942\nfunction getAutoValues(mDoc, isModifier, extendedAutoValueContext) {                                                   // 943\n  var self = this;                                                                                                     // 944\n  var doneKeys = [];                                                                                                   // 945\n                                                                                                                       // 946\n  //on the client we can add the userId if not already in the custom context                                           // 947\n  if (Meteor.isClient && extendedAutoValueContext.userId === void 0) {                                                 // 948\n    extendedAutoValueContext.userId = (Meteor.userId && Meteor.userId()) || null;                                      // 949\n  }                                                                                                                    // 950\n                                                                                                                       // 951\n  function runAV(func) {                                                                                               // 952\n    var affectedKey = this.key;                                                                                        // 953\n    // If already called for this key, skip it                                                                         // 954\n    if (_.contains(doneKeys, affectedKey))                                                                             // 955\n      return;                                                                                                          // 956\n    var lastDot = affectedKey.lastIndexOf('.');                                                                        // 957\n    var fieldParentName = lastDot === -1 ? '' : affectedKey.slice(0, lastDot + 1);                                     // 958\n    var doUnset = false;                                                                                               // 959\n    var autoValue = func.call(_.extend({                                                                               // 960\n      isSet: (this.value !== void 0),                                                                                  // 961\n      unset: function() {                                                                                              // 962\n        doUnset = true;                                                                                                // 963\n      },                                                                                                               // 964\n      value: this.value,                                                                                               // 965\n      operator: this.operator,                                                                                         // 966\n      field: function(fName) {                                                                                         // 967\n        var keyInfo = mDoc.getInfoForKey(fName) || {};                                                                 // 968\n        return {                                                                                                       // 969\n          isSet: (keyInfo.value !== void 0),                                                                           // 970\n          value: keyInfo.value,                                                                                        // 971\n          operator: keyInfo.operator || null                                                                           // 972\n        };                                                                                                             // 973\n      },                                                                                                               // 974\n      siblingField: function(fName) {                                                                                  // 975\n        var keyInfo = mDoc.getInfoForKey(fieldParentName + fName) || {};                                               // 976\n        return {                                                                                                       // 977\n          isSet: (keyInfo.value !== void 0),                                                                           // 978\n          value: keyInfo.value,                                                                                        // 979\n          operator: keyInfo.operator || null                                                                           // 980\n        };                                                                                                             // 981\n      }                                                                                                                // 982\n    }, extendedAutoValueContext || {}), mDoc.getObject());                                                             // 983\n                                                                                                                       // 984\n    // Update tracking of which keys we've run autovalue for                                                           // 985\n    doneKeys.push(affectedKey);                                                                                        // 986\n                                                                                                                       // 987\n    if (autoValue === void 0) {                                                                                        // 988\n      if (doUnset) {                                                                                                   // 989\n        mDoc.removeValueForPosition(this.position);                                                                    // 990\n      }                                                                                                                // 991\n      return;                                                                                                          // 992\n    }                                                                                                                  // 993\n                                                                                                                       // 994\n    // If the user's auto value is of the pseudo-modifier format, parse it                                             // 995\n    // into operator and value.                                                                                        // 996\n    var op, newValue;                                                                                                  // 997\n    if (_.isObject(autoValue)) {                                                                                       // 998\n      for (var key in autoValue) {                                                                                     // 999\n        if (autoValue.hasOwnProperty(key) && key.substring(0, 1) === \"$\") {                                            // 1000\n          op = key;                                                                                                    // 1001\n          newValue = autoValue[key];                                                                                   // 1002\n          break;                                                                                                       // 1003\n        }                                                                                                              // 1004\n      }                                                                                                                // 1005\n    }                                                                                                                  // 1006\n                                                                                                                       // 1007\n    // Add $set for updates and upserts if necessary                                                                   // 1008\n    if (!op && isModifier && this.position.slice(0, 1) !== '$') {                                                      // 1009\n      op = \"$set\";                                                                                                     // 1010\n      newValue = autoValue;                                                                                            // 1011\n    }                                                                                                                  // 1012\n                                                                                                                       // 1013\n    // Update/change value                                                                                             // 1014\n    if (op) {                                                                                                          // 1015\n      mDoc.removeValueForPosition(this.position);                                                                      // 1016\n      mDoc.setValueForPosition(op + '[' + affectedKey + ']', newValue);                                                // 1017\n    } else {                                                                                                           // 1018\n      mDoc.setValueForPosition(this.position, autoValue);                                                              // 1019\n    }                                                                                                                  // 1020\n  }                                                                                                                    // 1021\n                                                                                                                       // 1022\n  _.each(self._autoValues, function(func, fieldName) {                                                                 // 1023\n    var positionSuffix, key, keySuffix, positions;                                                                     // 1024\n                                                                                                                       // 1025\n    // If we're under an array, run autovalue for all the properties of                                                // 1026\n    // any objects that are present in the nearest ancestor array.                                                     // 1027\n    if (fieldName.indexOf(\"$\") !== -1) {                                                                               // 1028\n      var testField = fieldName.slice(0, fieldName.lastIndexOf(\"$\") + 1);                                              // 1029\n      keySuffix = fieldName.slice(testField.length + 1);                                                               // 1030\n      positionSuffix = MongoObject._keyToPosition(keySuffix, true);                                                    // 1031\n      keySuffix = '.' + keySuffix;                                                                                     // 1032\n      positions = mDoc.getPositionsForGenericKey(testField);                                                           // 1033\n    } else {                                                                                                           // 1034\n                                                                                                                       // 1035\n      // See if anything in the object affects this key                                                                // 1036\n      positions = mDoc.getPositionsForGenericKey(fieldName);                                                           // 1037\n                                                                                                                       // 1038\n      // Run autovalue for properties that are set in the object                                                       // 1039\n      if (positions.length) {                                                                                          // 1040\n        key = fieldName;                                                                                               // 1041\n        keySuffix = '';                                                                                                // 1042\n        positionSuffix = '';                                                                                           // 1043\n      }                                                                                                                // 1044\n                                                                                                                       // 1045\n      // Run autovalue for properties that are NOT set in the object                                                   // 1046\n      else {                                                                                                           // 1047\n        key = fieldName;                                                                                               // 1048\n        keySuffix = '';                                                                                                // 1049\n        positionSuffix = '';                                                                                           // 1050\n        if (isModifier) {                                                                                              // 1051\n          positions = [\"$set[\" + fieldName + \"]\"];                                                                     // 1052\n        } else {                                                                                                       // 1053\n          positions = [MongoObject._keyToPosition(fieldName)];                                                         // 1054\n        }                                                                                                              // 1055\n      }                                                                                                                // 1056\n                                                                                                                       // 1057\n    }                                                                                                                  // 1058\n                                                                                                                       // 1059\n    _.each(positions, function(position) {                                                                             // 1060\n      runAV.call({                                                                                                     // 1061\n        key: (key || MongoObject._positionToKey(position)) + keySuffix,                                                // 1062\n        value: mDoc.getValueForPosition(position + positionSuffix),                                                    // 1063\n        operator: Utility.extractOp(position),                                                                         // 1064\n        position: position + positionSuffix                                                                            // 1065\n      }, func);                                                                                                        // 1066\n    });                                                                                                                // 1067\n  });                                                                                                                  // 1068\n}                                                                                                                      // 1069\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:simple-schema/simple-schema-validation.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ndoValidation1 = function doValidation1(obj, isModifier, isUpsert, keyToValidate, ss, extendedCustomContext) {          // 1\n  // First do some basic checks of the object, and throw errors if necessary                                           // 2\n  if (!_.isObject(obj)) {                                                                                              // 3\n    throw new Error(\"The first argument of validate() or validateOne() must be an object\");                            // 4\n  }                                                                                                                    // 5\n                                                                                                                       // 6\n  if (!isModifier && Utility.looksLikeModifier(obj)) {                                                                 // 7\n    throw new Error(\"When the validation object contains mongo operators, you must set the modifier option to true\");  // 8\n  }                                                                                                                    // 9\n                                                                                                                       // 10\n  var invalidKeys = [];                                                                                                // 11\n  var mDoc; // for caching the MongoObject if necessary                                                                // 12\n                                                                                                                       // 13\n  // Validation function called for each affected key                                                                  // 14\n  function validate(val, affectedKey, affectedKeyGeneric, def, op, skipRequiredCheck, isInArrayItemObject, isInSubObject) {\n                                                                                                                       // 16\n    // Get the schema for this key, marking invalid if there isn't one.                                                // 17\n    if (!def) {                                                                                                        // 18\n      invalidKeys.push(Utility.errorObject(\"keyNotInSchema\", affectedKey, val, def, ss));                              // 19\n      return;                                                                                                          // 20\n    }                                                                                                                  // 21\n                                                                                                                       // 22\n    // Check for missing required values. The general logic is this:                                                   // 23\n    // * If the operator is $unset or $rename, it's invalid.                                                           // 24\n    // * If the value is null, it's invalid.                                                                           // 25\n    // * If the value is undefined and one of the following are true, it's invalid:                                    // 26\n    //     * We're validating a key of a sub-object.                                                                   // 27\n    //     * We're validating a key of an object that is an array item.                                                // 28\n    //     * We're validating a document (as opposed to a modifier).                                                   // 29\n    //     * We're validating a key under the $set operator in a modifier, and it's an upsert.                         // 30\n    if (!skipRequiredCheck && !def.optional) {                                                                         // 31\n      if (                                                                                                             // 32\n        val === null ||                                                                                                // 33\n        op === \"$unset\" ||                                                                                             // 34\n        op === \"$rename\" ||                                                                                            // 35\n        (val === void 0 && (isInArrayItemObject || isInSubObject || !op || op === \"$set\"))                             // 36\n        ) {                                                                                                            // 37\n        invalidKeys.push(Utility.errorObject(\"required\", affectedKey, null, def, ss));                                 // 38\n        return;                                                                                                        // 39\n      }                                                                                                                // 40\n    }                                                                                                                  // 41\n                                                                                                                       // 42\n    // For $rename, make sure that the new name is allowed by the schema                                               // 43\n    if (op === \"$rename\" && typeof val === \"string\" && !ss.allowsKey(val)) {                                           // 44\n      invalidKeys.push(Utility.errorObject(\"keyNotInSchema\", val, null, null, ss));                                    // 45\n      return;                                                                                                          // 46\n    }                                                                                                                  // 47\n                                                                                                                       // 48\n    // Value checks are not necessary for null or undefined values                                                     // 49\n    // or for $unset or $rename values                                                                                 // 50\n    if (op !== \"$unset\" && op !== \"$rename\" && Utility.isNotNullOrUndefined(val)) {                                    // 51\n                                                                                                                       // 52\n      // Check that value is of the correct type                                                                       // 53\n      var typeError = doTypeChecks(def, val, op);                                                                      // 54\n      if (typeError) {                                                                                                 // 55\n        invalidKeys.push(Utility.errorObject(typeError, affectedKey, val, def, ss));                                   // 56\n        return;                                                                                                        // 57\n      }                                                                                                                // 58\n                                                                                                                       // 59\n      // Check value against allowedValues array                                                                       // 60\n      if (def.allowedValues && !_.contains(def.allowedValues, val)) {                                                  // 61\n        invalidKeys.push(Utility.errorObject(\"notAllowed\", affectedKey, val, def, ss));                                // 62\n        return;                                                                                                        // 63\n      }                                                                                                                // 64\n                                                                                                                       // 65\n    }                                                                                                                  // 66\n                                                                                                                       // 67\n    // Perform custom validation                                                                                       // 68\n    var lastDot = affectedKey.lastIndexOf('.');                                                                        // 69\n    var fieldParentName = lastDot === -1 ? '' : affectedKey.slice(0, lastDot + 1);                                     // 70\n    var validators = def.custom ? [def.custom] : [];                                                                   // 71\n    validators = validators.concat(ss._validators).concat(SimpleSchema._validators);                                   // 72\n    _.every(validators, function(validator) {                                                                          // 73\n      var errorType = validator.call(_.extend({                                                                        // 74\n        key: affectedKey,                                                                                              // 75\n        genericKey: affectedKeyGeneric,                                                                                // 76\n        definition: def,                                                                                               // 77\n        isSet: (val !== void 0),                                                                                       // 78\n        value: val,                                                                                                    // 79\n        operator: op,                                                                                                  // 80\n        field: function(fName) {                                                                                       // 81\n          mDoc = mDoc || new MongoObject(obj, ss._blackboxKeys); //create if necessary, cache for speed                // 82\n          var keyInfo = mDoc.getInfoForKey(fName) || {};                                                               // 83\n          return {                                                                                                     // 84\n            isSet: (keyInfo.value !== void 0),                                                                         // 85\n            value: keyInfo.value,                                                                                      // 86\n            operator: keyInfo.operator                                                                                 // 87\n          };                                                                                                           // 88\n        },                                                                                                             // 89\n        siblingField: function(fName) {                                                                                // 90\n          mDoc = mDoc || new MongoObject(obj, ss._blackboxKeys); //create if necessary, cache for speed                // 91\n          var keyInfo = mDoc.getInfoForKey(fieldParentName + fName) || {};                                             // 92\n          return {                                                                                                     // 93\n            isSet: (keyInfo.value !== void 0),                                                                         // 94\n            value: keyInfo.value,                                                                                      // 95\n            operator: keyInfo.operator                                                                                 // 96\n          };                                                                                                           // 97\n        }                                                                                                              // 98\n      }, extendedCustomContext || {}));                                                                                // 99\n      if (typeof errorType === \"string\") {                                                                             // 100\n        invalidKeys.push(Utility.errorObject(errorType, affectedKey, val, def, ss));                                   // 101\n        return false;                                                                                                  // 102\n      }                                                                                                                // 103\n      return true;                                                                                                     // 104\n    });                                                                                                                // 105\n  }                                                                                                                    // 106\n                                                                                                                       // 107\n  // The recursive function                                                                                            // 108\n  function checkObj(val, affectedKey, operator, setKeys, isInArrayItemObject, isInSubObject) {                         // 109\n    var affectedKeyGeneric, def;                                                                                       // 110\n                                                                                                                       // 111\n    if (affectedKey) {                                                                                                 // 112\n      // When we hit a blackbox key, we don't progress any further                                                     // 113\n      if (ss.keyIsInBlackBox(affectedKey)) {                                                                           // 114\n        return;                                                                                                        // 115\n      }                                                                                                                // 116\n                                                                                                                       // 117\n      // Make a generic version of the affected key, and use that                                                      // 118\n      // to get the schema for this key.                                                                               // 119\n      affectedKeyGeneric = SimpleSchema._makeGeneric(affectedKey);                                                     // 120\n      def = ss.getDefinition(affectedKey);                                                                             // 121\n                                                                                                                       // 122\n      // Perform validation for this key                                                                               // 123\n      if (!keyToValidate || keyToValidate === affectedKey || keyToValidate === affectedKeyGeneric) {                   // 124\n        // We can skip the required check for keys that are ancestors                                                  // 125\n        // of those in $set or $setOnInsert because they will be created                                               // 126\n        // by MongoDB while setting.                                                                                   // 127\n        var skipRequiredCheck = _.some(setKeys, function(sk) {                                                         // 128\n          return (sk.slice(0, affectedKey.length + 1) === affectedKey + \".\");                                          // 129\n        });                                                                                                            // 130\n        validate(val, affectedKey, affectedKeyGeneric, def, operator, skipRequiredCheck, isInArrayItemObject, isInSubObject);\n      }                                                                                                                // 132\n    }                                                                                                                  // 133\n                                                                                                                       // 134\n    // Temporarily convert missing objects to empty objects                                                            // 135\n    // so that the looping code will be called and required                                                            // 136\n    // descendent keys can be validated.                                                                               // 137\n    if ((val === void 0 || val === null) && (!def || (def.type === Object && !def.optional))) {                        // 138\n      val = {};                                                                                                        // 139\n    }                                                                                                                  // 140\n                                                                                                                       // 141\n    // Loop through arrays                                                                                             // 142\n    if (_.isArray(val)) {                                                                                              // 143\n      _.each(val, function(v, i) {                                                                                     // 144\n        checkObj(v, affectedKey + '.' + i, operator, setKeys);                                                         // 145\n      });                                                                                                              // 146\n    }                                                                                                                  // 147\n                                                                                                                       // 148\n    // Loop through object keys                                                                                        // 149\n    else if (Utility.isBasicObject(val) && (!def || !def.blackbox)) {                                                  // 150\n                                                                                                                       // 151\n      // Get list of present keys                                                                                      // 152\n      var presentKeys = _.keys(val);                                                                                   // 153\n                                                                                                                       // 154\n      // Check all present keys plus all keys defined by the schema.                                                   // 155\n      // This allows us to detect extra keys not allowed by the schema plus                                            // 156\n      // any missing required keys, and to run any custom functions for other keys.                                    // 157\n      var keysToCheck = _.union(presentKeys, ss.objectKeys(affectedKeyGeneric));                                       // 158\n                                                                                                                       // 159\n      // If this object is within an array, make sure we check for                                                     // 160\n      // required as if it's not a modifier                                                                            // 161\n      var isInArrayItemObject = (affectedKeyGeneric && affectedKeyGeneric.slice(-2) === \".$\");                         // 162\n                                                                                                                       // 163\n      // Check all keys in the merged list                                                                             // 164\n      _.each(keysToCheck, function(key) {                                                                              // 165\n        checkObj(val[key], Utility.appendAffectedKey(affectedKey, key), operator, setKeys, isInArrayItemObject, true); // 166\n      });                                                                                                              // 167\n    }                                                                                                                  // 168\n                                                                                                                       // 169\n  }                                                                                                                    // 170\n                                                                                                                       // 171\n  function checkModifier(mod) {                                                                                        // 172\n    // Check for empty modifier                                                                                        // 173\n    if (_.isEmpty(mod)) {                                                                                              // 174\n      throw new Error(\"When the modifier option is true, validation object must have at least one operator\");          // 175\n    }                                                                                                                  // 176\n                                                                                                                       // 177\n    // Get a list of all keys in $set and $setOnInsert combined, for use later                                         // 178\n    var setKeys = _.keys(mod.$set || {}).concat(_.keys(mod.$setOnInsert || {}));                                       // 179\n                                                                                                                       // 180\n    // If this is an upsert, add all the $setOnInsert keys to $set;                                                    // 181\n    // since we don't know whether it will be an insert or update, we'll                                               // 182\n    // validate upserts as if they will be an insert.                                                                  // 183\n    if (\"$setOnInsert\" in mod) {                                                                                       // 184\n      if (isUpsert) {                                                                                                  // 185\n        mod.$set = mod.$set || {};                                                                                     // 186\n        mod.$set = _.extend(mod.$set, mod.$setOnInsert);                                                               // 187\n      }                                                                                                                // 188\n      delete mod.$setOnInsert;                                                                                         // 189\n    }                                                                                                                  // 190\n                                                                                                                       // 191\n    // Loop through operators                                                                                          // 192\n    _.each(mod, function (opObj, op) {                                                                                 // 193\n      // If non-operators are mixed in, throw error                                                                    // 194\n      if (op.slice(0, 1) !== \"$\") {                                                                                    // 195\n        throw new Error(\"When the modifier option is true, all validation object keys must be operators. Did you forget `$set`?\");\n      }                                                                                                                // 197\n      if (Utility.shouldCheck(op)) {                                                                                   // 198\n        // For an upsert, missing props would not be set if an insert is performed,                                    // 199\n        // so we add null keys to the modifier to force any \"required\" checks to fail                                  // 200\n        if (isUpsert && op === \"$set\") {                                                                               // 201\n          var presentKeys = _.keys(opObj);                                                                             // 202\n          _.each(ss.objectKeys(), function (schemaKey) {                                                               // 203\n            if (!_.contains(presentKeys, schemaKey)) {                                                                 // 204\n              checkObj(void 0, schemaKey, op, setKeys);                                                                // 205\n            }                                                                                                          // 206\n          });                                                                                                          // 207\n        }                                                                                                              // 208\n        _.each(opObj, function (v, k) {                                                                                // 209\n          if (op === \"$push\" || op === \"$addToSet\") {                                                                  // 210\n            if (Utility.isBasicObject(v) && \"$each\" in v) {                                                            // 211\n              v = v.$each;                                                                                             // 212\n            } else {                                                                                                   // 213\n              k = k + \".0\";                                                                                            // 214\n            }                                                                                                          // 215\n          }                                                                                                            // 216\n          checkObj(v, k, op, setKeys);                                                                                 // 217\n        });                                                                                                            // 218\n      }                                                                                                                // 219\n    });                                                                                                                // 220\n  }                                                                                                                    // 221\n                                                                                                                       // 222\n  // Kick off the validation                                                                                           // 223\n  if (isModifier)                                                                                                      // 224\n    checkModifier(obj);                                                                                                // 225\n  else                                                                                                                 // 226\n    checkObj(obj);                                                                                                     // 227\n                                                                                                                       // 228\n  // Make sure there is only one error per fieldName                                                                   // 229\n  var addedFieldNames = [];                                                                                            // 230\n  invalidKeys = _.filter(invalidKeys, function(errObj) {                                                               // 231\n    if (!_.contains(addedFieldNames, errObj.name)) {                                                                   // 232\n      addedFieldNames.push(errObj.name);                                                                               // 233\n      return true;                                                                                                     // 234\n    }                                                                                                                  // 235\n    return false;                                                                                                      // 236\n  });                                                                                                                  // 237\n                                                                                                                       // 238\n  return invalidKeys;                                                                                                  // 239\n};                                                                                                                     // 240\n                                                                                                                       // 241\nfunction doTypeChecks(def, keyValue, op) {                                                                             // 242\n  var expectedType = def.type;                                                                                         // 243\n                                                                                                                       // 244\n  // String checks                                                                                                     // 245\n  if (expectedType === String) {                                                                                       // 246\n    if (typeof keyValue !== \"string\") {                                                                                // 247\n      return \"expectedString\";                                                                                         // 248\n    } else if (def.max !== null && def.max < keyValue.length) {                                                        // 249\n      return \"maxString\";                                                                                              // 250\n    } else if (def.min !== null && def.min > keyValue.length) {                                                        // 251\n      return \"minString\";                                                                                              // 252\n    } else if (def.regEx instanceof RegExp && !def.regEx.test(keyValue)) {                                             // 253\n      return \"regEx\";                                                                                                  // 254\n    } else if (_.isArray(def.regEx)) {                                                                                 // 255\n      var regExError;                                                                                                  // 256\n      _.every(def.regEx, function(re, i) {                                                                             // 257\n        if (!re.test(keyValue)) {                                                                                      // 258\n          regExError = \"regEx.\" + i;                                                                                   // 259\n          return false;                                                                                                // 260\n        }                                                                                                              // 261\n        return true;                                                                                                   // 262\n      });                                                                                                              // 263\n      if (regExError)                                                                                                  // 264\n        return regExError;                                                                                             // 265\n    }                                                                                                                  // 266\n  }                                                                                                                    // 267\n                                                                                                                       // 268\n  // Number checks                                                                                                     // 269\n  else if (expectedType === Number) {                                                                                  // 270\n    if (typeof keyValue !== \"number\" || isNaN(keyValue)) {                                                             // 271\n      return \"expectedNumber\";                                                                                         // 272\n    } else if (op !== \"$inc\" && def.max !== null && def.max < keyValue) {                                              // 273\n      return \"maxNumber\";                                                                                              // 274\n    } else if (op !== \"$inc\" && def.min !== null && def.min > keyValue) {                                              // 275\n      return \"minNumber\";                                                                                              // 276\n    } else if (!def.decimal && keyValue.toString().indexOf(\".\") > -1) {                                                // 277\n      return \"noDecimal\";                                                                                              // 278\n    }                                                                                                                  // 279\n  }                                                                                                                    // 280\n                                                                                                                       // 281\n  // Boolean checks                                                                                                    // 282\n  else if (expectedType === Boolean) {                                                                                 // 283\n    if (typeof keyValue !== \"boolean\") {                                                                               // 284\n      return \"expectedBoolean\";                                                                                        // 285\n    }                                                                                                                  // 286\n  }                                                                                                                    // 287\n                                                                                                                       // 288\n  // Object checks                                                                                                     // 289\n  else if (expectedType === Object) {                                                                                  // 290\n    if (!Utility.isBasicObject(keyValue)) {                                                                            // 291\n      return \"expectedObject\";                                                                                         // 292\n    }                                                                                                                  // 293\n  }                                                                                                                    // 294\n                                                                                                                       // 295\n  // Array checks                                                                                                      // 296\n  else if (expectedType === Array) {                                                                                   // 297\n    if (!_.isArray(keyValue)) {                                                                                        // 298\n      return \"expectedArray\";                                                                                          // 299\n    } else if (def.minCount !== null && keyValue.length < def.minCount) {                                              // 300\n      return \"minCount\";                                                                                               // 301\n    } else if (def.maxCount !== null && keyValue.length > def.maxCount) {                                              // 302\n      return \"maxCount\";                                                                                               // 303\n    }                                                                                                                  // 304\n  }                                                                                                                    // 305\n                                                                                                                       // 306\n  // Constructor function checks                                                                                       // 307\n  else if (expectedType instanceof Function || Utility.safariBugFix(expectedType)) {                                   // 308\n                                                                                                                       // 309\n    // Generic constructor checks                                                                                      // 310\n    if (!(keyValue instanceof expectedType)) {                                                                         // 311\n      return \"expectedConstructor\";                                                                                    // 312\n    }                                                                                                                  // 313\n                                                                                                                       // 314\n    // Date checks                                                                                                     // 315\n    else if (expectedType === Date) {                                                                                  // 316\n      if (_.isDate(def.min) && def.min.getTime() > keyValue.getTime()) {                                               // 317\n        return \"minDate\";                                                                                              // 318\n      } else if (_.isDate(def.max) && def.max.getTime() < keyValue.getTime()) {                                        // 319\n        return \"maxDate\";                                                                                              // 320\n      }                                                                                                                // 321\n    }                                                                                                                  // 322\n  }                                                                                                                    // 323\n                                                                                                                       // 324\n}                                                                                                                      // 325\n                                                                                                                       // 326\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:simple-schema/simple-schema-validation-new.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\ndoValidation2 = function doValidation2(obj, isModifier, isUpsert, keyToValidate, ss, extendedCustomContext) {          // 1\n                                                                                                                       // 2\n  // First do some basic checks of the object, and throw errors if necessary                                           // 3\n  if (!_.isObject(obj)) {                                                                                              // 4\n    throw new Error(\"The first argument of validate() or validateOne() must be an object\");                            // 5\n  }                                                                                                                    // 6\n                                                                                                                       // 7\n  if (isModifier) {                                                                                                    // 8\n    if (_.isEmpty(obj)) {                                                                                              // 9\n      throw new Error(\"When the modifier option is true, validation object must have at least one operator\");          // 10\n    } else {                                                                                                           // 11\n      var allKeysAreOperators = _.every(obj, function(v, k) {                                                          // 12\n        return (k.substring(0, 1) === \"$\");                                                                            // 13\n      });                                                                                                              // 14\n      if (!allKeysAreOperators) {                                                                                      // 15\n        throw new Error(\"When the modifier option is true, all validation object keys must be operators\");             // 16\n      }                                                                                                                // 17\n                                                                                                                       // 18\n      // We use a LocalCollection to figure out what the resulting doc                                                 // 19\n      // would be in a worst case scenario. Then we validate that doc                                                  // 20\n      // so that we don't have to validate the modifier object directly.                                               // 21\n      obj = convertModifierToDoc(obj, ss.schema(), isUpsert);                                                          // 22\n    }                                                                                                                  // 23\n  } else if (Utility.looksLikeModifier(obj)) {                                                                         // 24\n    throw new Error(\"When the validation object contains mongo operators, you must set the modifier option to true\");  // 25\n  }                                                                                                                    // 26\n                                                                                                                       // 27\n  var invalidKeys = [];                                                                                                // 28\n  var mDoc; // for caching the MongoObject if necessary                                                                // 29\n                                                                                                                       // 30\n  // Validation function called for each affected key                                                                  // 31\n  function validate(val, affectedKey, affectedKeyGeneric, def, op, skipRequiredCheck, strictRequiredCheck) {           // 32\n                                                                                                                       // 33\n    // Get the schema for this key, marking invalid if there isn't one.                                                // 34\n    if (!def) {                                                                                                        // 35\n      invalidKeys.push(Utility.errorObject(\"keyNotInSchema\", affectedKey, val, def, ss));                              // 36\n      return;                                                                                                          // 37\n    }                                                                                                                  // 38\n                                                                                                                       // 39\n    // Check for missing required values. The general logic is this:                                                   // 40\n    // * If the operator is $unset or $rename, it's invalid.                                                           // 41\n    // * If the value is null, it's invalid.                                                                           // 42\n    // * If the value is undefined and one of the following are true, it's invalid:                                    // 43\n    //     * We're validating a key of a sub-object.                                                                   // 44\n    //     * We're validating a key of an object that is an array item.                                                // 45\n    //     * We're validating a document (as opposed to a modifier).                                                   // 46\n    //     * We're validating a key under the $set operator in a modifier, and it's an upsert.                         // 47\n    if (!skipRequiredCheck && !def.optional) {                                                                         // 48\n      if (val === null || val === void 0) {                                                                            // 49\n        invalidKeys.push(Utility.errorObject(\"required\", affectedKey, null, def, ss));                                 // 50\n        return;                                                                                                        // 51\n      }                                                                                                                // 52\n    }                                                                                                                  // 53\n                                                                                                                       // 54\n    // Value checks are not necessary for null or undefined values                                                     // 55\n    if (Utility.isNotNullOrUndefined(val)) {                                                                           // 56\n                                                                                                                       // 57\n      // Check that value is of the correct type                                                                       // 58\n      var typeError = doTypeChecks(def, val, op);                                                                      // 59\n      if (typeError) {                                                                                                 // 60\n        invalidKeys.push(Utility.errorObject(typeError, affectedKey, val, def, ss));                                   // 61\n        return;                                                                                                        // 62\n      }                                                                                                                // 63\n                                                                                                                       // 64\n      // Check value against allowedValues array                                                                       // 65\n      if (def.allowedValues && !_.contains(def.allowedValues, val)) {                                                  // 66\n        invalidKeys.push(Utility.errorObject(\"notAllowed\", affectedKey, val, def, ss));                                // 67\n        return;                                                                                                        // 68\n      }                                                                                                                // 69\n                                                                                                                       // 70\n    }                                                                                                                  // 71\n                                                                                                                       // 72\n    // Perform custom validation                                                                                       // 73\n    var lastDot = affectedKey.lastIndexOf('.');                                                                        // 74\n    var fieldParentName = lastDot === -1 ? '' : affectedKey.slice(0, lastDot + 1);                                     // 75\n    var validators = def.custom ? [def.custom] : [];                                                                   // 76\n    validators = validators.concat(ss._validators).concat(SimpleSchema._validators);                                   // 77\n    _.every(validators, function(validator) {                                                                          // 78\n      var errorType = validator.call(_.extend({                                                                        // 79\n        key: affectedKey,                                                                                              // 80\n        genericKey: affectedKeyGeneric,                                                                                // 81\n        definition: def,                                                                                               // 82\n        isSet: (val !== void 0),                                                                                       // 83\n        value: val,                                                                                                    // 84\n        operator: op,                                                                                                  // 85\n        field: function(fName) {                                                                                       // 86\n          mDoc = mDoc || new MongoObject(obj, ss._blackboxKeys); //create if necessary, cache for speed                // 87\n          var keyInfo = mDoc.getInfoForKey(fName) || {};                                                               // 88\n          return {                                                                                                     // 89\n            isSet: (keyInfo.value !== void 0),                                                                         // 90\n            value: keyInfo.value,                                                                                      // 91\n            operator: keyInfo.operator                                                                                 // 92\n          };                                                                                                           // 93\n        },                                                                                                             // 94\n        siblingField: function(fName) {                                                                                // 95\n          mDoc = mDoc || new MongoObject(obj, ss._blackboxKeys); //create if necessary, cache for speed                // 96\n          var keyInfo = mDoc.getInfoForKey(fieldParentName + fName) || {};                                             // 97\n          return {                                                                                                     // 98\n            isSet: (keyInfo.value !== void 0),                                                                         // 99\n            value: keyInfo.value,                                                                                      // 100\n            operator: keyInfo.operator                                                                                 // 101\n          };                                                                                                           // 102\n        }                                                                                                              // 103\n      }, extendedCustomContext || {}));                                                                                // 104\n      if (typeof errorType === \"string\") {                                                                             // 105\n        invalidKeys.push(Utility.errorObject(errorType, affectedKey, val, def, ss));                                   // 106\n        return false;                                                                                                  // 107\n      }                                                                                                                // 108\n      return true;                                                                                                     // 109\n    });                                                                                                                // 110\n  }                                                                                                                    // 111\n                                                                                                                       // 112\n  // The recursive function                                                                                            // 113\n  function checkObj(val, affectedKey, skipRequiredCheck, strictRequiredCheck) {                                        // 114\n    var affectedKeyGeneric, def;                                                                                       // 115\n                                                                                                                       // 116\n    if (affectedKey) {                                                                                                 // 117\n                                                                                                                       // 118\n      // When we hit a blackbox key, we don't progress any further                                                     // 119\n      if (ss.keyIsInBlackBox(affectedKey)) {                                                                           // 120\n        return;                                                                                                        // 121\n      }                                                                                                                // 122\n                                                                                                                       // 123\n      // Make a generic version of the affected key, and use that                                                      // 124\n      // to get the schema for this key.                                                                               // 125\n      affectedKeyGeneric = SimpleSchema._makeGeneric(affectedKey);                                                     // 126\n      def = ss.getDefinition(affectedKey);                                                                             // 127\n                                                                                                                       // 128\n      // Perform validation for this key                                                                               // 129\n      if (!keyToValidate || keyToValidate === affectedKey || keyToValidate === affectedKeyGeneric) {                   // 130\n        validate(val, affectedKey, affectedKeyGeneric, def, null, skipRequiredCheck, strictRequiredCheck);             // 131\n      }                                                                                                                // 132\n    }                                                                                                                  // 133\n                                                                                                                       // 134\n    // Temporarily convert missing objects to empty objects                                                            // 135\n    // so that the looping code will be called and required                                                            // 136\n    // descendent keys can be validated.                                                                               // 137\n    if ((val === void 0 || val === null) && (!def || (def.type === Object && !def.optional))) {                        // 138\n      val = {};                                                                                                        // 139\n    }                                                                                                                  // 140\n                                                                                                                       // 141\n    // Loop through arrays                                                                                             // 142\n    if (_.isArray(val)) {                                                                                              // 143\n      _.each(val, function(v, i) {                                                                                     // 144\n        checkObj(v, affectedKey + '.' + i);                                                                            // 145\n      });                                                                                                              // 146\n    }                                                                                                                  // 147\n                                                                                                                       // 148\n    // Loop through object keys                                                                                        // 149\n    else if (Utility.isBasicObject(val) && (!def || !def.blackbox)) {                                                  // 150\n                                                                                                                       // 151\n      // Get list of present keys                                                                                      // 152\n      var presentKeys = _.keys(val);                                                                                   // 153\n                                                                                                                       // 154\n      // Check all present keys plus all keys defined by the schema.                                                   // 155\n      // This allows us to detect extra keys not allowed by the schema plus                                            // 156\n      // any missing required keys, and to run any custom functions for other keys.                                    // 157\n      var keysToCheck = _.union(presentKeys, ss._schemaKeys);                                                          // 158\n                                                                                                                       // 159\n      // If this object is within an array, make sure we check for                                                     // 160\n      // required as if it's not a modifier                                                                            // 161\n      var strictRequiredCheck = (affectedKeyGeneric && affectedKeyGeneric.slice(-2) === \".$\");                         // 162\n                                                                                                                       // 163\n      // Check all keys in the merged list                                                                             // 164\n      _.each(keysToCheck, function(key) {                                                                              // 165\n        if (Utility.shouldCheck(key)) {                                                                                // 166\n          checkObj(val[key], Utility.appendAffectedKey(affectedKey, key), skipRequiredCheck, strictRequiredCheck);     // 167\n        }                                                                                                              // 168\n      });                                                                                                              // 169\n    }                                                                                                                  // 170\n                                                                                                                       // 171\n  }                                                                                                                    // 172\n                                                                                                                       // 173\n  // Kick off the validation                                                                                           // 174\n  checkObj(obj);                                                                                                       // 175\n                                                                                                                       // 176\n  // Make sure there is only one error per fieldName                                                                   // 177\n  var addedFieldNames = [];                                                                                            // 178\n  invalidKeys = _.filter(invalidKeys, function(errObj) {                                                               // 179\n    if (!_.contains(addedFieldNames, errObj.name)) {                                                                   // 180\n      addedFieldNames.push(errObj.name);                                                                               // 181\n      return true;                                                                                                     // 182\n    }                                                                                                                  // 183\n    return false;                                                                                                      // 184\n  });                                                                                                                  // 185\n                                                                                                                       // 186\n  return invalidKeys;                                                                                                  // 187\n};                                                                                                                     // 188\n                                                                                                                       // 189\nfunction convertModifierToDoc(mod, schema, isUpsert) {                                                                 // 190\n  // Create unmanaged LocalCollection as scratchpad                                                                    // 191\n  var t = new Meteor.Collection(null);                                                                                 // 192\n                                                                                                                       // 193\n  // LocalCollections are in memory, and it seems                                                                      // 194\n  // that it's fine to use them synchronously on                                                                       // 195\n  // either client or server                                                                                           // 196\n  var id;                                                                                                              // 197\n  if (isUpsert) {                                                                                                      // 198\n    // We assume upserts will be inserts (conservative                                                                 // 199\n    // validation of requiredness)                                                                                     // 200\n    id = Random.id();                                                                                                  // 201\n    t.upsert({_id: id}, mod);                                                                                          // 202\n  } else {                                                                                                             // 203\n    var mDoc = new MongoObject(mod);                                                                                   // 204\n    // Create a ficticious existing document                                                                           // 205\n    var fakeDoc = new MongoObject({});                                                                                 // 206\n    _.each(schema, function (def, fieldName) {                                                                         // 207\n      var setVal;                                                                                                      // 208\n      // Prefill doc with empty arrays to avoid the                                                                    // 209\n      // mongodb issue where it does not understand                                                                    // 210\n      // that numeric pieces should create arrays.                                                                     // 211\n      if (def.type === Array && mDoc.affectsGenericKey(fieldName)) {                                                   // 212\n        setVal = [];                                                                                                   // 213\n      }                                                                                                                // 214\n      // Set dummy values for required fields because                                                                  // 215\n      // we assume any existing data would be valid.                                                                   // 216\n      else if (!def.optional) {                                                                                        // 217\n        // TODO correct value type based on schema type                                                                // 218\n        if (def.type === Boolean)                                                                                      // 219\n          setVal = true;                                                                                               // 220\n        else if (def.type === Number)                                                                                  // 221\n          setVal = def.min || 0;                                                                                       // 222\n        else if (def.type === Date)                                                                                    // 223\n          setVal = def.min || new Date;                                                                                // 224\n        else if (def.type === Array)                                                                                   // 225\n          setVal = [];                                                                                                 // 226\n        else if (def.type === Object)                                                                                  // 227\n          setVal = {};                                                                                                 // 228\n        else                                                                                                           // 229\n          setVal = \"0\";                                                                                                // 230\n      }                                                                                                                // 231\n                                                                                                                       // 232\n      if (setVal !== void 0) {                                                                                         // 233\n        var key = fieldName.replace(/\\.\\$/g, \".0\");                                                                    // 234\n        var pos = MongoObject._keyToPosition(key, false);                                                              // 235\n        fakeDoc.setValueForPosition(pos, setVal);                                                                      // 236\n      }                                                                                                                // 237\n    });                                                                                                                // 238\n    fakeDoc = fakeDoc.getObject();                                                                                     // 239\n    // Insert fake doc into local scratch collection                                                                   // 240\n    id = t.insert(fakeDoc);                                                                                            // 241\n    // Now update it with the modifier                                                                                 // 242\n    t.update(id, mod);                                                                                                 // 243\n  }                                                                                                                    // 244\n                                                                                                                       // 245\n  var doc = t.findOne(id);                                                                                             // 246\n  // We're done with it                                                                                                // 247\n  t.remove(id);                                                                                                        // 248\n  // Currently we don't validate _id unless it is                                                                      // 249\n  // explicitly added to the schema                                                                                    // 250\n  if (!schema._id) {                                                                                                   // 251\n    delete doc._id;                                                                                                    // 252\n  }                                                                                                                    // 253\n  return doc;                                                                                                          // 254\n}                                                                                                                      // 255\n                                                                                                                       // 256\nfunction doTypeChecks(def, keyValue, op) {                                                                             // 257\n  var expectedType = def.type;                                                                                         // 258\n                                                                                                                       // 259\n  // String checks                                                                                                     // 260\n  if (expectedType === String) {                                                                                       // 261\n    if (typeof keyValue !== \"string\") {                                                                                // 262\n      return \"expectedString\";                                                                                         // 263\n    } else if (def.max !== null && def.max < keyValue.length) {                                                        // 264\n      return \"maxString\";                                                                                              // 265\n    } else if (def.min !== null && def.min > keyValue.length) {                                                        // 266\n      return \"minString\";                                                                                              // 267\n    } else if (def.regEx instanceof RegExp && !def.regEx.test(keyValue)) {                                             // 268\n      return \"regEx\";                                                                                                  // 269\n    } else if (_.isArray(def.regEx)) {                                                                                 // 270\n      var regExError;                                                                                                  // 271\n      _.every(def.regEx, function(re, i) {                                                                             // 272\n        if (!re.test(keyValue)) {                                                                                      // 273\n          regExError = \"regEx.\" + i;                                                                                   // 274\n          return false;                                                                                                // 275\n        }                                                                                                              // 276\n        return true;                                                                                                   // 277\n      });                                                                                                              // 278\n      if (regExError)                                                                                                  // 279\n        return regExError;                                                                                             // 280\n    }                                                                                                                  // 281\n  }                                                                                                                    // 282\n                                                                                                                       // 283\n  // Number checks                                                                                                     // 284\n  else if (expectedType === Number) {                                                                                  // 285\n    if (typeof keyValue !== \"number\" || isNaN(keyValue)) {                                                             // 286\n      return \"expectedNumber\";                                                                                         // 287\n    } else if (op !== \"$inc\" && def.max !== null && def.max < keyValue) {                                              // 288\n      return \"maxNumber\";                                                                                              // 289\n    } else if (op !== \"$inc\" && def.min !== null && def.min > keyValue) {                                              // 290\n      return \"minNumber\";                                                                                              // 291\n    } else if (!def.decimal && keyValue.toString().indexOf(\".\") > -1) {                                                // 292\n      return \"noDecimal\";                                                                                              // 293\n    }                                                                                                                  // 294\n  }                                                                                                                    // 295\n                                                                                                                       // 296\n  // Boolean checks                                                                                                    // 297\n  else if (expectedType === Boolean) {                                                                                 // 298\n    if (typeof keyValue !== \"boolean\") {                                                                               // 299\n      return \"expectedBoolean\";                                                                                        // 300\n    }                                                                                                                  // 301\n  }                                                                                                                    // 302\n                                                                                                                       // 303\n  // Object checks                                                                                                     // 304\n  else if (expectedType === Object) {                                                                                  // 305\n    if (!Utility.isBasicObject(keyValue)) {                                                                            // 306\n      return \"expectedObject\";                                                                                         // 307\n    }                                                                                                                  // 308\n  }                                                                                                                    // 309\n                                                                                                                       // 310\n  // Array checks                                                                                                      // 311\n  else if (expectedType === Array) {                                                                                   // 312\n    if (!_.isArray(keyValue)) {                                                                                        // 313\n      return \"expectedArray\";                                                                                          // 314\n    } else if (def.minCount !== null && keyValue.length < def.minCount) {                                              // 315\n      return \"minCount\";                                                                                               // 316\n    } else if (def.maxCount !== null && keyValue.length > def.maxCount) {                                              // 317\n      return \"maxCount\";                                                                                               // 318\n    }                                                                                                                  // 319\n  }                                                                                                                    // 320\n                                                                                                                       // 321\n  // Constructor function checks                                                                                       // 322\n  else if (expectedType instanceof Function || Utility.safariBugFix(expectedType)) {                                   // 323\n                                                                                                                       // 324\n    // Generic constructor checks                                                                                      // 325\n    if (!(keyValue instanceof expectedType)) {                                                                         // 326\n      return \"expectedConstructor\";                                                                                    // 327\n    }                                                                                                                  // 328\n                                                                                                                       // 329\n    // Date checks                                                                                                     // 330\n    else if (expectedType === Date) {                                                                                  // 331\n      if (_.isDate(def.min) && def.min.getTime() > keyValue.getTime()) {                                               // 332\n        return \"minDate\";                                                                                              // 333\n      } else if (_.isDate(def.max) && def.max.getTime() < keyValue.getTime()) {                                        // 334\n        return \"maxDate\";                                                                                              // 335\n      }                                                                                                                // 336\n    }                                                                                                                  // 337\n  }                                                                                                                    // 338\n                                                                                                                       // 339\n}                                                                                                                      // 340\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/aldeed:simple-schema/simple-schema-context.js                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*                                                                                                                     // 1\n * PUBLIC API                                                                                                          // 2\n */                                                                                                                    // 3\n                                                                                                                       // 4\nSimpleSchemaValidationContext = function SimpleSchemaValidationContext(ss) {                                           // 5\n  var self = this;                                                                                                     // 6\n  self._simpleSchema = ss;                                                                                             // 7\n  self._schema = ss.schema();                                                                                          // 8\n  self._schemaKeys = _.keys(self._schema);                                                                             // 9\n  self._invalidKeys = [];                                                                                              // 10\n  //set up validation dependencies                                                                                     // 11\n  self._deps = {};                                                                                                     // 12\n  self._depsAny = new Deps.Dependency;                                                                                 // 13\n  _.each(self._schemaKeys, function(name) {                                                                            // 14\n    self._deps[name] = new Deps.Dependency;                                                                            // 15\n  });                                                                                                                  // 16\n};                                                                                                                     // 17\n                                                                                                                       // 18\n//validates the object against the simple schema and sets a reactive array of error objects                            // 19\nSimpleSchemaValidationContext.prototype.validate = function SimpleSchemaValidationContext_validate(doc, options) {     // 20\n  var self = this;                                                                                                     // 21\n  options = _.extend({                                                                                                 // 22\n    modifier: false,                                                                                                   // 23\n    upsert: false,                                                                                                     // 24\n    extendedCustomContext: {}                                                                                          // 25\n  }, options || {});                                                                                                   // 26\n                                                                                                                       // 27\n  //on the client we can add the userId if not already in the custom context                                           // 28\n  if (Meteor.isClient && options.extendedCustomContext.userId === void 0) {                                            // 29\n    options.extendedCustomContext.userId = (Meteor.userId && Meteor.userId()) || null;                                 // 30\n  }                                                                                                                    // 31\n                                                                                                                       // 32\n  var invalidKeys = doValidation(doc, options.modifier, options.upsert, null, self._simpleSchema, options.extendedCustomContext);\n                                                                                                                       // 34\n  //now update self._invalidKeys and dependencies                                                                      // 35\n                                                                                                                       // 36\n  //note any currently invalid keys so that we can mark them as changed                                                // 37\n  //due to new validation (they may be valid now, or invalid in a different way)                                       // 38\n  var removedKeys = _.pluck(self._invalidKeys, \"name\");                                                                // 39\n                                                                                                                       // 40\n  //update                                                                                                             // 41\n  self._invalidKeys = invalidKeys;                                                                                     // 42\n                                                                                                                       // 43\n  //add newly invalid keys to changedKeys                                                                              // 44\n  var addedKeys = _.pluck(self._invalidKeys, \"name\");                                                                  // 45\n                                                                                                                       // 46\n  //mark all changed keys as changed                                                                                   // 47\n  var changedKeys = _.union(addedKeys, removedKeys);                                                                   // 48\n  self._markKeysChanged(changedKeys);                                                                                  // 49\n                                                                                                                       // 50\n  // Return true if it was valid; otherwise, return false                                                              // 51\n  return self._invalidKeys.length === 0;                                                                               // 52\n};                                                                                                                     // 53\n                                                                                                                       // 54\n//validates doc against self._schema for one key and sets a reactive array of error objects                            // 55\nSimpleSchemaValidationContext.prototype.validateOne = function SimpleSchemaValidationContext_validateOne(doc, keyName, options) {\n  var self = this;                                                                                                     // 57\n  options = _.extend({                                                                                                 // 58\n    modifier: false,                                                                                                   // 59\n    upsert: false,                                                                                                     // 60\n    extendedCustomContext: {}                                                                                          // 61\n  }, options || {});                                                                                                   // 62\n                                                                                                                       // 63\n  //on the client we can add the userId if not already in the custom context                                           // 64\n  if (Meteor.isClient && options.extendedCustomContext.userId === void 0) {                                            // 65\n    options.extendedCustomContext.userId = (Meteor.userId && Meteor.userId()) || null;                                 // 66\n  }                                                                                                                    // 67\n                                                                                                                       // 68\n  var invalidKeys = doValidation(doc, options.modifier, options.upsert, keyName, self._simpleSchema, options.extendedCustomContext);\n                                                                                                                       // 70\n  //now update self._invalidKeys and dependencies                                                                      // 71\n                                                                                                                       // 72\n  //remove objects from self._invalidKeys where name = keyName                                                         // 73\n  var newInvalidKeys = [];                                                                                             // 74\n  for (var i = 0, ln = self._invalidKeys.length, k; i < ln; i++) {                                                     // 75\n    k = self._invalidKeys[i];                                                                                          // 76\n    if (k.name !== keyName) {                                                                                          // 77\n      newInvalidKeys.push(k);                                                                                          // 78\n    }                                                                                                                  // 79\n  }                                                                                                                    // 80\n  self._invalidKeys = newInvalidKeys;                                                                                  // 81\n                                                                                                                       // 82\n  //merge invalidKeys into self._invalidKeys                                                                           // 83\n  for (var i = 0, ln = invalidKeys.length, k; i < ln; i++) {                                                           // 84\n    k = invalidKeys[i];                                                                                                // 85\n    self._invalidKeys.push(k);                                                                                         // 86\n  }                                                                                                                    // 87\n                                                                                                                       // 88\n  //mark key as changed due to new validation (they may be valid now, or invalid in a different way)                   // 89\n  self._markKeysChanged([keyName]);                                                                                    // 90\n                                                                                                                       // 91\n  // Return true if it was valid; otherwise, return false                                                              // 92\n  return !self._keyIsInvalid(keyName);                                                                                 // 93\n};                                                                                                                     // 94\n                                                                                                                       // 95\nfunction doValidation(obj, isModifier, isUpsert, keyToValidate, ss, extendedCustomContext) {                           // 96\n  var useOld = true; //for now this can be manually changed to try the experimental method, which doesn't yet work properly\n  var func = useOld ? doValidation1 : doValidation2;                                                                   // 98\n  return func(obj, isModifier, isUpsert, keyToValidate, ss, extendedCustomContext);                                    // 99\n}                                                                                                                      // 100\n                                                                                                                       // 101\n//reset the invalidKeys array                                                                                          // 102\nSimpleSchemaValidationContext.prototype.resetValidation = function SimpleSchemaValidationContext_resetValidation() {   // 103\n  var self = this;                                                                                                     // 104\n  var removedKeys = _.pluck(self._invalidKeys, \"name\");                                                                // 105\n  self._invalidKeys = [];                                                                                              // 106\n  self._markKeysChanged(removedKeys);                                                                                  // 107\n};                                                                                                                     // 108\n                                                                                                                       // 109\nSimpleSchemaValidationContext.prototype.isValid = function SimpleSchemaValidationContext_isValid() {                   // 110\n  var self = this;                                                                                                     // 111\n  self._depsAny.depend();                                                                                              // 112\n  return !self._invalidKeys.length;                                                                                    // 113\n};                                                                                                                     // 114\n                                                                                                                       // 115\nSimpleSchemaValidationContext.prototype.invalidKeys = function SimpleSchemaValidationContext_invalidKeys() {           // 116\n  var self = this;                                                                                                     // 117\n  self._depsAny.depend();                                                                                              // 118\n  return self._invalidKeys;                                                                                            // 119\n};                                                                                                                     // 120\n                                                                                                                       // 121\nSimpleSchemaValidationContext.prototype.addInvalidKeys = function SimpleSchemaValidationContext_addInvalidKeys(errors) {\n  var self = this;                                                                                                     // 123\n                                                                                                                       // 124\n  if (!errors || !errors.length)                                                                                       // 125\n    return;                                                                                                            // 126\n                                                                                                                       // 127\n  var changedKeys = [];                                                                                                // 128\n  _.each(errors, function (errorObject) {                                                                              // 129\n    changedKeys.push(errorObject.name);                                                                                // 130\n    self._invalidKeys.push(errorObject);                                                                               // 131\n  });                                                                                                                  // 132\n                                                                                                                       // 133\n  self._markKeysChanged(changedKeys);                                                                                  // 134\n};                                                                                                                     // 135\n                                                                                                                       // 136\nSimpleSchemaValidationContext.prototype._markKeysChanged = function SimpleSchemaValidationContext__markKeysChanged(keys) {\n  var self = this;                                                                                                     // 138\n                                                                                                                       // 139\n  if (!keys || !keys.length)                                                                                           // 140\n    return;                                                                                                            // 141\n                                                                                                                       // 142\n  _.each(keys, function(name) {                                                                                        // 143\n    var genericName = SimpleSchema._makeGeneric(name);                                                                 // 144\n    if (genericName in self._deps) {                                                                                   // 145\n      self._deps[genericName].changed();                                                                               // 146\n    }                                                                                                                  // 147\n  });                                                                                                                  // 148\n  self._depsAny.changed();                                                                                             // 149\n};                                                                                                                     // 150\n                                                                                                                       // 151\nSimpleSchemaValidationContext.prototype._getInvalidKeyObject = function SimpleSchemaValidationContext__getInvalidKeyObject(name, genericName) {\n  var self = this;                                                                                                     // 153\n  genericName = genericName || SimpleSchema._makeGeneric(name);                                                        // 154\n                                                                                                                       // 155\n  var errorObj = _.findWhere(self._invalidKeys, {name: name});                                                         // 156\n  if (!errorObj) {                                                                                                     // 157\n    errorObj = _.findWhere(self._invalidKeys, {name: genericName});                                                    // 158\n  }                                                                                                                    // 159\n  return errorObj;                                                                                                     // 160\n};                                                                                                                     // 161\n                                                                                                                       // 162\nSimpleSchemaValidationContext.prototype._keyIsInvalid = function SimpleSchemaValidationContext__keyIsInvalid(name, genericName) {\n  return !!this._getInvalidKeyObject(name, genericName);                                                               // 164\n};                                                                                                                     // 165\n                                                                                                                       // 166\n// Like the internal one, but with deps                                                                                // 167\nSimpleSchemaValidationContext.prototype.keyIsInvalid = function SimpleSchemaValidationContext_keyIsInvalid(name) {     // 168\n  var self = this, genericName = SimpleSchema._makeGeneric(name);                                                      // 169\n  self._deps[genericName] && self._deps[genericName].depend();                                                         // 170\n                                                                                                                       // 171\n  return self._keyIsInvalid(name, genericName);                                                                        // 172\n};                                                                                                                     // 173\n                                                                                                                       // 174\nSimpleSchemaValidationContext.prototype.keyErrorMessage = function SimpleSchemaValidationContext_keyErrorMessage(name) {\n  var self = this, genericName = SimpleSchema._makeGeneric(name);                                                      // 176\n  self._deps[genericName] && self._deps[genericName].depend();                                                         // 177\n                                                                                                                       // 178\n  var errorObj = self._getInvalidKeyObject(name, genericName);                                                         // 179\n  if (!errorObj) {                                                                                                     // 180\n    return \"\";                                                                                                         // 181\n  }                                                                                                                    // 182\n                                                                                                                       // 183\n  return self._simpleSchema.messageForError(errorObj.type, errorObj.name, null, errorObj.value);                       // 184\n};                                                                                                                     // 185\n                                                                                                                       // 186\nSimpleSchemaValidationContext.prototype.getErrorObject = function SimpleSchemaValidationContext_getErrorObject(context) {\n  var self = this, message, invalidKeys = this._invalidKeys;                                                           // 188\n  if (invalidKeys.length) {                                                                                            // 189\n    message = self.keyErrorMessage(invalidKeys[0].name);                                                               // 190\n    // We add `message` prop to the invalidKeys.                                                                       // 191\n    invalidKeys = _.map(invalidKeys, function (o) {                                                                    // 192\n      return _.extend({message: self.keyErrorMessage(o.name)}, o);                                                     // 193\n    });                                                                                                                // 194\n  } else {                                                                                                             // 195\n    message = \"Failed validation\";                                                                                     // 196\n  }                                                                                                                    // 197\n  var error = new Error(message);                                                                                      // 198\n  error.invalidKeys = invalidKeys;                                                                                     // 199\n  // If on the server, we add a sanitized error, too, in case we're                                                    // 200\n  // called from a method.                                                                                             // 201\n  if (Meteor.isServer) {                                                                                               // 202\n    error.sanitizedError = new Meteor.Error(400, message);                                                             // 203\n  }                                                                                                                    // 204\n  return error;                                                                                                        // 205\n};                                                                                                                     // 206\n                                                                                                                       // 207\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}