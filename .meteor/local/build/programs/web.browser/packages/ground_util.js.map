{"version":3,"sources":["meteor://ðŸ’»app/packages/ground_util/util.common.js","meteor://ðŸ’»app/packages/ground_util/util.client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yG;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yG","file":"/packages/ground_util.js","sourcesContent":["/* global _groundUtil:true */\n/* global Ground:true */\n// Define the utillity scope\n_groundUtil = {};\n\n// New ground scope\nGround = {};\n\n// Meteor.Collection or Mongo.Collection\n_groundUtil.Collection = (typeof Mongo !== 'undefined')?\n        Mongo.Collection: Meteor.Collection;\n\n","/* global _groundUtil:false */\n////////////////////////////////////////////////////////////////////////////////\n// MAP METEOR API's\n////////////////////////////////////////////////////////////////////////////////\n\n// Access the DDP connection class\nvar _DDP;\n\ntry {\n  _DDP = Package.ddp.LivedataTest;\n  _DDP = _DDP.Connection;\n\n} catch(err) {\n  _DDP = Meteor.connection.constructor;\n}\n\n_groundUtil.Connection = _DDP;\n\nif (!_DDP) {\n  throw new Error('GroundDB cannot access the DDP.Connection class');\n}\n\n// Meteor connection\n_groundUtil.connection = _groundUtil.connection || Meteor.default_connection; // jshint ignore:line\n\n// ParseId function\n_groundUtil.idParse = LocalCollection && LocalCollection._idParse ||\n        Meteor.idParse || MongoID.idParse;\n\n// Get the database map\n_groundUtil.getDatabaseMap = function(col) {\n  // XXX: Suport older styles?\n  return col._collection._docs._map;\n};\n\n_groundUtil.setDatabaseMap = function(col, map) {\n  // XXX: Suport older styles?\n  col._collection._docs._map = map;\n};\n\n_groundUtil.invalidateDb = function(col) {\n  // We need to invalidate all listening queries\n  _.each(col._collection.queries, function(query) {\n    // This db has changed big time...\n    query.changed();\n  });\n};\n\n// State of all subscriptions in meteor\nvar _subscriptionsReady = new ReactiveVar(false);\n\n//////////////////////////// ALL SUBSCRIPTIONS READY ///////////////////////////\n\n_groundUtil.allSubscriptionsReady = function() {\n  return _subscriptionsReady.get();\n};\n\n// Could be nice to have a Meteor.allSubscriptionsReady\nvar readyInterval = Meteor.setInterval(function() {\n  if (DDP._allSubscriptionsReady()) {\n    // Stop this madness\n    Meteor.clearInterval(readyInterval);\n    // Set the reactive var\n    _subscriptionsReady.set(true);\n  }\n}, 1000);\n\n//////////////////////////////// UNDERSCORE DEPS ///////////////////////////////\n\n_groundUtil.each = _.each;\n\n_groundUtil.toArray = _.toArray;\n\n_groundUtil.extend = _.extend;\n"]}