{"version":3,"sources":["meteor://ðŸ’»app/packages/ground_db/packages/ground_db.js"],"names":[],"mappingsfile":"/packages/ground_db.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/ground:db/groundDB.client.js                                                                             //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n/*                                                                                                                   // 1\n               ______                           ______  ____                                                         // 2\n              / ____/________  __  ______  ____/ / __ \\/ __ )                                                        // 3\n             / / __/ ___/ __ \\/ / / / __ \\/ __  / / / / __  |                                                        // 4\n            / /_/ / /  / /_/ / /_/ / / / / /_/ / /_/ / /_/ /                                                         // 5\n            \\____/_/   \\____/\\__,_/_/ /_/\\__,_/_____/_____/                                                          // 6\n                                                                                                                     // 7\n                                                                                                                     // 8\nGroundDB is a thin layer providing Meteor offline database and methods                                               // 9\n                                                                                                                     // 10\nConcept, localstorage is simple wide spread but slow                                                                 // 11\n                                                                                                                     // 12\nGroundDB saves outstanding methods and minimongo into localstorage at window                                         // 13\nunload, but can be configured to save at any changes and at certain interval(ms)                                     // 14\n                                                                                                                     // 15\nWhen the app loads GroundDB resumes methods and database changes                                                     // 16\n                                                                                                                     // 17\nRegz. RaiX                                                                                                           // 18\n                                                                                                                     // 19\n*/                                                                                                                   // 20\n                                                                                                                     // 21\n/* global Ground: true */                                                                                            // 22\n/* global GroundDB: true */       // This global is deprecating */                                                   // 23\n/* global MiniMax: false */       // ground:minimax */                                                               // 24\n/* global _groundUtil: false */   // ground:util */                                                                  // 25\n/* global OneTimeout: false */    // ground:util - use _.debounce instead */                                         // 26\n/* global Store: false */         // ground:store */                                                                 // 27\n/* global EventEmitter: false */  // raix:eventemitter */                                                            // 28\n/* global Kernel: false */        // dispatch:kernel */                                                              // 29\n                                                                                                                     // 30\n///////////////////////////////// TEST BED /////////////////////////////////////                                     // 31\n                                                                                                                     // 32\nvar test;                                                                                                            // 33\n                                                                                                                     // 34\ntry {                                                                                                                // 35\n  test = Package['ground:test'].GroundTest;                                                                          // 36\n  console.warn('## IN TEST MODE');                                                                                   // 37\n} catch(err) {                                                                                                       // 38\n  // Production noop                                                                                                 // 39\n  test = {                                                                                                           // 40\n    log: function() {},                                                                                              // 41\n    debug: function() {},                                                                                            // 42\n    isMain: false                                                                                                    // 43\n  };                                                                                                                 // 44\n}                                                                                                                    // 45\n                                                                                                                     // 46\n//////////////////////////////// GROUND DATABASE ///////////////////////////////                                     // 47\n                                                                                                                     // 48\n// XXX: This usage of minimax could be extended to letting the user add more                                         // 49\n// words to the dictionary - but its not without danger and should prop. trigger                                     // 50\n// some warning if no migration scheme is setup...                                                                   // 51\nvar MiniMaxDB = new MiniMax({                                                                                        // 52\n  // We add the most general words in databases                                                                      // 53\n dictionary: ['_id', 'createdAt', 'createdBy', 'updatedAt', 'updatedBy']                                             // 54\n});                                                                                                                  // 55\n                                                                                                                     // 56\nvar MiniMaxMethods = new MiniMax({                                                                                   // 57\n  // We add the most general words in databases                                                                      // 58\n  dictionary: ['method', 'args', 'options', 'wait', '_id']                                                           // 59\n});                                                                                                                  // 60\n                                                                                                                     // 61\n// Status of app reload                                                                                              // 62\nvar _isReloading = false;                                                                                            // 63\n                                                                                                                     // 64\n// Add a pointer register of grounded databases                                                                      // 65\nvar _groundDatabases = {};                                                                                           // 66\n                                                                                                                     // 67\nvar noop = function noop() {};                                                                                       // 68\n                                                                                                                     // 69\n// This function will add a emitter for the \"changed\" event                                                          // 70\nvar _addChangedEmitter = function _addChangedEmitter() {                                                             // 71\n  var self = this;                                                                                                   // 72\n  // Reactive deps for when data changes                                                                             // 73\n  var _dataChanged = new Tracker.Dependency();                                                                       // 74\n                                                                                                                     // 75\n  var _changeData = function _changeData() { _dataChanged.changed(); };                                              // 76\n                                                                                                                     // 77\n  Tracker.autorun(function _changeDataAutorun() {                                                                    // 78\n    // Depend on data change                                                                                         // 79\n    _dataChanged.depend();                                                                                           // 80\n    // Emit changed                                                                                                  // 81\n    self.collection.emit('changed');                                                                                 // 82\n  });                                                                                                                // 83\n                                                                                                                     // 84\n  // Observe all changes and rely on the less agressive observer system for                                          // 85\n  // providing a reasonable update frequens                                                                          // 86\n  self.collection.find().observe({                                                                                   // 87\n    'added': _changeData,                                                                                            // 88\n    'changed': _changeData,                                                                                          // 89\n    'removed': _changeData                                                                                           // 90\n  });                                                                                                                // 91\n};                                                                                                                   // 92\n                                                                                                                     // 93\n// Clean up the local data and align to the subscription                                                             // 94\nvar _cleanUpLocalData = function _cleanUpLocalData() {                                                               // 95\n  var self = this;                                                                                                   // 96\n  // Flag marking if the local data is cleaned up to match the subscription                                          // 97\n  self.isCleanedUp = false;                                                                                          // 98\n                                                                                                                     // 99\n  Tracker.autorun(function _cleanUpLocalDataAutorun(computation) {                                                   // 100\n    if (Ground.ready() && !self.isCleanedUp) {                                                                       // 101\n      // If all subscriptions have updated the system then remove all local only                                     // 102\n      // data?                                                                                                       // 103\n      // console.log('Clean up ' + self.name);                                                                       // 104\n      self.isCleanedUp = true;                                                                                       // 105\n      _removeLocalOnly.call(self);                                                                                   // 106\n                                                                                                                     // 107\n      // Stop this listener                                                                                          // 108\n      computation.stop();                                                                                            // 109\n    }                                                                                                                // 110\n  });                                                                                                                // 111\n};                                                                                                                   // 112\n                                                                                                                     // 113\n// Setup the syncronization of tabs                                                                                  // 114\nvar _setupTabSyncronizer = function _setupTabSyncronizer() {                                                         // 115\n  var self = this;                                                                                                   // 116\n  // We check to see if database sync is supported, if so we sync the database                                       // 117\n  // if data has changed in other tabs                                                                               // 118\n  if (typeof _syncDatabase === 'function') {                                                                         // 119\n                                                                                                                     // 120\n    // Listen for data changes                                                                                       // 121\n    self.storage.addListener('storage', function _setupTabSyncronizerListener() {                                    // 122\n                                                                                                                     // 123\n      // Database changed in another tab - sync this db                                                              // 124\n      _syncDatabase.call(self);                                                                                      // 125\n                                                                                                                     // 126\n    });                                                                                                              // 127\n                                                                                                                     // 128\n  }                                                                                                                  // 129\n};                                                                                                                   // 130\n                                                                                                                     // 131\n// Rig the change listener and make sure to store the data to local storage                                          // 132\nvar _setupDataStorageOnChange = function _setupDataStorageOnChange() {                                               // 133\n  var self = this;                                                                                                   // 134\n                                                                                                                     // 135\n  // Add listener, is triggered on data change                                                                       // 136\n  self.collection.addListener('changed', function _setupDataStorageOnChangeListener() {                              // 137\n                                                                                                                     // 138\n    // Store the database in store when ever theres a change                                                         // 139\n    // the _saveDatabase will throttle to optimize                                                                   // 140\n    _saveDatabase.call(self);                                                                                        // 141\n                                                                                                                     // 142\n  });                                                                                                                // 143\n};                                                                                                                   // 144\n                                                                                                                     // 145\n// This is the actual grounddb instance                                                                              // 146\nvar _groundDbConstructor = function _groundDbConstructor(collection, options) {                                      // 147\n  var self = this;                                                                                                   // 148\n                                                                                                                     // 149\n  // Check if user used the \"new\" keyword                                                                            // 150\n  if (!(self instanceof _groundDbConstructor)) {                                                                     // 151\n    throw new Error('_groundDbConstructor expects the use of the \"new\" keyword');                                    // 152\n  }                                                                                                                  // 153\n                                                                                                                     // 154\n  self.collection = collection;                                                                                      // 155\n                                                                                                                     // 156\n  // Set Ground.Collection prefix for localstorage                                                                   // 157\n  var _prefix = options && options.prefix || '';                                                                     // 158\n                                                                                                                     // 159\n  // Set helper to connection                                                                                        // 160\n  self.connection = collection._connection;                                                                          // 161\n                                                                                                                     // 162\n  // Set helper to minimongo collection                                                                              // 163\n  self._collection = collection._collection;                                                                         // 164\n                                                                                                                     // 165\n  // Is this an offline client only database?                                                                        // 166\n  self.offlineDatabase = (self.connection === null);                                                                 // 167\n                                                                                                                     // 168\n  // Initialize collection name                                                                                      // 169\n  // XXX: Using null as a name is a problem - only one may be called null                                            // 170\n  self.name = (collection._name)? collection._name : 'null';                                                         // 171\n                                                                                                                     // 172\n  /////// Finally got a name... and rigged                                                                           // 173\n                                                                                                                     // 174\n  // One timeout pointer for database saves                                                                          // 175\n  self._saveDatabaseTimeout = new OneTimeout(200);                                                                   // 176\n                                                                                                                     // 177\n  // Rig resume for this collection                                                                                  // 178\n  if (!self.offlineDatabase && options.resume !== false) {                                                           // 179\n                                                                                                                     // 180\n    Ground.methodResume([                                                                                            // 181\n      '/' + self.name + '/insert',                                                                                   // 182\n      '/' + self.name + '/remove',                                                                                   // 183\n      '/' + self.name + '/update'                                                                                    // 184\n    ], self.connection);                                                                                             // 185\n                                                                                                                     // 186\n  }                                                                                                                  // 187\n                                                                                                                     // 188\n  // Get the best storage available                                                                                  // 189\n  self.storage = Store.create({                                                                                      // 190\n    // We allow the user to set a prefix for the storage. Its mainly ment for                                        // 191\n    // testing purposes, since the prefixing allows the tests to simulate more                                       // 192\n    // complex scenarios                                                                                             // 193\n    name: _prefix + self.name,                                                                                       // 194\n    // Default version is 1.0 - if different from the one in storage record it                                       // 195\n    // would trigger a migration                                                                                     // 196\n    version: options.version ||Â 1.1,                                                                                 // 197\n    // migration can be set to overwrite the default behaviour on the storage.                                       // 198\n    // the options.migration should be a function(oldRecord, newRecord)                                              // 199\n    // one can compare the oldRecord.version and the new version to ensure                                           // 200\n    // correct migration steps.                                                                                      // 201\n    // That said the default behaviour simply clears the storage.                                                    // 202\n    migration: options.migration                                                                                     // 203\n  });                                                                                                                // 204\n                                                                                                                     // 205\n  // Rig an event handler on Meteor.Collection                                                                       // 206\n  collection.eventemitter = new EventEmitter();                                                                      // 207\n                                                                                                                     // 208\n  // Add to pointer register                                                                                         // 209\n  // XXX: should we throw an error if already found?                                                                 // 210\n  // Store.create will prop. throw an error before...                                                                // 211\n  _groundDatabases[ self.name ] = self;                                                                              // 212\n                                                                                                                     // 213\n  // We have to allow the minimongo collection to contain data before                                                // 214\n  // subscriptions are ready                                                                                         // 215\n  _hackMeteorUpdate.call(self);                                                                                      // 216\n                                                                                                                     // 217\n  // Flag true/false depending if database is loaded from local                                                      // 218\n  self._databaseLoaded = false;                                                                                      // 219\n                                                                                                                     // 220\n  // Map local-only - this makes sure that localstorage matches remote loaded db                                     // 221\n  self._localOnly = {};                                                                                              // 222\n                                                                                                                     // 223\n  // Clean up the database and align to subscription - we dont do this for                                           // 224\n  // pure offline databases                                                                                          // 225\n  if (options.cleanupLocalData && !self.offlineDatabase) {                                                           // 226\n    _cleanUpLocalData.call(self);                                                                                    // 227\n  }                                                                                                                  // 228\n                                                                                                                     // 229\n  // Add api for Clean up local only data                                                                            // 230\n  self.collection.removeLocalOnly = function removeLocalOnly() {                                                     // 231\n    self.isCleanedUp = true;                                                                                         // 232\n    _removeLocalOnly.call(self);                                                                                     // 233\n  };                                                                                                                 // 234\n                                                                                                                     // 235\n  self.collection.clear = function clear(callback) {                                                                 // 236\n                                                                                                                     // 237\n    if (typeof callback !== 'function') { callback = noop; }                                                         // 238\n                                                                                                                     // 239\n    // Clean storage                                                                                                 // 240\n    self.storage.clear(callback);                                                                                    // 241\n                                                                                                                     // 242\n    // Empty collection                                                                                              // 243\n    self._collection.remove({});                                                                                     // 244\n    // // Set empty map                                                                                              // 245\n    // _groundUtil.setDatabaseMap(self, {});                                                                         // 246\n                                                                                                                     // 247\n    // // Invalidate the database                                                                                    // 248\n    // _groundUtil.invalidateDb(self);                                                                               // 249\n  };                                                                                                                 // 250\n                                                                                                                     // 251\n  // Add the emitter of \"changed\" events                                                                             // 252\n  _addChangedEmitter.call(self);                                                                                     // 253\n                                                                                                                     // 254\n  // The data changes should be stored in storage                                                                    // 255\n  _setupDataStorageOnChange.call(self);                                                                              // 256\n                                                                                                                     // 257\n  // Load the database as soon as possible                                                                           // 258\n  _loadDatabase.call(self);                                                                                          // 259\n                                                                                                                     // 260\n  // Add tab syncronizer                                                                                             // 261\n  _setupTabSyncronizer.call(self);                                                                                   // 262\n                                                                                                                     // 263\n};                                                                                                                   // 264\n                                                                                                                     // 265\n// Global helper for applying grounddb on a collection                                                               // 266\nGround.Collection = function groundCollection(name, options) {                                                       // 267\n  var self;                                                                                                          // 268\n                                                                                                                     // 269\n  // Inheritance Meteor Collection can be set by options.collection                                                  // 270\n  // Accepts smart collections by Arunoda Susiripala                                                                 // 271\n  // Check if user used the \"new\" keyword                                                                            // 272\n                                                                                                                     // 273\n                                                                                                                     // 274\n  // Make sure we got some options                                                                                   // 275\n  options = _.extend({                                                                                               // 276\n    // By default local data is cleaned up when all subscriptions are ready                                          // 277\n    // but thats not what we would do always                                                                         // 278\n    cleanupLocalData: true                                                                                           // 279\n  }, options);                                                                                                       // 280\n                                                                                                                     // 281\n  // Either name is a Meteor collection or we create a new Meteor collection                                         // 282\n  if (name instanceof _groundUtil.Collection) {                                                                      // 283\n    self = name;                                                                                                     // 284\n  } else {                                                                                                           // 285\n    self = new _groundUtil.Collection(name, options);                                                                // 286\n  }                                                                                                                  // 287\n                                                                                                                     // 288\n  // Throw an error if something went wrong                                                                          // 289\n  if (!(self instanceof _groundUtil.Collection)) {                                                                   // 290\n    throw new Error('Ground.Collection expected a Mongo.Collection');                                                // 291\n  }                                                                                                                  // 292\n                                                                                                                     // 293\n  // Add grounddb to the collection, circular reference since self is                                                // 294\n  // grounddb.collection                                                                                             // 295\n  self.grounddb = new _groundDbConstructor(self, options);                                                           // 296\n                                                                                                                     // 297\n  // Return grounded collection - We dont return this eg if it was an instance                                       // 298\n  // of Ground.Collection                                                                                            // 299\n  return self;                                                                                                       // 300\n};                                                                                                                   // 301\n                                                                                                                     // 302\n////////////////////////////////////////////////////////////////////////////////                                     // 303\n// Private Methods                                                                                                   // 304\n////////////////////////////////////////////////////////////////////////////////                                     // 305\n                                                                                                                     // 306\n/*                                                                                                                   // 307\n                                                                                                                     // 308\nTODO: Implement conflict resoultion                                                                                  // 309\n                                                                                                                     // 310\nThe _hackMeteorUpdate should be modified to resolve conflicts via default or                                         // 311\ncustom conflict handler.                                                                                             // 312\n                                                                                                                     // 313\nThe first thing we have to do is to solve the \"remove\" operation - Its quite                                         // 314\ntricky and there are a couple of patterns we could follow:                                                           // 315\n                                                                                                                     // 316\n1. Create a register for removed docs - but how long should we store this data?                                      // 317\n2. Stop the real remove, add a removedAt serverStamp in an empty doc instead                                         // 318\n3. Find a way to get a removedAt timestamp in another way                                                            // 319\n                                                                                                                     // 320\nSo we cant trust that having the data at the server makes everything ok,                                             // 321\n                                                                                                                     // 322\n---                                                                                                                  // 323\nThe scenario or question to answer is:                                                                               // 324\n                                                                                                                     // 325\nclientA creates a document and goes offline                                                                          // 326\nclientB removes the document                                                                                         // 327\nafter a day, a month or years?:                                                                                      // 328\nclientA edits the document and goes online                                                                           // 329\n                                                                                                                     // 330\nSo what should happen?                                                                                               // 331\n---                                                                                                                  // 332\n                                                                                                                     // 333\nIf we want the newest change to win, then the document should be restored                                            // 334\n                                                                                                                     // 335\nIf clientA and clientB is the same user we would assume they kinda know what                                         // 336\nthey are doing, but if you edit the docuemnt after you removed it - it seems                                         // 337\nlike an user error removing the document.                                                                            // 338\n                                                                                                                     // 339\nBut now time comes into play, if it was 6 month ago the user removed the document,                                   // 340\nand now edits it offline then going online would still restore the document?                                         // 341\nThis raises the question of how long time should we store details about removed                                      // 342\ndocuments... and where?                                                                                              // 343\n                                                                                                                     // 344\nShould destructive actions be comprimised, rather dont remove?                                                       // 345\n                                                                                                                     // 346\nNow if the user updates a document - should we try to merge the data, sometimes                                      // 347\nyes, sometimes no.                                                                                                   // 348\n                                                                                                                     // 349\nNever the less - this is an example of the power a custom conflict handler                                           // 350\nshould have. So the task is to provide the tooling and data for the conflict                                         // 351\nhandlers.                                                                                                            // 352\n                                                                                                                     // 353\nA conflict handler is really a question about strategy, how the app should                                           // 354\nact in the situation. This is why we are going to have the client-side do this                                       // 355\nwork - I mean we could have a strategy for letting the user decide what should                                       // 356\nhappen.                                                                                                              // 357\n                                                                                                                     // 358\nThe conflict handler should be provided the localVersion and remoteVersion,                                          // 359\nit should then return the winning result - might be in a callback allowing                                           // 360\nsync + async behaviours?                                                                                             // 361\n                                                                                                                     // 362\nSo this is focused on servertime stamps - but the interesting thing here could                                       // 363\nalso be the focus on versions instead. Much like OT and github does.                                                 // 364\n                                                                                                                     // 365\nBut OT will prop. only make sense when all online?                                                                   // 366\n                                                                                                                     // 367\n---                                                                                                                  // 368\n                                                                                                                     // 369\nShould it be the server that handles conflicts? All the data is available there                                      // 370\nwe cant be sure about subscriptions + we could have OT records for each collection                                   // 371\nCreating a conflict resoultion package could be isolated and would work on all                                       // 372\ncollections - grounded or not...                                                                                     // 373\n                                                                                                                     // 374\nWe could wait until OT is supported in core?                                                                         // 375\n                                                                                                                     // 376\n*/                                                                                                                   // 377\nvar _hackMeteorUpdate = function _hackMeteorUpdate() {                                                               // 378\n  var self = this;                                                                                                   // 379\n                                                                                                                     // 380\n  // Super container                                                                                                 // 381\n  var _super;                                                                                                        // 382\n                                                                                                                     // 383\n  // Overwrite the store update                                                                                      // 384\n  if (self.connection && self.connection._stores[ self.name ]) {                                                     // 385\n    // Set super                                                                                                     // 386\n    _super = self.connection._stores[ self.name ].update;                                                            // 387\n    // Overwrite                                                                                                     // 388\n    self.connection._stores[ self.name ].update = function groundUpdate(msg) {                                       // 389\n      // console.log('GOT UPDATE');                                                                                  // 390\n      var mongoId = msg.id && _groundUtil.idParse(msg.id);                                                           // 391\n      var doc = msg.id && self._collection.findOne(mongoId);                                                         // 392\n      // We check that local loaded docs are removed before remote sync                                              // 393\n      // otherwise it would throw an error                                                                           // 394\n        // When adding and doc allready found then we remove it                                                      // 395\n      if (msg.msg === 'added' && doc) {                                                                              // 396\n          // We mark the data as remotely loaded TODO:                                                               // 397\n          delete self._localOnly[mongoId];                                                                           // 398\n          // Solve the conflict - server wins                                                                        // 399\n          // Then remove the client document                                                                         // 400\n          self._collection.remove(mongoId);                                                                          // 401\n      }                                                                                                              // 402\n      // If message wants to remove the doc but allready removed locally then                                        // 403\n      // fix this before calling super                                                                               // 404\n      if (msg.msg === 'removed' && !doc) {                                                                           // 405\n        self._collection.insert({_id: mongoId});                                                                     // 406\n      }                                                                                                              // 407\n      // Call super and let it do its thing                                                                          // 408\n      _super(msg);                                                                                                   // 409\n    };                                                                                                               // 410\n  }                                                                                                                  // 411\n};                                                                                                                   // 412\n                                                                                                                     // 413\n                                                                                                                     // 414\n// We dont trust the localstorage so we make sure it doesn't contain                                                 // 415\n// duplicated id's - primary a problem i FF                                                                          // 416\nvar _checkDocs = function _checkDocs(a) {                                                                            // 417\n  var c = {};                                                                                                        // 418\n  // // We create c as an object with no duplicate _id's                                                             // 419\n  // for (var i = 0, keys = Object.keys(a); i < keys.length; i++) {                                                  // 420\n  //   // Extract key/value                                                                                          // 421\n  //   var key = keys[i];                                                                                            // 422\n  //   var doc = a[key];                                                                                             // 423\n  //   // set value in c                                                                                             // 424\n  //   c[key] = doc;                                                                                                 // 425\n  // }                                                                                                               // 426\n                                                                                                                     // 427\n  _groundUtil.each(a, function iterateDoc(doc, key) {                                                                // 428\n    c[key] = doc;                                                                                                    // 429\n  });                                                                                                                // 430\n  return c;                                                                                                          // 431\n};                                                                                                                   // 432\n                                                                                                                     // 433\n// At some point we can do a remove all local-only data? Making sure that we                                         // 434\n// Only got the same data as the subscription                                                                        // 435\nvar _removeLocalOnly = function _removeLocalOnly() {                                                                 // 436\n  var self = this;                                                                                                   // 437\n                                                                                                                     // 438\n  _groundUtil.each(self._localOnly, function _loadDatabaseEach(isLocalOnly, id) {                                    // 439\n    if (isLocalOnly) {                                                                                               // 440\n      self._collection.remove({ _id: id });                                                                          // 441\n      delete self._localOnly[id];                                                                                    // 442\n    }                                                                                                                // 443\n  });                                                                                                                // 444\n};                                                                                                                   // 445\n                                                                                                                     // 446\n// Bulk Load database from local to memory                                                                           // 447\nvar _loadDatabase = function _loadDatabase() {                                                                       // 448\n  var self = this;                                                                                                   // 449\n  // Then load the docs into minimongo                                                                               // 450\n                                                                                                                     // 451\n  // Emit event                                                                                                      // 452\n  self.collection.emit('resume', { type: 'database' });                                                              // 453\n  Ground.emit('resume', { type: 'database', collection: self.name });                                                // 454\n                                                                                                                     // 455\n  // Load object from localstorage                                                                                   // 456\n  self.storage.getItem('data', function storageGetItem(err, data) {                                                  // 457\n    if (!err) {                                                                                                      // 458\n                                                                                                                     // 459\n      self.collection.emit('resumed', { type: 'database', data: data });                                             // 460\n      Ground.emit('resumed', { type: 'database', collection: self.name });                                           // 461\n                                                                                                                     // 462\n      // Maxify the data                                                                                             // 463\n      var docs = data && MiniMaxDB.maxify(data) || {};                                                               // 464\n                                                                                                                     // 465\n      // Initialize client documents                                                                                 // 466\n      Kernel                                                                                                         // 467\n      .each(_checkDocs.call(self, docs || {} ), function kernelEach(doc) {                                           // 468\n        // Test if document allready exists, this is a rare case but accounts                                        // 469\n        // sometimes adds data to the users database, eg. if \"users\" are grounded                                    // 470\n        var exists = self._collection.findOne(doc._id);                                                              // 471\n        // If collection is populated before we get started then the data in                                         // 472\n        // memory would be considered latest therefor we dont load from local                                        // 473\n        if (!exists) {                                                                                               // 474\n          if (!self.offlineDatabase) {                                                                               // 475\n            // If online database then mark the doc as local only TODO:                                              // 476\n            self._localOnly[doc._id] = true;                                                                         // 477\n          }                                                                                                          // 478\n          self._collection.insert(doc);                                                                              // 479\n        }                                                                                                            // 480\n      })                                                                                                             // 481\n      .then(function afterKernelEach() {                                                                             // 482\n        // Setting database loaded, this allows minimongo to be saved into local                                     // 483\n        self._databaseLoaded = true;                                                                                 // 484\n      });                                                                                                            // 485\n                                                                                                                     // 486\n    }                                                                                                                // 487\n                                                                                                                     // 488\n  });                                                                                                                // 489\n};                                                                                                                   // 490\n                                                                                                                     // 491\n// Bulk Save database from memory to local, meant to be as slim, fast and                                            // 492\n// realiable as possible                                                                                             // 493\nvar _saveDatabase = function _saveDatabase() {                                                                       // 494\n  var self = this;                                                                                                   // 495\n  // If data loaded from localstorage then its ok to save - otherwise we                                             // 496\n  // would override with less data                                                                                   // 497\n  if (self._databaseLoaded && _isReloading === false) {                                                              // 498\n    self._saveDatabaseTimeout(function _saveDatabaseTimeout() {                                                      // 499\n      // We delay the operation a bit in case of multiple saves - this creates                                       // 500\n      // a minor lag in terms of localstorage updating but it limits the num                                         // 501\n      // of saves to the database                                                                                    // 502\n      // Make sure our database is loaded                                                                            // 503\n      self.collection.emit('cache', { type: 'database' });                                                           // 504\n      Ground.emit('cache', { type: 'database', collection: self.name });                                             // 505\n      var minifiedDb = MiniMaxDB.minify(_groundUtil.getDatabaseMap(self));                                           // 506\n      // Save the collection into localstorage                                                                       // 507\n      self.storage.setItem('data', minifiedDb, function storageCache(err) {                                          // 508\n        // Emit feedback                                                                                             // 509\n        if (err) {                                                                                                   // 510\n          // Emit error                                                                                              // 511\n          self.collection.emit('error', { error: err });                                                             // 512\n          Ground.emit('error', { collection: self.name, error: err });                                               // 513\n        } else {                                                                                                     // 514\n          // Emit cached event                                                                                       // 515\n          self.collection.emit('cached', { type: 'database', data: minifiedDb });                                    // 516\n          Ground.emit('cached', { type: 'database', collection: self.name });                                        // 517\n        }                                                                                                            // 518\n      });                                                                                                            // 519\n                                                                                                                     // 520\n    });                                                                                                              // 521\n  }                                                                                                                  // 522\n};                                                                                                                   // 523\n                                                                                                                     // 524\n                                                                                                                     // 525\n// Reactive variable containing a boolean flag, true == all subscriptions have                                       // 526\n// been loaded                                                                                                       // 527\n// XXX: this should be a bit more finegrained eg. pr. collection, but thats not                                      // 528\n// possible yet                                                                                                      // 529\nGround.ready = _groundUtil.allSubscriptionsReady;                                                                    // 530\n                                                                                                                     // 531\nGround.lookup = function groundLookup(collectionName) {                                                              // 532\n  return _groundDatabases[collectionName];                                                                           // 533\n};                                                                                                                   // 534\n                                                                                                                     // 535\nvar _allowMethodResumeMap = {};                                                                                      // 536\nvar _methodResumeConnections = [];                                                                                   // 537\n                                                                                                                     // 538\nvar addConnectionToResume = function addConnectionToResume(connection) {                                             // 539\n  if (_methodResumeConnections.indexOf(connection) < 0) {                                                            // 540\n    _methodResumeConnections.push(connection);                                                                       // 541\n  }                                                                                                                  // 542\n};                                                                                                                   // 543\n                                                                                                                     // 544\nGround.methodResume = function methodResume(names, connection) {                                                     // 545\n  // Allow string or array of strings                                                                                // 546\n  if (names === ''+names) {                                                                                          // 547\n    names = [names];                                                                                                 // 548\n  }                                                                                                                  // 549\n                                                                                                                     // 550\n  // Default to the default connection...                                                                            // 551\n  connection = connection || _groundUtil.connection;                                                                 // 552\n                                                                                                                     // 553\n  // This index comes in handy when we use getMethodList                                                             // 554\n  addConnectionToResume(connection);                                                                                 // 555\n                                                                                                                     // 556\n  // Add methods to resume                                                                                           // 557\n  _groundUtil.each(names, function(name) {                                                                           // 558\n    _allowMethodResumeMap[name] = connection;                                                                        // 559\n  });                                                                                                                // 560\n  // console.log(_allowMethodResumeMap);                                                                             // 561\n};                                                                                                                   // 562\n                                                                                                                     // 563\n// Add settings for methods to skip or not when caching methods                                                      // 564\nGround.skipMethods = function skipMethods() {                                                                        // 565\n  throw new Error('Ground.skipMethods is deprecated, use Ground.methodResume instead');                              // 566\n};                                                                                                                   // 567\n                                                                                                                     // 568\nGround.OneTimeout = OneTimeout;                                                                                      // 569\n                                                                                                                     // 570\n///////////////////////////// RESUME METHODS ///////////////////////////////////                                     // 571\n                                                                                                                     // 572\n// Is methods resumed?                                                                                               // 573\nvar _methodsResumed = false;                                                                                         // 574\nvar _methodsResumedDeps = new Tracker.Dependency();                                                                  // 575\n                                                                                                                     // 576\n                                                                                                                     // 577\nGround.isResumed = function isResumed() {                                                                            // 578\n  _methodsResumedDeps.depend();                                                                                      // 579\n  return _methodsResumed;                                                                                            // 580\n};                                                                                                                   // 581\n                                                                                                                     // 582\n// Get a nice array of current methods                                                                               // 583\nvar _getMethodsList = function _getMethodsList() {                                                                   // 584\n  // Array of outstanding methods                                                                                    // 585\n  var methods = [];                                                                                                  // 586\n  // Made a public API to disallow caching of some method calls                                                      // 587\n  // Convert the data into nice array                                                                                // 588\n                                                                                                                     // 589\n  // We iterate over the connections that have resumable methods                                                     // 590\n  _groundUtil.each(_methodResumeConnections, function resumeEachConnection(connection) {                             // 591\n    // We run through the method invokers                                                                            // 592\n    _groundUtil.each(connection._methodInvokers, function resumeEachInvoker(method) {                                // 593\n      // Get the method name                                                                                         // 594\n      var name = method._message.method;                                                                             // 595\n      // Check that this method is resumeable and on the correct connection                                          // 596\n      if (_allowMethodResumeMap[name] === connection) {                                                              // 597\n        // Push the method                                                                                           // 598\n        methods.push({                                                                                               // 599\n          // Format the data                                                                                         // 600\n          method: name,                                                                                              // 601\n          args: method._message.params,                                                                              // 602\n          options: { wait: method._wait }                                                                            // 603\n        });                                                                                                          // 604\n                                                                                                                     // 605\n      }                                                                                                              // 606\n                                                                                                                     // 607\n    });                                                                                                              // 608\n  });                                                                                                                // 609\n                                                                                                                     // 610\n  return methods;                                                                                                    // 611\n};                                                                                                                   // 612\n                                                                                                                     // 613\n// Flush in memory methods, its a dirty trick and could have some edge cases                                         // 614\n// that would throw an error? Eg. if flushed in the middle of waiting for                                            // 615\n// a method call to return - the returning call would not be able to find the                                        // 616\n// method callback. This could happen if the user submits a change in one window                                     // 617\n// and then switches to another tab and submits a change there before the first                                      // 618\n// method gets back?                                                                                                 // 619\nvar _flushInMemoryMethods = function _flushInMemoryMethods() {                                                       // 620\n  var didFlushSome = false;                                                                                          // 621\n  // TODO: flush should be rewritten to - we should do method proxy stuff...                                         // 622\n  // This code is a bit dirty                                                                                        // 623\n  if (_groundUtil.connection && _groundUtil.connection._outstandingMethodBlocks &&                                   // 624\n          _groundUtil.connection._outstandingMethodBlocks.length) {                                                  // 625\n                                                                                                                     // 626\n    // Clear the in memory outstanding methods TODO: Check if this is enough                                         // 627\n    // Check to see if we should skip methods                                                                        // 628\n    for (var i = 0; i < _groundUtil.connection._outstandingMethodBlocks.length; i++) {                               // 629\n      var method = _groundUtil.connection._outstandingMethodBlocks[i];                                               // 630\n      if (method && method._message && _allowMethodResumeMap[method._message.method]) {                              // 631\n        // Clear invoke callbacks                                                                                    // 632\n//    _groundUtil.connection._outstandingMethodBlocks = [];                                                          // 633\n        delete _groundUtil.connection._outstandingMethodBlocks[i];                                                   // 634\n//    _groundUtil.connection._methodInvokers = {};                                                                   // 635\n        delete _groundUtil.connection._methodInvokers[i];                                                            // 636\n        // Set the flag to call back                                                                                 // 637\n        didFlushSome = true;                                                                                         // 638\n      }                                                                                                              // 639\n    }                                                                                                                // 640\n    if (didFlushSome) {                                                                                              // 641\n      // Call the event callback                                                                                     // 642\n      Ground.emit('flush', { type: 'methods' });                                                                     // 643\n    }                                                                                                                // 644\n                                                                                                                     // 645\n  }                                                                                                                  // 646\n};                                                                                                                   // 647\n                                                                                                                     // 648\n// Extract only newly added methods from localstorage                                                                // 649\nvar _getMethodUpdates = function _getMethodUpdates(newMethods) {                                                     // 650\n  var result = [];                                                                                                   // 651\n  if (newMethods && newMethods.length > 0) {                                                                         // 652\n    // Get the old methods allready in memory                                                                        // 653\n    // We could have done an optimized slice version or just starting at                                             // 654\n    // oldMethods.length, but this tab is not in focus                                                               // 655\n    var oldMethods = _getMethodsList();                                                                              // 656\n    // We do a check to see if we should flush our in memory methods if allready                                     // 657\n    // run on an other tab - an odd case - the first item would not match in                                         // 658\n    // old methods and new methods, its only valid to make this test if both                                         // 659\n    // methods arrays are not empty allready                                                                         // 660\n    if (oldMethods.length &&                                                                                         // 661\n            EJSON.stringify(oldMethods[0]) !== EJSON.stringify(newMethods[0])) {                                     // 662\n      // Flush the in memory / queue methods                                                                         // 663\n      _flushInMemoryMethods();                                                                                       // 664\n      // We reset the oldMethods array of outstanding methods                                                        // 665\n      oldMethods = [];                                                                                               // 666\n    }                                                                                                                // 667\n    // Iterate over the new methods, old ones should be ordered in beginning of                                      // 668\n    // newMethods we do a simple test an throw an error if thats not the case                                        // 669\n    for (var i=0; i < newMethods.length; i++) {                                                                      // 670\n                                                                                                                     // 671\n      if (i < oldMethods.length) {                                                                                   // 672\n        // Do a hard slow test to make sure all is in sync                                                           // 673\n        if (EJSON.stringify(oldMethods[i]) !== EJSON.stringify(newMethods[i])) {                                     // 674\n          // The client data is corrupted, throw error or force the client to                                        // 675\n          // reload, does not make sense to continue?                                                                // 676\n          throw new Error('The method database is corrupted or out of sync at position: ' + i);                      // 677\n        }                                                                                                            // 678\n      } else {                                                                                                       // 679\n        // Ok out of oldMethods this is a new method call                                                            // 680\n        result.push(newMethods[i]);                                                                                  // 681\n                                                                                                                     // 682\n        Ground.emit('methodcall', newMethods[i]);                                                                    // 683\n      }                                                                                                              // 684\n    } // EO for iteration                                                                                            // 685\n                                                                                                                     // 686\n  } else {                                                                                                           // 687\n    // If new methods are empty this means that the other client / tap has                                           // 688\n    // Allready sendt and recieved the method calls - so we flush our in mem                                         // 689\n    // Flush the in memory / queue methods                                                                           // 690\n    _flushInMemoryMethods();                                                                                         // 691\n  }                                                                                                                  // 692\n                                                                                                                     // 693\n  // return the result                                                                                               // 694\n  return result;                                                                                                     // 695\n};                                                                                                                   // 696\n                                                                                                                     // 697\n///////////////////////////// LOAD & SAVE METHODS //////////////////////////////                                     // 698\n// Create the storage for methods                                                                                    // 699\nvar _methodsStorage = Store.create({                                                                                 // 700\n  name: '_methods_',                                                                                                 // 701\n  version: 1.1                                                                                                       // 702\n});                                                                                                                  // 703\n                                                                                                                     // 704\nvar _sendMethod = function _sendMethod(method, connection) {                                                         // 705\n  // Send a log message first to the test                                                                            // 706\n  test.log('SEND', JSON.stringify(method));                                                                          // 707\n                                                                                                                     // 708\n  if (test.isMain) {                                                                                                 // 709\n    console.warn('Main test should not send methods...');                                                            // 710\n  }                                                                                                                  // 711\n                                                                                                                     // 712\n  connection.apply(                                                                                                  // 713\n    method.method, method.args, method.options, function resumeMethodCallback(err, result) {                         // 714\n      // We cant fix the missing callbacks made at runtime the                                                       // 715\n      // last time the app ran. But we can emit data                                                                 // 716\n                                                                                                                     // 717\n      if (err) {                                                                                                     // 718\n        test.log('RETURNED ERROR', JSON.stringify(method), err.message);                                             // 719\n      } else {                                                                                                       // 720\n        test.log('RETURNED METHOD', JSON.stringify(method));                                                         // 721\n      }                                                                                                              // 722\n                                                                                                                     // 723\n      // Emit the data we got back here                                                                              // 724\n      Ground.emit('method', { method: method, error: err, result: result });                                         // 725\n    }                                                                                                                // 726\n  );                                                                                                                 // 727\n};                                                                                                                   // 728\n                                                                                                                     // 729\nvar waitingMethods = [];                                                                                             // 730\n                                                                                                                     // 731\n// We may end in a situation where things have changed eg. if collections are                                        // 732\n// renamed or left out in the app. We make sure that ground db will try 5 time                                       // 733\n// times and then have the missing methods die.                                                                      // 734\n// The correct thing in the future would prop. be to have the conflict resolution                                    // 735\n// create patch calls instead of resume.                                                                             // 736\nvar resumeAttemptsLeft = 5;                                                                                          // 737\n                                                                                                                     // 738\nvar resumeWaitingMethods = function resumeWaitingMethods() {                                                         // 739\n  var missing = [];                                                                                                  // 740\n                                                                                                                     // 741\n  resumeAttemptsLeft--;                                                                                              // 742\n                                                                                                                     // 743\n  // Resume each method                                                                                              // 744\n  _groundUtil.each(waitingMethods, function eachWaitingMethods(method) {                                             // 745\n    if (method) {                                                                                                    // 746\n                                                                                                                     // 747\n      // name helper for the method                                                                                  // 748\n      var name = method.method;                                                                                      // 749\n                                                                                                                     // 750\n      if (name) {                                                                                                    // 751\n                                                                                                                     // 752\n        test.log('RESUME', 'Load method \"' + name + '\"');                                                            // 753\n        // Get the connection from the allow method resume                                                           // 754\n        var methodConnection = _allowMethodResumeMap[name];                                                          // 755\n        // Run it in fenced mode since the changes have already been applied                                         // 756\n        // locally                                                                                                   // 757\n        if (methodConnection) {                                                                                      // 758\n                                                                                                                     // 759\n          _groundUtil.connection.stubFence(name, function runFencedMethod() {                                        // 760\n            // Add method to connection                                                                              // 761\n            _sendMethod(method, methodConnection);                                                                   // 762\n          });                                                                                                        // 763\n                                                                                                                     // 764\n        } else {                                                                                                     // 765\n          // XXX: make sure we keep order                                                                            // 766\n          // TODO: Check if we should use push or unshift                                                            // 767\n          missing.push(method);                                                                                      // 768\n          test.log('RESUME', 'Missing method \"' + name + '\" - retry later');                                         // 769\n          console.warn('Ground method resume: Cannot resume \"' + name + '\" connection not rigged yet, retry later'); // 770\n        }                                                                                                            // 771\n                                                                                                                     // 772\n      }                                                                                                              // 773\n                                                                                                                     // 774\n    }                                                                                                                // 775\n  });                                                                                                                // 776\n                                                                                                                     // 777\n  // Keep track of missing methods                                                                                   // 778\n  waitingMethods = missing;                                                                                          // 779\n                                                                                                                     // 780\n  // If no waiting methods - then we must be done?                                                                   // 781\n  if (!_methodsResumed && !waitingMethods.length || !resumeAttemptsLeft) {                                           // 782\n    // Methods have resumed                                                                                          // 783\n    _methodsResumed = true;                                                                                          // 784\n    _methodsResumedDeps.changed();                                                                                   // 785\n  }                                                                                                                  // 786\n                                                                                                                     // 787\n};                                                                                                                   // 788\n                                                                                                                     // 789\n                                                                                                                     // 790\nvar loadMissingMethods = function loadMissingMethods(callback) {                                                     // 791\n  _methodsStorage.getItem('methods', function storageLoadMissingMethods(err, data) {                                 // 792\n    test.log('RESUME', 'methods loaded into memory');                                                                // 793\n    if (err) {                                                                                                       // 794\n      // XXX:                                                                                                        // 795\n      callback(err);                                                                                                 // 796\n    } else if (data) {                                                                                               // 797\n      // Maxify the data from storage                                                                                // 798\n      // We are only going to submit the diff                                                                        // 799\n      // Set missing methods                                                                                         // 800\n      waitingMethods = _getMethodUpdates(MiniMaxMethods.maxify(data));                                               // 801\n    }                                                                                                                // 802\n                                                                                                                     // 803\n    callback();                                                                                                      // 804\n  });                                                                                                                // 805\n};                                                                                                                   // 806\n                                                                                                                     // 807\n// load methods from localstorage and resume the methods                                                             // 808\nvar _loadMethods = function _loadMethods() {                                                                         // 809\n                                                                                                                     // 810\n  loadMissingMethods(function loadMissingMethods(err) {                                                              // 811\n    if (err) {                                                                                                       // 812\n      test.log('RESUME', 'Could not load missing methods into memory', err);                                         // 813\n    } else {                                                                                                         // 814\n                                                                                                                     // 815\n      // Try to resume missing methods now                                                                           // 816\n      resumeWaitingMethods();                                                                                        // 817\n                                                                                                                     // 818\n      // If not all methods are resumed then try until success                                                       // 819\n      if (!_methodsResumed) {                                                                                        // 820\n                                                                                                                     // 821\n        var interval = Meteor.setInterval(function loadMissingMethodsInterval() {                                    // 822\n          // Try to resume missing methods                                                                           // 823\n          resumeWaitingMethods();                                                                                    // 824\n                                                                                                                     // 825\n          // If methods are resumed then stop this                                                                   // 826\n          if (_methodsResumed) {                                                                                     // 827\n            Meteor.clearInterval(interval);                                                                          // 828\n          }                                                                                                          // 829\n        }, 1000);                                                                                                    // 830\n                                                                                                                     // 831\n      }                                                                                                              // 832\n                                                                                                                     // 833\n    }                                                                                                                // 834\n  });                                                                                                                // 835\n                                                                                                                     // 836\n}; // EO load methods                                                                                                // 837\n                                                                                                                     // 838\n// Save the methods into the localstorage                                                                            // 839\nvar _saveMethods = function _saveMethods() {                                                                         // 840\n  if (_methodsResumed) {                                                                                             // 841\n                                                                                                                     // 842\n    // Ok memory is initialized                                                                                      // 843\n    Ground.emit('cache', { type: 'methods' });                                                                       // 844\n                                                                                                                     // 845\n    // Save outstanding methods to localstorage                                                                      // 846\n    var methods = _getMethodsList();                                                                                 // 847\n//test.log('SAVE METHODS', JSON.stringify(methods));                                                                 // 848\n    _methodsStorage.setItem('methods', MiniMaxMethods.minify(methods), function storage_saveMethods() {              // 849\n      // XXX:                                                                                                        // 850\n    });                                                                                                              // 851\n                                                                                                                     // 852\n  }                                                                                                                  // 853\n};                                                                                                                   // 854\n                                                                                                                     // 855\n//////////////////////////// STARTUP METHODS RESUME ////////////////////////////                                     // 856\n                                                                                                                     // 857\nMeteor.startup(function startupMethodResume() {                                                                      // 858\n  // Wait some not to conflict with accouts login                                                                    // 859\n  // TODO: Do we have a better way, instead of depending on time should depend                                       // 860\n  // on en event.                                                                                                    // 861\n  Meteor.setTimeout(function loadMethods() {                                                                         // 862\n    test.log('INIT LOAD METHODS');                                                                                   // 863\n    _loadMethods();                                                                                                  // 864\n  }, 500);                                                                                                           // 865\n});                                                                                                                  // 866\n                                                                                                                     // 867\n/////////////////////////// SYNC TABS METHODS DATABSE //////////////////////////                                     // 868\n                                                                                                                     // 869\nvar syncDatabaseTimeout = new OneTimeout(150);                                                                       // 870\n                                                                                                                     // 871\n// Offline client only databases will sync a bit different than normal                                               // 872\n// This function is a bit hard - but it works - optimal solution could be to                                         // 873\n// have virtual method calls it would complicate things                                                              // 874\nvar _syncDatabase = function _syncDatabase() {                                                                       // 875\n  var self = this;                                                                                                   // 876\n  // We set a small delay in case of more updates within the wait                                                    // 877\n  syncDatabaseTimeout(function syncDatabaseTimeout() {                                                               // 878\n//    if (self && (self.offlineDatabase === true || !Meteor.status().connected)) {                                   // 879\n    if (self) {                                                                                                      // 880\n      // Add event hook                                                                                              // 881\n      self.collection.emit('sync');                                                                                  // 882\n      Ground.emit('sync', { type: 'database', collection: self.name });                                              // 883\n      // Hard reset database?                                                                                        // 884\n      self.storage.getItem('data', function storageSyncFetch(err, data) {                                            // 885\n        if (err) {                                                                                                   // 886\n          //                                                                                                         // 887\n          throw err;                                                                                                 // 888\n        } else {                                                                                                     // 889\n          // Get the data back in size                                                                               // 890\n          var newDocs = MiniMaxDB.maxify(data) || {};                                                                // 891\n                                                                                                                     // 892\n          self.collection.find().forEach(function storageSyncFetchEach(doc) {                                        // 893\n            // Remove document                                                                                       // 894\n            self._collection.remove(doc._id);                                                                        // 895\n            // If found in new documents then hard update                                                            // 896\n            if (typeof newDocs[doc._id] !== 'undefined') {                                                           // 897\n              // Update doc                                                                                          // 898\n              self._collection.insert(newDocs[doc._id]);                                                             // 899\n              delete newDocs[doc._id];                                                                               // 900\n            }                                                                                                        // 901\n          });                                                                                                        // 902\n                                                                                                                     // 903\n          _groundUtil.each(newDocs, function storageSyncFetchEachNew(doc) {                                          // 904\n            // insert doc                                                                                            // 905\n            self._collection.insert(doc);                                                                            // 906\n          });                                                                                                        // 907\n                                                                                                                     // 908\n        }                                                                                                            // 909\n      });                                                                                                            // 910\n                                                                                                                     // 911\n    }                                                                                                                // 912\n  });                                                                                                                // 913\n};                                                                                                                   // 914\n                                                                                                                     // 915\nvar syncMethodsTimeout = new OneTimeout(500);                                                                        // 916\n                                                                                                                     // 917\n// Syncronize tabs via method calls                                                                                  // 918\nvar _syncMethods = function _syncMethods() {                                                                         // 919\n  // We are going to into reload, stop all access to localstorage                                                    // 920\n  _isReloading = true;                                                                                               // 921\n  // We are not master and the user is working on another tab, we are not in                                         // 922\n  // a hurry to spam the browser with work, plus there are typically acouple                                         // 923\n  // of db access required in most operations, we wait a sec?                                                        // 924\n  syncMethodsTimeout(function _syncMethodsTimeout() {                                                                // 925\n    // Add event hook                                                                                                // 926\n    Ground.emit('sync', { type: 'methods'Â });                                                                        // 927\n    // Load the offline data into our memory                                                                         // 928\n    _groundUtil.each(_groundDatabases, function syncMethodsTimeoutEach(collection, name) {                           // 929\n      test.log('SYNC DB', name);                                                                                     // 930\n      _loadDatabase.call(collection);                                                                                // 931\n    });                                                                                                              // 932\n    // Resume methods                                                                                                // 933\n    test.log('SYNC METHODS');                                                                                        // 934\n    _loadMethods();                                                                                                  // 935\n    // Resume normal writes                                                                                          // 936\n    _isReloading = false;                                                                                            // 937\n  });                                                                                                                // 938\n};                                                                                                                   // 939\n                                                                                                                     // 940\n/////////////////////// ADD TRIGGERS IN LIVEDATACONNECTION /////////////////////                                     // 941\n                                                                                                                     // 942\nif (!test.isMain) {                                                                                                  // 943\n                                                                                                                     // 944\n  // Add hooks method hooks                                                                                          // 945\n  // We need to know when methods are added and when they have returned                                              // 946\n                                                                                                                     // 947\n  var _superApply = _groundUtil.Connection.prototype.apply;                                                          // 948\n  var _superOutstandingMethodFinished = _groundUtil.Connection.prototype._outstandingMethodFinished;                 // 949\n                                                                                                                     // 950\n  _groundUtil.Connection.prototype.apply = function applyHook(name /* , args, options, callback */) {                // 951\n    // Intercept grounded databases                                                                                  // 952\n    if (_allowMethodResumeMap[name]) {                                                                               // 953\n      test.debug('APPLY', JSON.stringify(_groundUtil.toArray(arguments)));                                           // 954\n    }                                                                                                                // 955\n    // Call super                                                                                                    // 956\n    var result = _superApply.apply(this, _groundUtil.toArray(arguments));                                            // 957\n    // Save methods                                                                                                  // 958\n    if (_allowMethodResumeMap[name]) {                                                                               // 959\n      _saveMethods();                                                                                                // 960\n    }                                                                                                                // 961\n    // return the result                                                                                             // 962\n    return result;                                                                                                   // 963\n  };                                                                                                                 // 964\n                                                                                                                     // 965\n  _groundUtil.Connection.prototype._outstandingMethodFinished = function _outstandingMethodFinished() {              // 966\n      // Call super                                                                                                  // 967\n      _superOutstandingMethodFinished.apply(this);                                                                   // 968\n      // We save current status of methods                                                                           // 969\n      _saveMethods();                                                                                                // 970\n      // _outstandingMethodFinished dont return anything                                                             // 971\n    };                                                                                                               // 972\n                                                                                                                     // 973\n}                                                                                                                    // 974\n                                                                                                                     // 975\n/////////////////////// LOAD CHANGES FROM OTHER TABS ///////////////////////////                                     // 976\n                                                                                                                     // 977\n// The main test mode should not interfere with tab sync                                                             // 978\nif (!test.isMain) {                                                                                                  // 979\n                                                                                                                     // 980\n  // Sync Methods if changed                                                                                         // 981\n  _methodsStorage.addListener('storage', function storageEventListener() {                                           // 982\n    // Method calls are delayed a bit for optimization                                                               // 983\n    _syncMethods('mehods');                                                                                          // 984\n                                                                                                                     // 985\n  });                                                                                                                // 986\n                                                                                                                     // 987\n}                                                                                                                    // 988\n                                                                                                                     // 989\n////////////////////////// ADD DEPRECATION NOTICE //////////////////////////////                                     // 990\nif (typeof GroundDB === 'undefined') {                                                                               // 991\n  GroundDB = function deprecatedGroundDB(name, options) {                                                            // 992\n    // Deprecation notice                                                                                            // 993\n    console.warn('The GroundDB scope is deprecating!! Use Ground.Collection instead');                               // 994\n    return new Ground.Collection(name, options);                                                                     // 995\n  };                                                                                                                 // 996\n}                                                                                                                    // 997\n                                                                                                                     // 998\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/ground:db/wrap.collection.js                                                                             //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n//////////////////////////////////////////////////////////////////////////////                                       // 1\n// WRAP MONGO COLLECTION API on prototype                                                                            // 2\n//////////////////////////////////////////////////////////////////////////////                                       // 3\n                                                                                                                     // 4\n// Why do we need to overwrite the default insert function?                                                          // 5\n//                                                                                                                   // 6\n// We set _id manually if not already set, this is due to the \"optimization\"                                         // 7\n// added in Meteor and the fact that we cant rely on connection or method                                            // 8\n// invocations in grounddb:                                                                                          // 9\n// \"Don't generate the id if we're the client and the 'outermost' call                                               // 10\n//  This optimization saves us passing both the randomSeed and the id                                                // 11\n//  Passing both is redundant.\"                                                                                      // 12\n//  // Mongo->collection.js                                                                                          // 13\n                                                                                                                     // 14\n// XXX: This is a bit strange - its the only way of making sure the _id is                                           // 15\n// sent to the server. We want the id to the server if we are doing offline                                          // 16\n// resume - grounddb cannot regenerate the invocation callbacks if browser                                           // 17\n// was closed.                                                                                                       // 18\n                                                                                                                     // 19\nvar _super = _groundUtil.Collection.prototype.insert;                                                                // 20\n                                                                                                                     // 21\n// Overwrite insert                                                                                                  // 22\n_groundUtil.Collection.prototype.insert = function(/* arguments */) {                                                // 23\n  /*************************************************************************                                         // 24\n   *  This function is overwritten by GroundDB - Sorry! but we need an _id *                                         // 25\n   *************************************************************************/                                        // 26\n                                                                                                                     // 27\n  // Convert arguments object into real array                                                                        // 28\n  var args = _.toArray(arguments);                                                                                   // 29\n                                                                                                                     // 30\n  // Only make sure _id is set if grounddb is mounted                                                                // 31\n  if (this.grounddb)                                                                                                 // 32\n    args[0]._id = args[0]._id || this._makeNewID();                                                                  // 33\n                                                                                                                     // 34\n  // Call super                                                                                                      // 35\n  return _super.apply(this, args);                                                                                   // 36\n};                                                                                                                   // 37\n                                                                                                                     // 38\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/ground:db/wrap.eventemitter.js                                                                           //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n//////////////////////////////////////////////////////////////////////////////                                       // 1\n// WRAP EVENTEMITTER API on Ground                                                                                   // 2\n//////////////////////////////////////////////////////////////////////////////                                       // 3\n                                                                                                                     // 4\n// Add a top level event emitter                                                                                     // 5\nGround.eventemitter = new EventEmitter();                                                                            // 6\n                                                                                                                     // 7\n// Wrap the Event Emitter Api \"on\"                                                                                   // 8\nGround.on = function(/* arguments */) {                                                                              // 9\n  Ground.eventemitter.on.apply(Ground.eventemitter, _.toArray(arguments));                                           // 10\n};                                                                                                                   // 11\n                                                                                                                     // 12\n// Wrap the Event Emitter Api \"once\"                                                                                 // 13\nGround.once = function(/* arguments */) {                                                                            // 14\n  Ground.eventemitter.once.apply(Ground.eventemitter, _.toArray(arguments));                                         // 15\n};                                                                                                                   // 16\n                                                                                                                     // 17\n// Wrap the Event Emitter Api \"off\"                                                                                  // 18\nGround.off = function(/* arguments */) {                                                                             // 19\n  Ground.eventemitter.off.apply(Ground.eventemitter, _.toArray(arguments));                                          // 20\n};                                                                                                                   // 21\n                                                                                                                     // 22\n// Wrap the Event Emitter Api \"emit\"                                                                                 // 23\nGround.emit = function(/* arguments */) {                                                                            // 24\n  Ground.eventemitter.emit.apply(Ground.eventemitter, _.toArray(arguments));                                         // 25\n};                                                                                                                   // 26\n                                                                                                                     // 27\n                                                                                                                     // 28\n// Add api helpers                                                                                                   // 29\nGround.addListener = Ground.on;                                                                                      // 30\nGround.removeListener = Ground.off;                                                                                  // 31\nGround.removeAllListeners = Ground.off;                                                                              // 32\n                                                                                                                     // 33\n// Add jquery like helpers                                                                                           // 34\nGround.one = Ground.once;                                                                                            // 35\nGround.trigger = Ground.emit;                                                                                        // 36\n                                                                                                                     // 37\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/ground:db/wrap.proto.eventemitter.js                                                                     //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n//////////////////////////////////////////////////////////////////////////////                                       // 1\n// WRAP EVENTEMITTER API on prototype                                                                                // 2\n//////////////////////////////////////////////////////////////////////////////                                       // 3\n                                                                                                                     // 4\n// Wrap the Event Emitter Api \"on\"                                                                                   // 5\n_groundUtil.Collection.prototype.on = function(/* arguments */) {                                                    // 6\n  return this.eventemitter.on.apply(this.eventemitter, _.toArray(arguments));                                        // 7\n};                                                                                                                   // 8\n                                                                                                                     // 9\n// Wrap the Event Emitter Api \"once\"                                                                                 // 10\n_groundUtil.Collection.prototype.once = function(/* arguments */) {                                                  // 11\n  return this.eventemitter.once.apply(this.eventemitter, _.toArray(arguments));                                      // 12\n};                                                                                                                   // 13\n                                                                                                                     // 14\n// Wrap the Event Emitter Api \"off\"                                                                                  // 15\n_groundUtil.Collection.prototype.off = function(/* arguments */) {                                                   // 16\n  return this.eventemitter.off.apply(this.eventemitter, _.toArray(arguments));                                       // 17\n};                                                                                                                   // 18\n                                                                                                                     // 19\n// Wrap the Event Emitter Api \"emit\"                                                                                 // 20\n_groundUtil.Collection.prototype.emit = function(/* arguments */) {                                                  // 21\n  return this.eventemitter.emit.apply(this.eventemitter, _.toArray(arguments));                                      // 22\n};                                                                                                                   // 23\n                                                                                                                     // 24\n                                                                                                                     // 25\n// Add api helpers                                                                                                   // 26\n_groundUtil.Collection.prototype.addListener = _groundUtil.Collection.prototype.on;                                  // 27\n_groundUtil.Collection.prototype.removeListener = _groundUtil.Collection.prototype.off;                              // 28\n_groundUtil.Collection.prototype.removeAllListeners = _groundUtil.Collection.prototype.off;                          // 29\n                                                                                                                     // 30\n// Add jquery like helpers                                                                                           // 31\n_groundUtil.Collection.prototype.one = _groundUtil.Collection.prototype.once;                                        // 32\n_groundUtil.Collection.prototype.trigger = _groundUtil.Collection.prototype.emit;                                    // 33\n                                                                                                                     // 34\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}