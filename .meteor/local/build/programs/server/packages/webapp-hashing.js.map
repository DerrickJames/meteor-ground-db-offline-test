{"version":3,"sources":["meteor://ðŸ’»app/packages/webapp-hashing/packages/webapp-hashing.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uF","file":"/packages/webapp-hashing.js","sourcesContent":["(function(){\n\n//////////////////////////////////////////////////////////////////////////////\n//                                                                          //\n// packages/webapp-hashing/webapp-hashing.js                                //\n//                                                                          //\n//////////////////////////////////////////////////////////////////////////////\n                                                                            //\nvar crypto = Npm.require(\"crypto\");                                         // 1\n                                                                            // 2\nWebAppHashing = {};                                                         // 3\n                                                                            // 4\n// Calculate a hash of all the client resources downloaded by the           // 5\n// browser, including the application HTML, runtime config, code, and       // 6\n// static files.                                                            // 7\n//                                                                          // 8\n// This hash *must* change if any resources seen by the browser             // 9\n// change, and ideally *doesn't* change for any server-only changes         // 10\n// (but the second is a performance enhancement, not a hard                 // 11\n// requirement).                                                            // 12\n                                                                            // 13\nWebAppHashing.calculateClientHash =                                         // 14\n  function (manifest, includeFilter, runtimeConfigOverride) {               // 15\n  var hash = crypto.createHash('sha1');                                     // 16\n                                                                            // 17\n  // Omit the old hashed client values in the new hash. These may be        // 18\n  // modified in the new boilerplate.                                       // 19\n  var runtimeCfg = _.omit(__meteor_runtime_config__,                        // 20\n    ['autoupdateVersion', 'autoupdateVersionRefreshable',                   // 21\n     'autoupdateVersionCordova']);                                          // 22\n                                                                            // 23\n  if (runtimeConfigOverride) {                                              // 24\n    runtimeCfg = runtimeConfigOverride;                                     // 25\n  }                                                                         // 26\n                                                                            // 27\n  hash.update(JSON.stringify(runtimeCfg, 'utf8'));                          // 28\n                                                                            // 29\n  _.each(manifest, function (resource) {                                    // 30\n      if ((! includeFilter || includeFilter(resource.type)) &&              // 31\n          (resource.where === 'client' || resource.where === 'internal')) {\n      hash.update(resource.path);                                           // 33\n      hash.update(resource.hash);                                           // 34\n    }                                                                       // 35\n  });                                                                       // 36\n  return hash.digest('hex');                                                // 37\n};                                                                          // 38\n                                                                            // 39\n                                                                            // 40\n//////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}