{"version":3,"sources":["meteor://ðŸ’»app/packages/ground_minimax/packages/ground_minimax.js"],"names":[],"mappingsuH","file":"/packages/ground_minimax.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/ground:minimax/ejson.minimax.js                                                               //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n/*                                                                                                        // 1\n                                                                                                          // 2\n                                                                                                          // 3\n                    __  ____       _ __  ___                                                              // 4\n                   /  |/  (_)___  (_)  |/  /___ __  __                                                    // 5\n                  / /|_/ / / __ \\/ / /|_/ / __ `/ |/_/                                                    // 6\n                 / /  / / / / / / / /  / / /_/ />  <                                                      // 7\n                /_/  /_/_/_/ /_/_/_/  /_/\\__,_/_/|_|                                                      // 8\n                                                                                                          // 9\n  Minify and Maxify by RaiX aka Morten N.O. NÃ¸rgaard Henriksen (mh@gi-software.com)                       // 10\n                                                                                                          // 11\n  MiniMax.minify( Object )                                                                                // 12\n                                                                                                          // 13\n  MiniMax.maxify( array )                                                                                 // 14\n                                                                                                          // 15\n  MiniMax.stringify( object )                                                                             // 16\n                                                                                                          // 17\n  MiniMax.parse( string )                                                                                 // 18\n                                                                                                          // 19\n  // For faster lookup                                                                                    // 20\n  var keywords = {                                                                                        // 21\n    '_id': 0,                                                                                             // 22\n    'test': 1,                                                                                            // 23\n    'comment': 2,                                                                                         // 24\n    'list': 3,                                                                                            // 25\n    'note': 4                                                                                             // 26\n  };                                                                                                      // 27\n                                                                                                          // 28\n  var keywordsList = [ '_id', 'test', 'comment', 'list', 'note' ];                                        // 29\n                                                                                                          // 30\n  var headers = [0, [0, 1, 2], [0, 3, -5] ];                                                              // 31\n                                                                                                          // 32\n  var data = []; */                                                                                       // 33\n                                                                                                          // 34\n  // if(!Array.isArray) {                                                                                 // 35\n  //   Array.isArray = function (vArg) {                                                                  // 36\n  //     return Object.prototype.toString.call(vArg) === '[object Array]';                                // 37\n  //   };                                                                                                 // 38\n  // }                                                                                                    // 39\n                                                                                                          // 40\n  // Create the export scope                                                                              // 41\n  MiniMax = function(options) {                                                                           // 42\n    var self = this;                                                                                      // 43\n                                                                                                          // 44\n    // Make sure we are on an instance                                                                    // 45\n    if (!(self instanceof MiniMax))                                                                       // 46\n      return new MiniMax(options);                                                                        // 47\n                                                                                                          // 48\n    // Make sure options is set                                                                           // 49\n    options = options || {};                                                                              // 50\n                                                                                                          // 51\n    // Setting this true will add all values and dates to the dictionary                                  // 52\n    // This can in some cases save                                                                        // 53\n    self.progressive = (options.progressive === false)? false : true;                                     // 54\n                                                                                                          // 55\n    // Set the default Dictionary                                                                         // 56\n    // If the user added initial dictionary then add those                                                // 57\n    self.dictionary = new Dictionary(_.union([false, true, null, undefined], options.dictionary || [] )); // 58\n  };                                                                                                      // 59\n                                                                                                          // 60\n  MiniMax.prototype.minify = function(maxObj, skipFunctions) {                                            // 61\n    var self = this;                                                                                      // 62\n    var headers = [0];                                                                                    // 63\n                                                                                                          // 64\n    // Start dictionary                                                                                   // 65\n    var dict = new Dictionary(self.dictionary);                                                           // 66\n                                                                                                          // 67\n    var getHeader = function(newHeader) {                                                                 // 68\n      var headerId = null;                                                                                // 69\n      for (var i = 1; i < headers.length; i++) {                                                          // 70\n        var orgHeader = headers[i];                                                                       // 71\n        // We only need to iterate over the intersection to get a match                                   // 72\n        var minLength = Math.min(orgHeader.length, newHeader.length);                                     // 73\n        var isMatch = true;                                                                               // 74\n        for (var a = 0; a < minLength; a++) {                                                             // 75\n          // We break if not a match                                                                      // 76\n          if (orgHeader[a] !== newHeader[a]) {                                                            // 77\n            isMatch = false;                                                                              // 78\n            break;                                                                                        // 79\n          }                                                                                               // 80\n        }                                                                                                 // 81\n        if (isMatch) {                                                                                    // 82\n          // We check to see if                                                                           // 83\n          // We are equal or in another header                                                            // 84\n          // eg. headers = [1, 2, 3] newHeader=[1, 2, 3] return id                                        // 85\n          // eg. headers = [1, 2, 3, 4] newHeader=[1, 2, 3] return id                                     // 86\n          headerId = i;                                                                                   // 87\n          // We could maybe contain another header - so we extend the org. and use                        // 88\n          // that eg. headers = [1, 2, 3] newHeader=[1, 2, 3, 4] then                                     // 89\n          // set headers=newHeader and return id                                                          // 90\n          if (newHeader.length > minLength) {                                                             // 91\n            headers[i] = newHeader;                                                                       // 92\n          }                                                                                               // 93\n        }                                                                                                 // 94\n        // Stop when we found a match                                                                     // 95\n        if (headerId !== null) {                                                                          // 96\n          break;                                                                                          // 97\n        }                                                                                                 // 98\n      }                                                                                                   // 99\n      // Or none of the above we add a new header                                                         // 100\n      if (headerId === null) {                                                                            // 101\n        headerId = headers.push(newHeader) - 1;                                                           // 102\n      }                                                                                                   // 103\n      return headerId;                                                                                    // 104\n    };                                                                                                    // 105\n                                                                                                          // 106\n    var minifyHelper = function(maxObj) {                                                                 // 107\n      var inArray = !_.isArray(maxObj);                                                                   // 108\n      var target = [];                                                                                    // 109\n      var header = [];                                                                                    // 110\n                                                                                                          // 111\n      _.each(maxObj, function(value, key) {                                                               // 112\n                                                                                                          // 113\n        if (skipFunctions && typeof value === 'function')                                                 // 114\n          return;                                                                                         // 115\n                                                                                                          // 116\n        var minKey = (inArray) ? dict.add(key) : 0;                                                       // 117\n                                                                                                          // 118\n        if (value !== null && typeof value === 'object' &&                                                // 119\n                  !(value instanceof Date)) {                                                             // 120\n          // Array or Object                                                                              // 121\n          if (inArray) {                                                                                  // 122\n            header.push(minKey);                                                                          // 123\n          }                                                                                               // 124\n                                                                                                          // 125\n          // Handle the object                                                                            // 126\n          target.push(minifyHelper(value));                                                               // 127\n                                                                                                          // 128\n        } else {                                                                                          // 129\n          // Depending on the progressive settings this will                                              // 130\n          // Check if value is found in keywords                                                          // 131\n          // Always set the value in keywords dictionary                                                  // 132\n          var valueId = (self.progressive) ? dict.add(value) : dict.index(value);                         // 133\n                                                                                                          // 134\n          if (typeof valueId == 'undefined') {                                                            // 135\n            // Not found, we add normal values                                                            // 136\n            header.push(minKey);                                                                          // 137\n            target.push(value);                                                                           // 138\n          } else {                                                                                        // 139\n                                                                                                          // 140\n            header.push(-minKey);                                                                         // 141\n            if (!inArray) {                                                                               // 142\n              target.push(value);                                                                         // 143\n            } else {                                                                                      // 144\n              // Found, make minKey negative and set value to valueId                                     // 145\n              target.push(valueId);                                                                       // 146\n            }                                                                                             // 147\n          }                                                                                               // 148\n        }                                                                                                 // 149\n      });                                                                                                 // 150\n                                                                                                          // 151\n      if (inArray) {                                                                                      // 152\n        var headerId = getHeader(header);                                                                 // 153\n        target.unshift(headerId);                                                                         // 154\n      } else {                                                                                            // 155\n        target.unshift(0); // 0 marks an array with no headers                                            // 156\n      }                                                                                                   // 157\n                                                                                                          // 158\n                                                                                                          // 159\n      return target;                                                                                      // 160\n    };                                                                                                    // 161\n                                                                                                          // 162\n    // If not an object then not much to work on                                                          // 163\n    if (typeof maxObj !== 'object') {                                                                     // 164\n      return maxObj;                                                                                      // 165\n    }                                                                                                     // 166\n                                                                                                          // 167\n    var data = minifyHelper(maxObj);                                                                      // 168\n                                                                                                          // 169\n    return [ dict.withoutInitial(), headers, data ];                                                      // 170\n  };                                                                                                      // 171\n                                                                                                          // 172\n                                                                                                          // 173\n  // Takes an minify object and maxify to object                                                          // 174\n  MiniMax.prototype.maxify = function(minObj) {                                                           // 175\n    var self = this;                                                                                      // 176\n                                                                                                          // 177\n    // We expect an array of 3                                                                            // 178\n    if (minObj === null || minObj.length !== 3) {                                                         // 179\n      // Return object                                                                                    // 180\n      return minObj;                                                                                      // 181\n    }                                                                                                     // 182\n                                                                                                          // 183\n    // Init globals                                                                                       // 184\n    var dict = new Dictionary(self.dictionary);                                                           // 185\n    dict.addList(minObj[0]);                                                                              // 186\n                                                                                                          // 187\n    var headers = minObj[1];                                                                              // 188\n    var data = minObj[2];                                                                                 // 189\n                                                                                                          // 190\n    var maxifyHelper = function(minObj) {                                                                 // 191\n      // read header reference and fetch the header                                                       // 192\n      var headerId = minObj.shift();                                                                      // 193\n      var header = (headerId) ? headers[headerId] : null;                                                 // 194\n                                                                                                          // 195\n      // If header === 0 then we are creating an array otherwise an object                                // 196\n      var result = (header === null) ? [] : {};                                                           // 197\n      // We launch interation over the minObj                                                             // 198\n      if (header === null) {                                                                              // 199\n        // Create an array                                                                                // 200\n        for (var i = 0; i < minObj.length; i++) {                                                         // 201\n          if (_.isArray(minObj[i])) {                                                                     // 202\n            result.push(maxifyHelper(minObj[i]));                                                         // 203\n          } else {                                                                                        // 204\n            result.push(minObj[i]);                                                                       // 205\n          }                                                                                               // 206\n        }                                                                                                 // 207\n      } else {                                                                                            // 208\n        // Create object                                                                                  // 209\n        for (var i = 0; i < minObj.length; i++) {                                                         // 210\n          // Lookup keyword id can be negative for value lookup                                           // 211\n          var keyId = header[i];                                                                          // 212\n          // Lookup keyword                                                                               // 213\n          var key = dict.value(Math.abs(keyId));                                                          // 214\n          // Is value an array then dig deeper                                                            // 215\n          if (_.isArray(minObj[i])) {                                                                     // 216\n            result[key] = maxifyHelper(minObj[i]);                                                        // 217\n          } else {                                                                                        // 218\n            var value = minObj[i]; // Value or valueId                                                    // 219\n            // if keyId is negative then lookup the value in keywords                                     // 220\n            if (keyId < 0) {                                                                              // 221\n              value = dict.value(value);                                                                  // 222\n            }                                                                                             // 223\n            result[key] = value;                                                                          // 224\n          }                                                                                               // 225\n        }                                                                                                 // 226\n      }                                                                                                   // 227\n      return result;                                                                                      // 228\n    };                                                                                                    // 229\n                                                                                                          // 230\n    return maxifyHelper(data);                                                                            // 231\n  };                                                                                                      // 232\n                                                                                                          // 233\n  MiniMax.prototype.stringify = function(plainObject) {                                                   // 234\n    // Compress the object                                                                                // 235\n    var minifiedObject = this.minify(plainObject, true);                                                  // 236\n    // Convert it into string                                                                             // 237\n    return EJSON.stringify(minifiedObject);                                                               // 238\n  };                                                                                                      // 239\n                                                                                                          // 240\n  MiniMax.prototype.parse = function(ejsonString) {                                                       // 241\n    // Convert the string into minified object                                                            // 242\n    var minifiedObject = EJSON.parse(ejsonString);                                                        // 243\n    // Maxify the object                                                                                  // 244\n    return this.maxify(minifiedObject);                                                                   // 245\n  };                                                                                                      // 246\n                                                                                                          // 247\n////////////////////////////////////////////////////////////////////////////////                          // 248\n//  DEFAULT BEHAVIOUR                                                                                     // 249\n////////////////////////////////////////////////////////////////////////////////                          // 250\n                                                                                                          // 251\nvar defaultMiniMax = new MiniMax();                                                                       // 252\n                                                                                                          // 253\nMiniMax.minify = function(maxObj, skipFunctions) {                                                        // 254\n  return defaultMiniMax.minify(maxObj, skipFunctions);                                                    // 255\n};                                                                                                        // 256\n                                                                                                          // 257\nMiniMax.maxify = function(minObj) {                                                                       // 258\n  return defaultMiniMax.maxify(minObj);                                                                   // 259\n};                                                                                                        // 260\n                                                                                                          // 261\nMiniMax.stringify = function(obj) {                                                                       // 262\n  return defaultMiniMax.stringify(obj);                                                                   // 263\n};                                                                                                        // 264\n                                                                                                          // 265\nMiniMax.parse = function(str) {                                                                           // 266\n  return defaultMiniMax.parse(str);                                                                       // 267\n};                                                                                                        // 268\n                                                                                                          // 269\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}