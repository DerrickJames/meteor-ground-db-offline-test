{"version":3,"sources":["meteor://ðŸ’»app/packages/ground_db/packages/ground_db.js"],"names":[],"mappingsiG","file":"/packages/ground_db.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/ground:db/groundDB.server.js                                            //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\n/*                                                                                  // 1\n                                                                                    // 2\n                                                                                    // 3\nTODO:                                                                               // 4\n  `Meteor.default_server` - `Meteor.server`                                         // 5\n                                                                                    // 6\n*/                                                                                  // 7\n///////////////////////////////// TEST SCOPE ///////////////////////////////////    // 8\n                                                                                    // 9\nMeteor.server = Meteor.server || Meteor.default_server;                             // 10\n                                                                                    // 11\n//////////////////////////////// GROUND DATABASE ///////////////////////////////    // 12\n                                                                                    // 13\n_groundDbConstructor = function(collection, options) {                              // 14\n  var self;                                                                         // 15\n  // XXX: Write the grounddb constructor                                            // 16\n                                                                                    // 17\n                                                                                    // 18\n  // // This is the basic interface allowing users easily access for handling       // 19\n  // // method calls, this.super() is the super and this.collection is self         // 20\n  // // TODO: Remove this section to the README                                     // 21\n  // self.conflictHandlers = (options && options.conflictHandlers)?                 // 22\n  //       options.conflictHandlers: {                                              // 23\n  //   'insert': function(doc) {                                                    // 24\n  //     //console.log('insert');                                                   // 25\n  //     //console.log(doc);                                                        // 26\n  //     this.super(doc);                                                           // 27\n  //   },                                                                           // 28\n  //   'update': function(id, modifier) {                                           // 29\n  //     //console.log('update');                                                   // 30\n  //     //console.log(id);                                                         // 31\n  //     //console.log(modifier);                                                   // 32\n  //     this.super(id, modifier);                                                  // 33\n  //   },                                                                           // 34\n  //   'remove': function(id) {                                                     // 35\n  //     //console.log('remove');                                                   // 36\n  //     //console.log(id);                                                         // 37\n  //     this.super(id);                                                            // 38\n  //   }                                                                            // 39\n  // };                                                                             // 40\n                                                                                    // 41\n  // // Create overwrite interface                                                  // 42\n  // _.each(['insert', 'update', 'remove'], function(name) {                        // 43\n  //   // TODO: init default conflict handlers                                      // 44\n  //   //self.conflictHandlers[name] = function() {                                 // 45\n  //   //  this.super.apply(this, arguments);                                       // 46\n  //   //};                                                                         // 47\n                                                                                    // 48\n  //   // Save super                                                                // 49\n  //   var _super = Meteor.default_server.method_handlers['/'+self.name+'/'+name];  // 50\n  //   // Overwrite                                                                 // 51\n  //   Meteor.default_server.method_handlers['/'+self.name+'/'+name] = function() { // 52\n  //     var _this = this;                                                          // 53\n  //     _this.collection = self;                                                   // 54\n  //     _this.super = _super;                                                      // 55\n  //     // Call the conflicthandlers                                               // 56\n  //     self.conflictHandlers[name].apply(_this, arguments);                       // 57\n  //   };                                                                           // 58\n  // });                                                                            // 59\n                                                                                    // 60\n  return self;                                                                      // 61\n};                                                                                  // 62\n                                                                                    // 63\n                                                                                    // 64\n// Global helper for applying grounddb on a collection                              // 65\nGround.Collection = function(name, options) {                                       // 66\n  var self;                                                                         // 67\n  // Inheritance Meteor Collection can be set by options.collection                 // 68\n  // Accepts smart collections by Arunoda Susiripala                                // 69\n  // Check if user used the \"new\" keyword                                           // 70\n                                                                                    // 71\n                                                                                    // 72\n  // Make sure we got some options                                                  // 73\n  options = options || {};                                                          // 74\n                                                                                    // 75\n  // Either name is a Meteor collection or we create a new Meteor collection        // 76\n  if (name instanceof _groundUtil.Collection) {                                     // 77\n    self = name;                                                                    // 78\n  } else {                                                                          // 79\n    self = new _groundUtil.Collection(name, options);                               // 80\n  }                                                                                 // 81\n                                                                                    // 82\n  // Throw an error if something went wrong                                         // 83\n  if (!(self instanceof _groundUtil.Collection))                                    // 84\n    throw new Error('Ground.Collection expected a Mongo.Collection');               // 85\n                                                                                    // 86\n  // Add grounddb to the collection, circular reference since self is               // 87\n  // grounddb.collection                                                            // 88\n  self.grounddb = new _groundDbConstructor(self, options);                          // 89\n                                                                                    // 90\n  // Return grounded collection - We dont return this eg if it was an instance      // 91\n  // of Ground.Collection                                                           // 92\n  return self;                                                                      // 93\n};                                                                                  // 94\n                                                                                    // 95\n////////////////////////// TIMESTAMP CONFLICTHANDLER ///////////////////////////    // 96\n                                                                                    // 97\n// TODO:                                                                            // 98\n// When clients make changes the server should track the documents from the         // 99\n// clients to see if the changes are new or old changes.                            // 100\n// This could be done in several ways.                                              // 101\n// Either by versions or server timestamps - both could work.                       // 102\n//                                                                                  // 103\n// Conflicting overview:                                                            // 104\n// We could cut it down to comparing two documents and keep / broadcast the         // 105\n// winning document.                                                                // 106\n//                                                                                  // 107\n// conflictHandler = function(clientDoc, serverDoc) { return serverDoc; }           // 108\n//                                                                                  // 109\n//                                                                                  // 110\n// There should be found a way of registrating deleted documents - eg. by having    // 111\n// a flag set 'active' all nonactive documents should then be removed from          // 112\n// published documents.                                                             // 113\n//                                                                                  // 114\n// This could be a standalone package since it would introduce conflict             // 115\n// handling in generel                                                              // 116\n//                                                                                  // 117\n// Regz. RaiX                                                                       // 118\n                                                                                    // 119\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}