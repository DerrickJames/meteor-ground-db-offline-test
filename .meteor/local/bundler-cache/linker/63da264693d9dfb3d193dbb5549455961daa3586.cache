[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n/* Package-scope variables */\nvar babelHelpers;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/babel-runtime/packages/babel-runtime.js                                                               //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\n(function(){                                                                                                      // 1\n                                                                                                                  // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                         //     // 4\n// packages/babel-runtime/babel-runtime.js                                                                 //     // 5\n//                                                                                                         //     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                           //     // 8\nvar hasOwn = Object.prototype.hasOwnProperty;                                                              // 1   // 9\n                                                                                                           // 2   // 10\nfunction canDefineNonEnumerableProperties() {                                                              // 3   // 11\n  var testObj = {};                                                                                        // 4   // 12\n  var testPropName = \"t\";                                                                                  // 5   // 13\n                                                                                                           // 6   // 14\n  try {                                                                                                    // 7   // 15\n    Object.defineProperty(testObj, testPropName, {                                                         // 8   // 16\n      enumerable: false,                                                                                   // 9   // 17\n      value: testObj                                                                                       // 10  // 18\n    });                                                                                                    // 11  // 19\n                                                                                                           // 12  // 20\n    for (var k in testObj) {                                                                               // 13  // 21\n      if (k === testPropName) {                                                                            // 14  // 22\n        return false;                                                                                      // 15  // 23\n      }                                                                                                    // 16  // 24\n    }                                                                                                      // 17  // 25\n  } catch (e) {                                                                                            // 18  // 26\n    return false;                                                                                          // 19  // 27\n  }                                                                                                        // 20  // 28\n                                                                                                           // 21  // 29\n  return testObj[testPropName] === testObj;                                                                // 22  // 30\n}                                                                                                          // 23  // 31\n                                                                                                           // 24  // 32\n// The name `babelHelpers` is hard-coded in Babel.  Otherwise we would make it                             // 25  // 33\n// something capitalized and more descriptive, like `BabelRuntime`.                                        // 26  // 34\nbabelHelpers = {                                                                                           // 27  // 35\n  // Meteor-specific runtime helper for wrapping the object of for-in                                      // 28  // 36\n  // loops, so that inherited Array methods defined by es5-shim can be                                     // 29  // 37\n  // ignored in browsers where they cannot be defined as non-enumerable.                                   // 30  // 38\n  sanitizeForInObject: canDefineNonEnumerableProperties()                                                  // 31  // 39\n    ? function (value) { return value; }                                                                   // 32  // 40\n    : function (obj) {                                                                                     // 33  // 41\n      if (Array.isArray(obj)) {                                                                            // 34  // 42\n        var newObj = {};                                                                                   // 35  // 43\n        var keys = Object.keys(obj);                                                                       // 36  // 44\n        var keyCount = keys.length;                                                                        // 37  // 45\n        for (var i = 0; i < keyCount; ++i) {                                                               // 38  // 46\n          var key = keys[i];                                                                               // 39  // 47\n          newObj[key] = obj[key];                                                                          // 40  // 48\n        }                                                                                                  // 41  // 49\n        return newObj;                                                                                     // 42  // 50\n      }                                                                                                    // 43  // 51\n                                                                                                           // 44  // 52\n      return obj;                                                                                          // 45  // 53\n    },                                                                                                     // 46  // 54\n                                                                                                           // 47  // 55\n  // es6.templateLiterals                                                                                  // 48  // 56\n  // Constructs the object passed to the tag function in a tagged                                          // 49  // 57\n  // template literal.                                                                                     // 50  // 58\n  taggedTemplateLiteralLoose: function (strings, raw) {                                                    // 51  // 59\n    // Babel's own version of this calls Object.freeze on `strings` and                                    // 52  // 60\n    // `strings.raw`, but it doesn't seem worth the compatibility and                                      // 53  // 61\n    // performance concerns.  If you're writing code against this helper,                                  // 54  // 62\n    // don't add properties to these objects.                                                              // 55  // 63\n    strings.raw = raw;                                                                                     // 56  // 64\n    return strings;                                                                                        // 57  // 65\n  },                                                                                                       // 58  // 66\n                                                                                                           // 59  // 67\n  // es6.classes                                                                                           // 60  // 68\n  // Checks that a class constructor is being called with `new`, and throws                                // 61  // 69\n  // an error if it is not.                                                                                // 62  // 70\n  classCallCheck: function (instance, Constructor) {                                                       // 63  // 71\n    if (!(instance instanceof Constructor)) {                                                              // 64  // 72\n      throw new TypeError(\"Cannot call a class as a function\");                                            // 65  // 73\n    }                                                                                                      // 66  // 74\n  },                                                                                                       // 67  // 75\n                                                                                                           // 68  // 76\n  // es6.classes                                                                                           // 69  // 77\n  inherits: function (subClass, superClass) {                                                              // 70  // 78\n    if (typeof superClass !== \"function\" && superClass !== null) {                                         // 71  // 79\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);        // 80\n    }                                                                                                      // 73  // 81\n                                                                                                           // 74  // 82\n    if (superClass) {                                                                                      // 75  // 83\n      if (Object.create) {                                                                                 // 76  // 84\n        // All but IE 8                                                                                    // 77  // 85\n        subClass.prototype = Object.create(superClass.prototype, {                                         // 78  // 86\n          constructor: {                                                                                   // 79  // 87\n            value: subClass,                                                                               // 80  // 88\n            enumerable: false,                                                                             // 81  // 89\n            writable: true,                                                                                // 82  // 90\n            configurable: true                                                                             // 83  // 91\n          }                                                                                                // 84  // 92\n        });                                                                                                // 85  // 93\n      } else {                                                                                             // 86  // 94\n        // IE 8 path.  Slightly worse for modern browsers, because `constructor`                           // 87  // 95\n        // is enumerable and shows up in the inspector unnecessarily.                                      // 88  // 96\n        // It's not an \"own\" property of any instance though.                                              // 89  // 97\n        //                                                                                                 // 90  // 98\n        // For correctness when writing code,                                                              // 91  // 99\n        // don't enumerate all the own-and-inherited properties of an instance                             // 92  // 100\n        // of a class and expect not to find `constructor` (but who does that?).                           // 93  // 101\n        var F = function () {                                                                              // 94  // 102\n          this.constructor = subClass;                                                                     // 95  // 103\n        };                                                                                                 // 96  // 104\n        F.prototype = superClass.prototype;                                                                // 97  // 105\n        subClass.prototype = new F();                                                                      // 98  // 106\n      }                                                                                                    // 99  // 107\n                                                                                                           // 100\n      // For modern browsers, this would be `subClass.__proto__ = superClass`,                             // 101\n      // but IE <=10 don't support `__proto__`, and in this case the difference                            // 102\n      // would be detectable; code that works in modern browsers could easily                              // 103\n      // fail on IE 8 if we ever used the `__proto__` trick.                                               // 104\n      //                                                                                                   // 105\n      // There's no perfect way to make static methods inherited if they are                               // 106\n      // assigned after declaration of the classes.  The best we can do is                                 // 107\n      // to copy them.  In other words, when you write `class Foo                                          // 108\n      // extends Bar`, we copy the static methods from Bar onto Foo, but future                            // 109\n      // ones are not copied.                                                                              // 110\n      //                                                                                                   // 111\n      // For correctness when writing code, don't add static methods to a class                            // 112\n      // after you subclass it.                                                                            // 113\n      for (var k in superClass) {                                                                          // 114\n        if (hasOwn.call(superClass, k)) {                                                                  // 115\n          subClass[k] = superClass[k];                                                                     // 116\n        }                                                                                                  // 117\n      }                                                                                                    // 118\n    }                                                                                                      // 119\n  },                                                                                                       // 120\n                                                                                                           // 121\n  createClass: (function () {                                                                              // 122\n    var hasDefineProperty = false;                                                                         // 123\n    try {                                                                                                  // 124\n      // IE 8 has a broken Object.defineProperty, so feature-test by                                       // 125\n      // trying to call it.                                                                                // 126\n      Object.defineProperty({}, 'x', {});                                                                  // 127\n      hasDefineProperty = true;                                                                            // 128\n    } catch (e) {}                                                                                         // 129\n                                                                                                           // 130\n    function defineProperties(target, props) {                                                             // 131\n      for (var i = 0; i < props.length; i++) {                                                             // 132\n        var descriptor = props[i];                                                                         // 133\n        descriptor.enumerable = descriptor.enumerable || false;                                            // 134\n        descriptor.configurable = true;                                                                    // 135\n        if (\"value\" in descriptor) descriptor.writable = true;                                             // 136\n        Object.defineProperty(target, descriptor.key, descriptor);                                         // 137\n      }                                                                                                    // 138\n    }                                                                                                      // 139\n                                                                                                           // 140\n    return function (Constructor, protoProps, staticProps) {                                               // 141\n      if (! hasDefineProperty) {                                                                           // 142\n        // e.g. `class Foo { get bar() {} }`.  If you try to use getters and                               // 143\n        // setters in IE 8, you will get a big nasty error, with or without                                // 144\n        // Babel.  I don't know of any other syntax features besides getters                               // 145\n        // and setters that will trigger this error.                                                       // 146\n        throw new Error(                                                                                   // 147\n          \"Your browser does not support this type of class property.  \" +                                 // 148\n            \"For example, Internet Explorer 8 does not support getters and \" +                             // 149\n            \"setters.\");                                                                                   // 150\n      }                                                                                                    // 151\n                                                                                                           // 152\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                 // 153\n      if (staticProps) defineProperties(Constructor, staticProps);                                         // 154\n      return Constructor;                                                                                  // 155\n    };                                                                                                     // 156\n  })(),                                                                                                    // 157\n                                                                                                           // 158\n  // es7.objectRestSpread and react (JSX)                                                                  // 159\n  _extends: Object.assign || (function (target) {                                                          // 160\n    for (var i = 1; i < arguments.length; i++) {                                                           // 161\n      var source = arguments[i];                                                                           // 162\n      for (var key in source) {                                                                            // 163\n        if (hasOwn.call(source, key)) {                                                                    // 164\n          target[key] = source[key];                                                                       // 165\n        }                                                                                                  // 166\n      }                                                                                                    // 167\n    }                                                                                                      // 168\n    return target;                                                                                         // 169\n  }),                                                                                                      // 170\n                                                                                                           // 171\n  // es6.destructuring                                                                                     // 172\n  objectWithoutProperties: function (obj, keys) {                                                          // 173\n    var target = {};                                                                                       // 174\n    outer: for (var i in obj) {                                                                            // 175\n      if (! hasOwn.call(obj, i)) continue;                                                                 // 176\n      for (var j = 0; j < keys.length; j++) {                                                              // 177\n        if (keys[j] === i) continue outer;                                                                 // 178\n      }                                                                                                    // 179\n      target[i] = obj[i];                                                                                  // 180\n    }                                                                                                      // 181\n    return target;                                                                                         // 182\n  },                                                                                                       // 183\n                                                                                                           // 184\n  // es6.destructuring                                                                                     // 185\n  objectDestructuringEmpty: function (obj) {                                                               // 186\n    if (obj == null) throw new TypeError(\"Cannot destructure undefined\");                                  // 187\n  },                                                                                                       // 188\n                                                                                                           // 189\n  // es6.spread                                                                                            // 190\n  bind: Function.prototype.bind || (function () {                                                          // 191\n    var isCallable = function (value) { return typeof value === 'function'; };                             // 192\n    var $Object = Object;                                                                                  // 193\n    var to_string = Object.prototype.toString;                                                             // 194\n    var array_slice = Array.prototype.slice;                                                               // 195\n    var array_concat = Array.prototype.concat;                                                             // 196\n    var array_push = Array.prototype.push;                                                                 // 197\n    var max = Math.max;                                                                                    // 198\n    var Empty = function Empty() {};                                                                       // 199\n                                                                                                           // 200\n    // Copied from es5-shim.js (3ac7942).  See original for more comments.                                 // 201\n    return function bind(that) {                                                                           // 202\n      var target = this;                                                                                   // 203\n      if (!isCallable(target)) {                                                                           // 204\n        throw new TypeError('Function.prototype.bind called on incompatible ' + target);                   // 205\n      }                                                                                                    // 206\n                                                                                                           // 207\n      var args = array_slice.call(arguments, 1);                                                           // 208\n                                                                                                           // 209\n      var bound;                                                                                           // 210\n      var binder = function () {                                                                           // 211\n                                                                                                           // 212\n        if (this instanceof bound) {                                                                       // 213\n          var result = target.apply(                                                                       // 214\n            this,                                                                                          // 215\n            array_concat.call(args, array_slice.call(arguments))                                           // 216\n          );                                                                                               // 217\n          if ($Object(result) === result) {                                                                // 218\n            return result;                                                                                 // 219\n          }                                                                                                // 220\n          return this;                                                                                     // 221\n        } else {                                                                                           // 222\n          return target.apply(                                                                             // 223\n            that,                                                                                          // 224\n            array_concat.call(args, array_slice.call(arguments))                                           // 225\n          );                                                                                               // 226\n        }                                                                                                  // 227\n      };                                                                                                   // 228\n                                                                                                           // 229\n      var boundLength = max(0, target.length - args.length);                                               // 230\n                                                                                                           // 231\n      var boundArgs = [];                                                                                  // 232\n      for (var i = 0; i < boundLength; i++) {                                                              // 233\n        array_push.call(boundArgs, '$' + i);                                                               // 234\n      }                                                                                                    // 235\n                                                                                                           // 236\n      // Create a Function from source code so that it has the right `.length`.                            // 237\n      // Probably not important for Babel.  This code violates CSPs that ban                               // 238\n      // `eval`, but the browsers that need this polyfill don't have CSP!                                  // 239\n      bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);\n                                                                                                           // 241\n      if (target.prototype) {                                                                              // 242\n        Empty.prototype = target.prototype;                                                                // 243\n        bound.prototype = new Empty();                                                                     // 244\n        Empty.prototype = null;                                                                            // 245\n      }                                                                                                    // 246\n                                                                                                           // 247\n      return bound;                                                                                        // 248\n    };                                                                                                     // 249\n                                                                                                           // 250\n  })(),                                                                                                    // 251\n                                                                                                           // 252\n  slice: Array.prototype.slice                                                                             // 253\n};                                                                                                         // 254\n                                                                                                           // 255\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 264\n                                                                                                                  // 265\n}).call(this);                                                                                                    // 266\n                                                                                                                  // 267\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['babel-runtime'] = {\n  babelHelpers: babelHelpers\n};\n\n})();\n","servePath":"/packages/babel-runtime.js","sourceMap":{"version":3,"sources":["/packages/babel-runtime/packages/babel-runtime.js"],"names":[],"mappingswH","file":"/packages/babel-runtime.js","sourcesContent":["(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                         //\n// packages/babel-runtime/babel-runtime.js                                                                 //\n//                                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                           //\nvar hasOwn = Object.prototype.hasOwnProperty;                                                              // 1\n                                                                                                           // 2\nfunction canDefineNonEnumerableProperties() {                                                              // 3\n  var testObj = {};                                                                                        // 4\n  var testPropName = \"t\";                                                                                  // 5\n                                                                                                           // 6\n  try {                                                                                                    // 7\n    Object.defineProperty(testObj, testPropName, {                                                         // 8\n      enumerable: false,                                                                                   // 9\n      value: testObj                                                                                       // 10\n    });                                                                                                    // 11\n                                                                                                           // 12\n    for (var k in testObj) {                                                                               // 13\n      if (k === testPropName) {                                                                            // 14\n        return false;                                                                                      // 15\n      }                                                                                                    // 16\n    }                                                                                                      // 17\n  } catch (e) {                                                                                            // 18\n    return false;                                                                                          // 19\n  }                                                                                                        // 20\n                                                                                                           // 21\n  return testObj[testPropName] === testObj;                                                                // 22\n}                                                                                                          // 23\n                                                                                                           // 24\n// The name `babelHelpers` is hard-coded in Babel.  Otherwise we would make it                             // 25\n// something capitalized and more descriptive, like `BabelRuntime`.                                        // 26\nbabelHelpers = {                                                                                           // 27\n  // Meteor-specific runtime helper for wrapping the object of for-in                                      // 28\n  // loops, so that inherited Array methods defined by es5-shim can be                                     // 29\n  // ignored in browsers where they cannot be defined as non-enumerable.                                   // 30\n  sanitizeForInObject: canDefineNonEnumerableProperties()                                                  // 31\n    ? function (value) { return value; }                                                                   // 32\n    : function (obj) {                                                                                     // 33\n      if (Array.isArray(obj)) {                                                                            // 34\n        var newObj = {};                                                                                   // 35\n        var keys = Object.keys(obj);                                                                       // 36\n        var keyCount = keys.length;                                                                        // 37\n        for (var i = 0; i < keyCount; ++i) {                                                               // 38\n          var key = keys[i];                                                                               // 39\n          newObj[key] = obj[key];                                                                          // 40\n        }                                                                                                  // 41\n        return newObj;                                                                                     // 42\n      }                                                                                                    // 43\n                                                                                                           // 44\n      return obj;                                                                                          // 45\n    },                                                                                                     // 46\n                                                                                                           // 47\n  // es6.templateLiterals                                                                                  // 48\n  // Constructs the object passed to the tag function in a tagged                                          // 49\n  // template literal.                                                                                     // 50\n  taggedTemplateLiteralLoose: function (strings, raw) {                                                    // 51\n    // Babel's own version of this calls Object.freeze on `strings` and                                    // 52\n    // `strings.raw`, but it doesn't seem worth the compatibility and                                      // 53\n    // performance concerns.  If you're writing code against this helper,                                  // 54\n    // don't add properties to these objects.                                                              // 55\n    strings.raw = raw;                                                                                     // 56\n    return strings;                                                                                        // 57\n  },                                                                                                       // 58\n                                                                                                           // 59\n  // es6.classes                                                                                           // 60\n  // Checks that a class constructor is being called with `new`, and throws                                // 61\n  // an error if it is not.                                                                                // 62\n  classCallCheck: function (instance, Constructor) {                                                       // 63\n    if (!(instance instanceof Constructor)) {                                                              // 64\n      throw new TypeError(\"Cannot call a class as a function\");                                            // 65\n    }                                                                                                      // 66\n  },                                                                                                       // 67\n                                                                                                           // 68\n  // es6.classes                                                                                           // 69\n  inherits: function (subClass, superClass) {                                                              // 70\n    if (typeof superClass !== \"function\" && superClass !== null) {                                         // 71\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }                                                                                                      // 73\n                                                                                                           // 74\n    if (superClass) {                                                                                      // 75\n      if (Object.create) {                                                                                 // 76\n        // All but IE 8                                                                                    // 77\n        subClass.prototype = Object.create(superClass.prototype, {                                         // 78\n          constructor: {                                                                                   // 79\n            value: subClass,                                                                               // 80\n            enumerable: false,                                                                             // 81\n            writable: true,                                                                                // 82\n            configurable: true                                                                             // 83\n          }                                                                                                // 84\n        });                                                                                                // 85\n      } else {                                                                                             // 86\n        // IE 8 path.  Slightly worse for modern browsers, because `constructor`                           // 87\n        // is enumerable and shows up in the inspector unnecessarily.                                      // 88\n        // It's not an \"own\" property of any instance though.                                              // 89\n        //                                                                                                 // 90\n        // For correctness when writing code,                                                              // 91\n        // don't enumerate all the own-and-inherited properties of an instance                             // 92\n        // of a class and expect not to find `constructor` (but who does that?).                           // 93\n        var F = function () {                                                                              // 94\n          this.constructor = subClass;                                                                     // 95\n        };                                                                                                 // 96\n        F.prototype = superClass.prototype;                                                                // 97\n        subClass.prototype = new F();                                                                      // 98\n      }                                                                                                    // 99\n                                                                                                           // 100\n      // For modern browsers, this would be `subClass.__proto__ = superClass`,                             // 101\n      // but IE <=10 don't support `__proto__`, and in this case the difference                            // 102\n      // would be detectable; code that works in modern browsers could easily                              // 103\n      // fail on IE 8 if we ever used the `__proto__` trick.                                               // 104\n      //                                                                                                   // 105\n      // There's no perfect way to make static methods inherited if they are                               // 106\n      // assigned after declaration of the classes.  The best we can do is                                 // 107\n      // to copy them.  In other words, when you write `class Foo                                          // 108\n      // extends Bar`, we copy the static methods from Bar onto Foo, but future                            // 109\n      // ones are not copied.                                                                              // 110\n      //                                                                                                   // 111\n      // For correctness when writing code, don't add static methods to a class                            // 112\n      // after you subclass it.                                                                            // 113\n      for (var k in superClass) {                                                                          // 114\n        if (hasOwn.call(superClass, k)) {                                                                  // 115\n          subClass[k] = superClass[k];                                                                     // 116\n        }                                                                                                  // 117\n      }                                                                                                    // 118\n    }                                                                                                      // 119\n  },                                                                                                       // 120\n                                                                                                           // 121\n  createClass: (function () {                                                                              // 122\n    var hasDefineProperty = false;                                                                         // 123\n    try {                                                                                                  // 124\n      // IE 8 has a broken Object.defineProperty, so feature-test by                                       // 125\n      // trying to call it.                                                                                // 126\n      Object.defineProperty({}, 'x', {});                                                                  // 127\n      hasDefineProperty = true;                                                                            // 128\n    } catch (e) {}                                                                                         // 129\n                                                                                                           // 130\n    function defineProperties(target, props) {                                                             // 131\n      for (var i = 0; i < props.length; i++) {                                                             // 132\n        var descriptor = props[i];                                                                         // 133\n        descriptor.enumerable = descriptor.enumerable || false;                                            // 134\n        descriptor.configurable = true;                                                                    // 135\n        if (\"value\" in descriptor) descriptor.writable = true;                                             // 136\n        Object.defineProperty(target, descriptor.key, descriptor);                                         // 137\n      }                                                                                                    // 138\n    }                                                                                                      // 139\n                                                                                                           // 140\n    return function (Constructor, protoProps, staticProps) {                                               // 141\n      if (! hasDefineProperty) {                                                                           // 142\n        // e.g. `class Foo { get bar() {} }`.  If you try to use getters and                               // 143\n        // setters in IE 8, you will get a big nasty error, with or without                                // 144\n        // Babel.  I don't know of any other syntax features besides getters                               // 145\n        // and setters that will trigger this error.                                                       // 146\n        throw new Error(                                                                                   // 147\n          \"Your browser does not support this type of class property.  \" +                                 // 148\n            \"For example, Internet Explorer 8 does not support getters and \" +                             // 149\n            \"setters.\");                                                                                   // 150\n      }                                                                                                    // 151\n                                                                                                           // 152\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);                                 // 153\n      if (staticProps) defineProperties(Constructor, staticProps);                                         // 154\n      return Constructor;                                                                                  // 155\n    };                                                                                                     // 156\n  })(),                                                                                                    // 157\n                                                                                                           // 158\n  // es7.objectRestSpread and react (JSX)                                                                  // 159\n  _extends: Object.assign || (function (target) {                                                          // 160\n    for (var i = 1; i < arguments.length; i++) {                                                           // 161\n      var source = arguments[i];                                                                           // 162\n      for (var key in source) {                                                                            // 163\n        if (hasOwn.call(source, key)) {                                                                    // 164\n          target[key] = source[key];                                                                       // 165\n        }                                                                                                  // 166\n      }                                                                                                    // 167\n    }                                                                                                      // 168\n    return target;                                                                                         // 169\n  }),                                                                                                      // 170\n                                                                                                           // 171\n  // es6.destructuring                                                                                     // 172\n  objectWithoutProperties: function (obj, keys) {                                                          // 173\n    var target = {};                                                                                       // 174\n    outer: for (var i in obj) {                                                                            // 175\n      if (! hasOwn.call(obj, i)) continue;                                                                 // 176\n      for (var j = 0; j < keys.length; j++) {                                                              // 177\n        if (keys[j] === i) continue outer;                                                                 // 178\n      }                                                                                                    // 179\n      target[i] = obj[i];                                                                                  // 180\n    }                                                                                                      // 181\n    return target;                                                                                         // 182\n  },                                                                                                       // 183\n                                                                                                           // 184\n  // es6.destructuring                                                                                     // 185\n  objectDestructuringEmpty: function (obj) {                                                               // 186\n    if (obj == null) throw new TypeError(\"Cannot destructure undefined\");                                  // 187\n  },                                                                                                       // 188\n                                                                                                           // 189\n  // es6.spread                                                                                            // 190\n  bind: Function.prototype.bind || (function () {                                                          // 191\n    var isCallable = function (value) { return typeof value === 'function'; };                             // 192\n    var $Object = Object;                                                                                  // 193\n    var to_string = Object.prototype.toString;                                                             // 194\n    var array_slice = Array.prototype.slice;                                                               // 195\n    var array_concat = Array.prototype.concat;                                                             // 196\n    var array_push = Array.prototype.push;                                                                 // 197\n    var max = Math.max;                                                                                    // 198\n    var Empty = function Empty() {};                                                                       // 199\n                                                                                                           // 200\n    // Copied from es5-shim.js (3ac7942).  See original for more comments.                                 // 201\n    return function bind(that) {                                                                           // 202\n      var target = this;                                                                                   // 203\n      if (!isCallable(target)) {                                                                           // 204\n        throw new TypeError('Function.prototype.bind called on incompatible ' + target);                   // 205\n      }                                                                                                    // 206\n                                                                                                           // 207\n      var args = array_slice.call(arguments, 1);                                                           // 208\n                                                                                                           // 209\n      var bound;                                                                                           // 210\n      var binder = function () {                                                                           // 211\n                                                                                                           // 212\n        if (this instanceof bound) {                                                                       // 213\n          var result = target.apply(                                                                       // 214\n            this,                                                                                          // 215\n            array_concat.call(args, array_slice.call(arguments))                                           // 216\n          );                                                                                               // 217\n          if ($Object(result) === result) {                                                                // 218\n            return result;                                                                                 // 219\n          }                                                                                                // 220\n          return this;                                                                                     // 221\n        } else {                                                                                           // 222\n          return target.apply(                                                                             // 223\n            that,                                                                                          // 224\n            array_concat.call(args, array_slice.call(arguments))                                           // 225\n          );                                                                                               // 226\n        }                                                                                                  // 227\n      };                                                                                                   // 228\n                                                                                                           // 229\n      var boundLength = max(0, target.length - args.length);                                               // 230\n                                                                                                           // 231\n      var boundArgs = [];                                                                                  // 232\n      for (var i = 0; i < boundLength; i++) {                                                              // 233\n        array_push.call(boundArgs, '$' + i);                                                               // 234\n      }                                                                                                    // 235\n                                                                                                           // 236\n      // Create a Function from source code so that it has the right `.length`.                            // 237\n      // Probably not important for Babel.  This code violates CSPs that ban                               // 238\n      // `eval`, but the browsers that need this polyfill don't have CSP!                                  // 239\n      bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);\n                                                                                                           // 241\n      if (target.prototype) {                                                                              // 242\n        Empty.prototype = target.prototype;                                                                // 243\n        bound.prototype = new Empty();                                                                     // 244\n        Empty.prototype = null;                                                                            // 245\n      }                                                                                                    // 246\n                                                                                                           // 247\n      return bound;                                                                                        // 248\n    };                                                                                                     // 249\n                                                                                                           // 250\n  })(),                                                                                                    // 251\n                                                                                                           // 252\n  slice: Array.prototype.slice                                                                             // 253\n};                                                                                                         // 254\n                                                                                                           // 255\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]