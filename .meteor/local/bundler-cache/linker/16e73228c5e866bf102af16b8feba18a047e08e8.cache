[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar ClientVersions, Autoupdate;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// packages/autoupdate/packages/autoupdate.js                                                     //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\n(function(){                                                                                      // 1\n                                                                                                  // 2\n/////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                         //     // 4\n// packages/autoupdate/autoupdate_client.js                                                //     // 5\n//                                                                                         //     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                           //     // 8\n// Subscribe to the `meteor_autoupdate_clientVersions` collection,                         // 1   // 9\n// which contains the set of acceptable client versions.                                   // 2   // 10\n//                                                                                         // 3   // 11\n// A \"hard code push\" occurs when the running client version is not in                     // 4   // 12\n// the set of acceptable client versions (or the server updates the                        // 5   // 13\n// collection, there is a published client version marked `current` and                    // 6   // 14\n// the running client version is no longer in the set).                                    // 7   // 15\n//                                                                                         // 8   // 16\n// When the `reload` package is loaded, a hard code push causes                            // 9   // 17\n// the browser to reload, so that it will load the latest client                           // 10  // 18\n// version from the server.                                                                // 11  // 19\n//                                                                                         // 12  // 20\n// A \"soft code push\" represents the situation when the running client                     // 13  // 21\n// version is in the set of acceptable versions, but there is a newer                      // 14  // 22\n// version available on the server.                                                        // 15  // 23\n//                                                                                         // 16  // 24\n// `Autoupdate.newClientAvailable` is a reactive data source which                         // 17  // 25\n// becomes `true` if there is a new version of the client is available on                  // 18  // 26\n// the server.                                                                             // 19  // 27\n//                                                                                         // 20  // 28\n// This package doesn't implement a soft code reload process itself,                       // 21  // 29\n// but `newClientAvailable` could be used for example to display a                         // 22  // 30\n// \"click to reload\" link to the user.                                                     // 23  // 31\n                                                                                           // 24  // 32\n// The client version of the client code currently running in the                          // 25  // 33\n// browser.                                                                                // 26  // 34\nvar autoupdateVersion = __meteor_runtime_config__.autoupdateVersion || \"unknown\";          // 27  // 35\nvar autoupdateVersionRefreshable =                                                         // 28  // 36\n  __meteor_runtime_config__.autoupdateVersionRefreshable || \"unknown\";                     // 29  // 37\n                                                                                           // 30  // 38\n// The collection of acceptable client versions.                                           // 31  // 39\nClientVersions = new Mongo.Collection(\"meteor_autoupdate_clientVersions\");                 // 32  // 40\n                                                                                           // 33  // 41\nAutoupdate = {};                                                                           // 34  // 42\n                                                                                           // 35  // 43\nAutoupdate.newClientAvailable = function () {                                              // 36  // 44\n  return !! ClientVersions.findOne({                                                       // 37  // 45\n               _id: \"version\",                                                             // 38  // 46\n               version: {$ne: autoupdateVersion} }) ||                                     // 39  // 47\n         !! ClientVersions.findOne({                                                       // 40  // 48\n               _id: \"version-refreshable\",                                                 // 41  // 49\n               version: {$ne: autoupdateVersionRefreshable} });                            // 42  // 50\n};                                                                                         // 43  // 51\nAutoupdate._ClientVersions = ClientVersions;  // Used by a self-test                       // 44  // 52\n                                                                                           // 45  // 53\nvar knownToSupportCssOnLoad = false;                                                       // 46  // 54\n                                                                                           // 47  // 55\nvar retry = new Retry({                                                                    // 48  // 56\n  // Unlike the stream reconnect use of Retry, which we want to be instant                 // 49  // 57\n  // in normal operation, this is a wacky failure. We don't want to retry                  // 50  // 58\n  // right away, we can start slowly.                                                      // 51  // 59\n  //                                                                                       // 52  // 60\n  // A better way than timeconstants here might be to use the knowledge                    // 53  // 61\n  // of when we reconnect to help trigger these retries. Typically, the                    // 54  // 62\n  // server fixing code will result in a restart and reconnect, but                        // 55  // 63\n  // potentially the subscription could have a transient error.                            // 56  // 64\n  minCount: 0, // don't do any immediate retries                                           // 57  // 65\n  baseTimeout: 30*1000 // start with 30s                                                   // 58  // 66\n});                                                                                        // 59  // 67\nvar failures = 0;                                                                          // 60  // 68\n                                                                                           // 61  // 69\nAutoupdate._retrySubscription = function () {                                              // 62  // 70\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {                                   // 63  // 71\n    onError: function (error) {                                                            // 64  // 72\n      Meteor._debug(\"autoupdate subscription failed:\", error);                             // 65  // 73\n      failures++;                                                                          // 66  // 74\n      retry.retryLater(failures, function () {                                             // 67  // 75\n        // Just retry making the subscription, don't reload the whole                      // 68  // 76\n        // page. While reloading would catch more cases (for example,                      // 69  // 77\n        // the server went back a version and is now doing old-style hot                   // 70  // 78\n        // code push), it would also be more prone to reload loops,                        // 71  // 79\n        // which look really bad to the user. Just retrying the                            // 72  // 80\n        // subscription over DDP means it is at least possible to fix by                   // 73  // 81\n        // updating the server.                                                            // 74  // 82\n        Autoupdate._retrySubscription();                                                   // 75  // 83\n      });                                                                                  // 76  // 84\n    },                                                                                     // 77  // 85\n    onReady: function () {                                                                 // 78  // 86\n      if (Package.reload) {                                                                // 79  // 87\n        var checkNewVersionDocument = function (doc) {                                     // 80  // 88\n          var self = this;                                                                 // 81  // 89\n          if (doc._id === 'version-refreshable' &&                                         // 82  // 90\n              doc.version !== autoupdateVersionRefreshable) {                              // 83  // 91\n            autoupdateVersionRefreshable = doc.version;                                    // 84  // 92\n            // Switch out old css links for the new css links. Inspired by:                // 85  // 93\n            // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710        // 94\n            var newCss = (doc.assets && doc.assets.allCss) || [];                          // 87  // 95\n            var oldLinks = [];                                                             // 88  // 96\n            _.each(document.getElementsByTagName('link'), function (link) {                // 89  // 97\n              if (link.className === '__meteor-css__') {                                   // 90  // 98\n                oldLinks.push(link);                                                       // 91  // 99\n              }                                                                            // 92  // 100\n            });                                                                            // 93  // 101\n                                                                                           // 94  // 102\n            var waitUntilCssLoads = function  (link, callback) {                           // 95  // 103\n              var executeCallback = _.once(callback);                                      // 96  // 104\n              link.onload = function () {                                                  // 97  // 105\n                knownToSupportCssOnLoad = true;                                            // 98  // 106\n                executeCallback();                                                         // 99  // 107\n              };                                                                           // 100\n              if (! knownToSupportCssOnLoad) {                                             // 101\n                var id = Meteor.setInterval(function () {                                  // 102\n                  if (link.sheet) {                                                        // 103\n                    executeCallback();                                                     // 104\n                    Meteor.clearInterval(id);                                              // 105\n                  }                                                                        // 106\n                }, 50);                                                                    // 107\n              }                                                                            // 108\n            };                                                                             // 109\n                                                                                           // 110\n            var removeOldLinks = _.after(newCss.length, function () {                      // 111\n              _.each(oldLinks, function (oldLink) {                                        // 112\n                oldLink.parentNode.removeChild(oldLink);                                   // 113\n              });                                                                          // 114\n            });                                                                            // 115\n                                                                                           // 116\n            var attachStylesheetLink = function (newLink) {                                // 117\n              document.getElementsByTagName(\"head\").item(0).appendChild(newLink);          // 118\n                                                                                           // 119\n              waitUntilCssLoads(newLink, function () {                                     // 120\n                Meteor.setTimeout(removeOldLinks, 200);                                    // 121\n              });                                                                          // 122\n            };                                                                             // 123\n                                                                                           // 124\n            if (newCss.length !== 0) {                                                     // 125\n              _.each(newCss, function (css) {                                              // 126\n                var newLink = document.createElement(\"link\");                              // 127\n                newLink.setAttribute(\"rel\", \"stylesheet\");                                 // 128\n                newLink.setAttribute(\"type\", \"text/css\");                                  // 129\n                newLink.setAttribute(\"class\", \"__meteor-css__\");                           // 130\n                newLink.setAttribute(\"href\", Meteor._relativeToSiteRootUrl(css.url));      // 131\n                attachStylesheetLink(newLink);                                             // 132\n              });                                                                          // 133\n            } else {                                                                       // 134\n              removeOldLinks();                                                            // 135\n            }                                                                              // 136\n                                                                                           // 137\n          }                                                                                // 138\n          else if (doc._id === 'version' && doc.version !== autoupdateVersion) {           // 139\n            handle && handle.stop();                                                       // 140\n                                                                                           // 141\n            if (Package.reload) {                                                          // 142\n              Package.reload.Reload._reload();                                             // 143\n            }                                                                              // 144\n          }                                                                                // 145\n        };                                                                                 // 146\n                                                                                           // 147\n        var handle = ClientVersions.find().observe({                                       // 148\n          added: checkNewVersionDocument,                                                  // 149\n          changed: checkNewVersionDocument                                                 // 150\n        });                                                                                // 151\n      }                                                                                    // 152\n    }                                                                                      // 153\n  });                                                                                      // 154\n};                                                                                         // 155\nAutoupdate._retrySubscription();                                                           // 156\n                                                                                           // 157\n/////////////////////////////////////////////////////////////////////////////////////////////     // 166\n                                                                                                  // 167\n}).call(this);                                                                                    // 168\n                                                                                                  // 169\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.autoupdate = {\n  Autoupdate: Autoupdate\n};\n\n})();\n","servePath":"/packages/autoupdate.js","sourceMap":{"version":3,"sources":["/packages/autoupdate/packages/autoupdate.js"],"names":[],"mappingswG","file":"/packages/autoupdate.js","sourcesContent":["(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                         //\n// packages/autoupdate/autoupdate_client.js                                                //\n//                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                           //\n// Subscribe to the `meteor_autoupdate_clientVersions` collection,                         // 1\n// which contains the set of acceptable client versions.                                   // 2\n//                                                                                         // 3\n// A \"hard code push\" occurs when the running client version is not in                     // 4\n// the set of acceptable client versions (or the server updates the                        // 5\n// collection, there is a published client version marked `current` and                    // 6\n// the running client version is no longer in the set).                                    // 7\n//                                                                                         // 8\n// When the `reload` package is loaded, a hard code push causes                            // 9\n// the browser to reload, so that it will load the latest client                           // 10\n// version from the server.                                                                // 11\n//                                                                                         // 12\n// A \"soft code push\" represents the situation when the running client                     // 13\n// version is in the set of acceptable versions, but there is a newer                      // 14\n// version available on the server.                                                        // 15\n//                                                                                         // 16\n// `Autoupdate.newClientAvailable` is a reactive data source which                         // 17\n// becomes `true` if there is a new version of the client is available on                  // 18\n// the server.                                                                             // 19\n//                                                                                         // 20\n// This package doesn't implement a soft code reload process itself,                       // 21\n// but `newClientAvailable` could be used for example to display a                         // 22\n// \"click to reload\" link to the user.                                                     // 23\n                                                                                           // 24\n// The client version of the client code currently running in the                          // 25\n// browser.                                                                                // 26\nvar autoupdateVersion = __meteor_runtime_config__.autoupdateVersion || \"unknown\";          // 27\nvar autoupdateVersionRefreshable =                                                         // 28\n  __meteor_runtime_config__.autoupdateVersionRefreshable || \"unknown\";                     // 29\n                                                                                           // 30\n// The collection of acceptable client versions.                                           // 31\nClientVersions = new Mongo.Collection(\"meteor_autoupdate_clientVersions\");                 // 32\n                                                                                           // 33\nAutoupdate = {};                                                                           // 34\n                                                                                           // 35\nAutoupdate.newClientAvailable = function () {                                              // 36\n  return !! ClientVersions.findOne({                                                       // 37\n               _id: \"version\",                                                             // 38\n               version: {$ne: autoupdateVersion} }) ||                                     // 39\n         !! ClientVersions.findOne({                                                       // 40\n               _id: \"version-refreshable\",                                                 // 41\n               version: {$ne: autoupdateVersionRefreshable} });                            // 42\n};                                                                                         // 43\nAutoupdate._ClientVersions = ClientVersions;  // Used by a self-test                       // 44\n                                                                                           // 45\nvar knownToSupportCssOnLoad = false;                                                       // 46\n                                                                                           // 47\nvar retry = new Retry({                                                                    // 48\n  // Unlike the stream reconnect use of Retry, which we want to be instant                 // 49\n  // in normal operation, this is a wacky failure. We don't want to retry                  // 50\n  // right away, we can start slowly.                                                      // 51\n  //                                                                                       // 52\n  // A better way than timeconstants here might be to use the knowledge                    // 53\n  // of when we reconnect to help trigger these retries. Typically, the                    // 54\n  // server fixing code will result in a restart and reconnect, but                        // 55\n  // potentially the subscription could have a transient error.                            // 56\n  minCount: 0, // don't do any immediate retries                                           // 57\n  baseTimeout: 30*1000 // start with 30s                                                   // 58\n});                                                                                        // 59\nvar failures = 0;                                                                          // 60\n                                                                                           // 61\nAutoupdate._retrySubscription = function () {                                              // 62\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {                                   // 63\n    onError: function (error) {                                                            // 64\n      Meteor._debug(\"autoupdate subscription failed:\", error);                             // 65\n      failures++;                                                                          // 66\n      retry.retryLater(failures, function () {                                             // 67\n        // Just retry making the subscription, don't reload the whole                      // 68\n        // page. While reloading would catch more cases (for example,                      // 69\n        // the server went back a version and is now doing old-style hot                   // 70\n        // code push), it would also be more prone to reload loops,                        // 71\n        // which look really bad to the user. Just retrying the                            // 72\n        // subscription over DDP means it is at least possible to fix by                   // 73\n        // updating the server.                                                            // 74\n        Autoupdate._retrySubscription();                                                   // 75\n      });                                                                                  // 76\n    },                                                                                     // 77\n    onReady: function () {                                                                 // 78\n      if (Package.reload) {                                                                // 79\n        var checkNewVersionDocument = function (doc) {                                     // 80\n          var self = this;                                                                 // 81\n          if (doc._id === 'version-refreshable' &&                                         // 82\n              doc.version !== autoupdateVersionRefreshable) {                              // 83\n            autoupdateVersionRefreshable = doc.version;                                    // 84\n            // Switch out old css links for the new css links. Inspired by:                // 85\n            // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n            var newCss = (doc.assets && doc.assets.allCss) || [];                          // 87\n            var oldLinks = [];                                                             // 88\n            _.each(document.getElementsByTagName('link'), function (link) {                // 89\n              if (link.className === '__meteor-css__') {                                   // 90\n                oldLinks.push(link);                                                       // 91\n              }                                                                            // 92\n            });                                                                            // 93\n                                                                                           // 94\n            var waitUntilCssLoads = function  (link, callback) {                           // 95\n              var executeCallback = _.once(callback);                                      // 96\n              link.onload = function () {                                                  // 97\n                knownToSupportCssOnLoad = true;                                            // 98\n                executeCallback();                                                         // 99\n              };                                                                           // 100\n              if (! knownToSupportCssOnLoad) {                                             // 101\n                var id = Meteor.setInterval(function () {                                  // 102\n                  if (link.sheet) {                                                        // 103\n                    executeCallback();                                                     // 104\n                    Meteor.clearInterval(id);                                              // 105\n                  }                                                                        // 106\n                }, 50);                                                                    // 107\n              }                                                                            // 108\n            };                                                                             // 109\n                                                                                           // 110\n            var removeOldLinks = _.after(newCss.length, function () {                      // 111\n              _.each(oldLinks, function (oldLink) {                                        // 112\n                oldLink.parentNode.removeChild(oldLink);                                   // 113\n              });                                                                          // 114\n            });                                                                            // 115\n                                                                                           // 116\n            var attachStylesheetLink = function (newLink) {                                // 117\n              document.getElementsByTagName(\"head\").item(0).appendChild(newLink);          // 118\n                                                                                           // 119\n              waitUntilCssLoads(newLink, function () {                                     // 120\n                Meteor.setTimeout(removeOldLinks, 200);                                    // 121\n              });                                                                          // 122\n            };                                                                             // 123\n                                                                                           // 124\n            if (newCss.length !== 0) {                                                     // 125\n              _.each(newCss, function (css) {                                              // 126\n                var newLink = document.createElement(\"link\");                              // 127\n                newLink.setAttribute(\"rel\", \"stylesheet\");                                 // 128\n                newLink.setAttribute(\"type\", \"text/css\");                                  // 129\n                newLink.setAttribute(\"class\", \"__meteor-css__\");                           // 130\n                newLink.setAttribute(\"href\", Meteor._relativeToSiteRootUrl(css.url));      // 131\n                attachStylesheetLink(newLink);                                             // 132\n              });                                                                          // 133\n            } else {                                                                       // 134\n              removeOldLinks();                                                            // 135\n            }                                                                              // 136\n                                                                                           // 137\n          }                                                                                // 138\n          else if (doc._id === 'version' && doc.version !== autoupdateVersion) {           // 139\n            handle && handle.stop();                                                       // 140\n                                                                                           // 141\n            if (Package.reload) {                                                          // 142\n              Package.reload.Reload._reload();                                             // 143\n            }                                                                              // 144\n          }                                                                                // 145\n        };                                                                                 // 146\n                                                                                           // 147\n        var handle = ClientVersions.find().observe({                                       // 148\n          added: checkNewVersionDocument,                                                  // 149\n          changed: checkNewVersionDocument                                                 // 150\n        });                                                                                // 151\n      }                                                                                    // 152\n    }                                                                                      // 153\n  });                                                                                      // 154\n};                                                                                         // 155\nAutoupdate._retrySubscription();                                                           // 156\n                                                                                           // 157\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]