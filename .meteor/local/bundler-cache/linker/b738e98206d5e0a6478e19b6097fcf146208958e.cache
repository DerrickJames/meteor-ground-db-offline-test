[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar Random;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                         //\n// packages/random/packages/random.js                                                      //\n//                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                           //\n(function(){                                                                               // 1\n                                                                                           // 2\n//////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                  //     // 4\n// packages/random/random.js                                                        //     // 5\n//                                                                                  //     // 6\n//////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                    //     // 8\n// We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,    // 1   // 9\n// window.crypto.getRandomValues() in the browser) when available. If these         // 2   // 10\n// PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically        // 3   // 11\n// strong, and we seed it with various sources such as the date, Math.random,       // 4   // 12\n// and window size on the client.  When using crypto.getRandomValues(), our         // 5   // 13\n// primitive is hexString(), from which we construct fraction(). When using         // 6   // 14\n// window.crypto.getRandomValues() or alea, the primitive is fraction and we use    // 7   // 15\n// that to construct hex string.                                                    // 8   // 16\n                                                                                    // 9   // 17\nif (Meteor.isServer)                                                                // 10  // 18\n  var nodeCrypto = Npm.require('crypto');                                           // 11  // 19\n                                                                                    // 12  // 20\n// see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript               // 13  // 21\n// for a full discussion and Alea implementation.                                   // 14  // 22\nvar Alea = function () {                                                            // 15  // 23\n  function Mash() {                                                                 // 16  // 24\n    var n = 0xefc8249d;                                                             // 17  // 25\n                                                                                    // 18  // 26\n    var mash = function(data) {                                                     // 19  // 27\n      data = data.toString();                                                       // 20  // 28\n      for (var i = 0; i < data.length; i++) {                                       // 21  // 29\n        n += data.charCodeAt(i);                                                    // 22  // 30\n        var h = 0.02519603282416938 * n;                                            // 23  // 31\n        n = h >>> 0;                                                                // 24  // 32\n        h -= n;                                                                     // 25  // 33\n        h *= n;                                                                     // 26  // 34\n        n = h >>> 0;                                                                // 27  // 35\n        h -= n;                                                                     // 28  // 36\n        n += h * 0x100000000; // 2^32                                               // 29  // 37\n      }                                                                             // 30  // 38\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32                           // 31  // 39\n    };                                                                              // 32  // 40\n                                                                                    // 33  // 41\n    mash.version = 'Mash 0.9';                                                      // 34  // 42\n    return mash;                                                                    // 35  // 43\n  }                                                                                 // 36  // 44\n                                                                                    // 37  // 45\n  return (function (args) {                                                         // 38  // 46\n    var s0 = 0;                                                                     // 39  // 47\n    var s1 = 0;                                                                     // 40  // 48\n    var s2 = 0;                                                                     // 41  // 49\n    var c = 1;                                                                      // 42  // 50\n                                                                                    // 43  // 51\n    if (args.length == 0) {                                                         // 44  // 52\n      args = [+new Date];                                                           // 45  // 53\n    }                                                                               // 46  // 54\n    var mash = Mash();                                                              // 47  // 55\n    s0 = mash(' ');                                                                 // 48  // 56\n    s1 = mash(' ');                                                                 // 49  // 57\n    s2 = mash(' ');                                                                 // 50  // 58\n                                                                                    // 51  // 59\n    for (var i = 0; i < args.length; i++) {                                         // 52  // 60\n      s0 -= mash(args[i]);                                                          // 53  // 61\n      if (s0 < 0) {                                                                 // 54  // 62\n        s0 += 1;                                                                    // 55  // 63\n      }                                                                             // 56  // 64\n      s1 -= mash(args[i]);                                                          // 57  // 65\n      if (s1 < 0) {                                                                 // 58  // 66\n        s1 += 1;                                                                    // 59  // 67\n      }                                                                             // 60  // 68\n      s2 -= mash(args[i]);                                                          // 61  // 69\n      if (s2 < 0) {                                                                 // 62  // 70\n        s2 += 1;                                                                    // 63  // 71\n      }                                                                             // 64  // 72\n    }                                                                               // 65  // 73\n    mash = null;                                                                    // 66  // 74\n                                                                                    // 67  // 75\n    var random = function() {                                                       // 68  // 76\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32                   // 69  // 77\n      s0 = s1;                                                                      // 70  // 78\n      s1 = s2;                                                                      // 71  // 79\n      return s2 = t - (c = t | 0);                                                  // 72  // 80\n    };                                                                              // 73  // 81\n    random.uint32 = function() {                                                    // 74  // 82\n      return random() * 0x100000000; // 2^32                                        // 75  // 83\n    };                                                                              // 76  // 84\n    random.fract53 = function() {                                                   // 77  // 85\n      return random() +                                                             // 78  // 86\n        (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53                // 79  // 87\n    };                                                                              // 80  // 88\n    random.version = 'Alea 0.9';                                                    // 81  // 89\n    random.args = args;                                                             // 82  // 90\n    return random;                                                                  // 83  // 91\n                                                                                    // 84  // 92\n  } (Array.prototype.slice.call(arguments)));                                       // 85  // 93\n};                                                                                  // 86  // 94\n                                                                                    // 87  // 95\nvar UNMISTAKABLE_CHARS = \"23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz\";        // 96\nvar BASE64_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" +         // 89  // 97\n  \"0123456789-_\";                                                                   // 90  // 98\n                                                                                    // 91  // 99\n// If seeds are provided, then the alea PRNG will be used, since cryptographic      // 92  // 100\n// PRNGs (Node crypto and window.crypto.getRandomValues) don't allow us to          // 93  // 101\n// specify seeds. The caller is responsible for making sure to provide a seed       // 94  // 102\n// for alea if a csprng is not available.                                           // 95  // 103\nvar RandomGenerator = function (seedArray) {                                        // 96  // 104\n  var self = this;                                                                  // 97  // 105\n  if (seedArray !== undefined)                                                      // 98  // 106\n    self.alea = Alea.apply(null, seedArray);                                        // 99  // 107\n};                                                                                  // 100\n                                                                                    // 101\nRandomGenerator.prototype.fraction = function () {                                  // 102\n  var self = this;                                                                  // 103\n  if (self.alea) {                                                                  // 104\n    return self.alea();                                                             // 105\n  } else if (nodeCrypto) {                                                          // 106\n    var numerator = parseInt(self.hexString(8), 16);                                // 107\n    return numerator * 2.3283064365386963e-10; // 2^-32                             // 108\n  } else if (typeof window !== \"undefined\" && window.crypto &&                      // 109\n             window.crypto.getRandomValues) {                                       // 110\n    var array = new Uint32Array(1);                                                 // 111\n    window.crypto.getRandomValues(array);                                           // 112\n    return array[0] * 2.3283064365386963e-10; // 2^-32                              // 113\n  } else {                                                                          // 114\n    throw new Error('No random generator available');                               // 115\n  }                                                                                 // 116\n};                                                                                  // 117\n                                                                                    // 118\nRandomGenerator.prototype.hexString = function (digits) {                           // 119\n  var self = this;                                                                  // 120\n  if (nodeCrypto && ! self.alea) {                                                  // 121\n    var numBytes = Math.ceil(digits / 2);                                           // 122\n    var bytes;                                                                      // 123\n    // Try to get cryptographically strong randomness. Fall back to                 // 124\n    // non-cryptographically strong if not available.                               // 125\n    try {                                                                           // 126\n      bytes = nodeCrypto.randomBytes(numBytes);                                     // 127\n    } catch (e) {                                                                   // 128\n      // XXX should re-throw any error except insufficient entropy                  // 129\n      bytes = nodeCrypto.pseudoRandomBytes(numBytes);                               // 130\n    }                                                                               // 131\n    var result = bytes.toString(\"hex\");                                             // 132\n    // If the number of digits is odd, we'll have generated an extra 4 bits         // 133\n    // of randomness, so we need to trim the last digit.                            // 134\n    return result.substring(0, digits);                                             // 135\n  } else {                                                                          // 136\n    var hexDigits = [];                                                             // 137\n    for (var i = 0; i < digits; ++i) {                                              // 138\n      hexDigits.push(self.choice(\"0123456789abcdef\"));                              // 139\n    }                                                                               // 140\n    return hexDigits.join('');                                                      // 141\n  }                                                                                 // 142\n};                                                                                  // 143\n                                                                                    // 144\nRandomGenerator.prototype._randomString = function (charsCount,                     // 145\n                                                    alphabet) {                     // 146\n  var self = this;                                                                  // 147\n  var digits = [];                                                                  // 148\n  for (var i = 0; i < charsCount; i++) {                                            // 149\n    digits[i] = self.choice(alphabet);                                              // 150\n  }                                                                                 // 151\n  return digits.join(\"\");                                                           // 152\n};                                                                                  // 153\n                                                                                    // 154\nRandomGenerator.prototype.id = function (charsCount) {                              // 155\n  var self = this;                                                                  // 156\n  // 17 characters is around 96 bits of entropy, which is the amount of             // 157\n  // state in the Alea PRNG.                                                        // 158\n  if (charsCount === undefined)                                                     // 159\n    charsCount = 17;                                                                // 160\n                                                                                    // 161\n  return self._randomString(charsCount, UNMISTAKABLE_CHARS);                        // 162\n};                                                                                  // 163\n                                                                                    // 164\nRandomGenerator.prototype.secret = function (charsCount) {                          // 165\n  var self = this;                                                                  // 166\n  // Default to 256 bits of entropy, or 43 characters at 6 bits per                 // 167\n  // character.                                                                     // 168\n  if (charsCount === undefined)                                                     // 169\n    charsCount = 43;                                                                // 170\n  return self._randomString(charsCount, BASE64_CHARS);                              // 171\n};                                                                                  // 172\n                                                                                    // 173\nRandomGenerator.prototype.choice = function (arrayOrString) {                       // 174\n  var index = Math.floor(this.fraction() * arrayOrString.length);                   // 175\n  if (typeof arrayOrString === \"string\")                                            // 176\n    return arrayOrString.substr(index, 1);                                          // 177\n  else                                                                              // 178\n    return arrayOrString[index];                                                    // 179\n};                                                                                  // 180\n                                                                                    // 181\n// instantiate RNG.  Heuristically collect entropy from various sources when a      // 182\n// cryptographic PRNG isn't available.                                              // 183\n                                                                                    // 184\n// client sources                                                                   // 185\nvar height = (typeof window !== 'undefined' && window.innerHeight) ||               // 186\n      (typeof document !== 'undefined'                                              // 187\n       && document.documentElement                                                  // 188\n       && document.documentElement.clientHeight) ||                                 // 189\n      (typeof document !== 'undefined'                                              // 190\n       && document.body                                                             // 191\n       && document.body.clientHeight) ||                                            // 192\n      1;                                                                            // 193\n                                                                                    // 194\nvar width = (typeof window !== 'undefined' && window.innerWidth) ||                 // 195\n      (typeof document !== 'undefined'                                              // 196\n       && document.documentElement                                                  // 197\n       && document.documentElement.clientWidth) ||                                  // 198\n      (typeof document !== 'undefined'                                              // 199\n       && document.body                                                             // 200\n       && document.body.clientWidth) ||                                             // 201\n      1;                                                                            // 202\n                                                                                    // 203\nvar agent = (typeof navigator !== 'undefined' && navigator.userAgent) || \"\";        // 204\n                                                                                    // 205\nif (nodeCrypto ||                                                                   // 206\n    (typeof window !== \"undefined\" &&                                               // 207\n     window.crypto && window.crypto.getRandomValues))                               // 208\n  Random = new RandomGenerator();                                                   // 209\nelse                                                                                // 210\n  Random = new RandomGenerator([new Date(), height, width, agent, Math.random()]);  // 211\n                                                                                    // 212\nRandom.createWithSeeds = function () {                                              // 213\n  if (arguments.length === 0) {                                                     // 214\n    throw new Error('No seeds were provided');                                      // 215\n  }                                                                                 // 216\n  return new RandomGenerator(arguments);                                            // 217\n};                                                                                  // 218\n                                                                                    // 219\n//////////////////////////////////////////////////////////////////////////////////////     // 228\n                                                                                           // 229\n}).call(this);                                                                             // 230\n                                                                                           // 231\n                                                                                           // 232\n                                                                                           // 233\n                                                                                           // 234\n                                                                                           // 235\n                                                                                           // 236\n(function(){                                                                               // 237\n                                                                                           // 238\n//////////////////////////////////////////////////////////////////////////////////////     // 239\n//                                                                                  //     // 240\n// packages/random/deprecated.js                                                    //     // 241\n//                                                                                  //     // 242\n//////////////////////////////////////////////////////////////////////////////////////     // 243\n                                                                                    //     // 244\n// Before this package existed, we used to use this Meteor.uuid()                   // 1   // 245\n// implementing the RFC 4122 v4 UUID. It is no longer documented                    // 2   // 246\n// and will go away.                                                                // 3   // 247\n// XXX COMPAT WITH 0.5.6                                                            // 4   // 248\nMeteor.uuid = function () {                                                         // 5   // 249\n  var HEX_DIGITS = \"0123456789abcdef\";                                              // 6   // 250\n  var s = [];                                                                       // 7   // 251\n  for (var i = 0; i < 36; i++) {                                                    // 8   // 252\n    s[i] = Random.choice(HEX_DIGITS);                                               // 9   // 253\n  }                                                                                 // 10  // 254\n  s[14] = \"4\";                                                                      // 11  // 255\n  s[19] = HEX_DIGITS.substr((parseInt(s[19],16) & 0x3) | 0x8, 1);                   // 12  // 256\n  s[8] = s[13] = s[18] = s[23] = \"-\";                                               // 13  // 257\n                                                                                    // 14  // 258\n  var uuid = s.join(\"\");                                                            // 15  // 259\n  return uuid;                                                                      // 16  // 260\n};                                                                                  // 17  // 261\n                                                                                    // 18  // 262\n//////////////////////////////////////////////////////////////////////////////////////     // 263\n                                                                                           // 264\n}).call(this);                                                                             // 265\n                                                                                           // 266\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.random = {\n  Random: Random\n};\n\n})();\n","servePath":"/packages/random.js","sourceMap":{"version":3,"sources":["/packages/random/packages/random.js"],"names":[],"mappingsiG","file":"/packages/random.js","sourcesContent":["(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/random/random.js                                                        //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\n// We use cryptographically strong PRNGs (crypto.getRandomBytes() on the server,    // 1\n// window.crypto.getRandomValues() in the browser) when available. If these         // 2\n// PRNGs fail, we fall back to the Alea PRNG, which is not cryptographically        // 3\n// strong, and we seed it with various sources such as the date, Math.random,       // 4\n// and window size on the client.  When using crypto.getRandomValues(), our         // 5\n// primitive is hexString(), from which we construct fraction(). When using         // 6\n// window.crypto.getRandomValues() or alea, the primitive is fraction and we use    // 7\n// that to construct hex string.                                                    // 8\n                                                                                    // 9\nif (Meteor.isServer)                                                                // 10\n  var nodeCrypto = Npm.require('crypto');                                           // 11\n                                                                                    // 12\n// see http://baagoe.org/en/wiki/Better_random_numbers_for_javascript               // 13\n// for a full discussion and Alea implementation.                                   // 14\nvar Alea = function () {                                                            // 15\n  function Mash() {                                                                 // 16\n    var n = 0xefc8249d;                                                             // 17\n                                                                                    // 18\n    var mash = function(data) {                                                     // 19\n      data = data.toString();                                                       // 20\n      for (var i = 0; i < data.length; i++) {                                       // 21\n        n += data.charCodeAt(i);                                                    // 22\n        var h = 0.02519603282416938 * n;                                            // 23\n        n = h >>> 0;                                                                // 24\n        h -= n;                                                                     // 25\n        h *= n;                                                                     // 26\n        n = h >>> 0;                                                                // 27\n        h -= n;                                                                     // 28\n        n += h * 0x100000000; // 2^32                                               // 29\n      }                                                                             // 30\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32                           // 31\n    };                                                                              // 32\n                                                                                    // 33\n    mash.version = 'Mash 0.9';                                                      // 34\n    return mash;                                                                    // 35\n  }                                                                                 // 36\n                                                                                    // 37\n  return (function (args) {                                                         // 38\n    var s0 = 0;                                                                     // 39\n    var s1 = 0;                                                                     // 40\n    var s2 = 0;                                                                     // 41\n    var c = 1;                                                                      // 42\n                                                                                    // 43\n    if (args.length == 0) {                                                         // 44\n      args = [+new Date];                                                           // 45\n    }                                                                               // 46\n    var mash = Mash();                                                              // 47\n    s0 = mash(' ');                                                                 // 48\n    s1 = mash(' ');                                                                 // 49\n    s2 = mash(' ');                                                                 // 50\n                                                                                    // 51\n    for (var i = 0; i < args.length; i++) {                                         // 52\n      s0 -= mash(args[i]);                                                          // 53\n      if (s0 < 0) {                                                                 // 54\n        s0 += 1;                                                                    // 55\n      }                                                                             // 56\n      s1 -= mash(args[i]);                                                          // 57\n      if (s1 < 0) {                                                                 // 58\n        s1 += 1;                                                                    // 59\n      }                                                                             // 60\n      s2 -= mash(args[i]);                                                          // 61\n      if (s2 < 0) {                                                                 // 62\n        s2 += 1;                                                                    // 63\n      }                                                                             // 64\n    }                                                                               // 65\n    mash = null;                                                                    // 66\n                                                                                    // 67\n    var random = function() {                                                       // 68\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32                   // 69\n      s0 = s1;                                                                      // 70\n      s1 = s2;                                                                      // 71\n      return s2 = t - (c = t | 0);                                                  // 72\n    };                                                                              // 73\n    random.uint32 = function() {                                                    // 74\n      return random() * 0x100000000; // 2^32                                        // 75\n    };                                                                              // 76\n    random.fract53 = function() {                                                   // 77\n      return random() +                                                             // 78\n        (random() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53                // 79\n    };                                                                              // 80\n    random.version = 'Alea 0.9';                                                    // 81\n    random.args = args;                                                             // 82\n    return random;                                                                  // 83\n                                                                                    // 84\n  } (Array.prototype.slice.call(arguments)));                                       // 85\n};                                                                                  // 86\n                                                                                    // 87\nvar UNMISTAKABLE_CHARS = \"23456789ABCDEFGHJKLMNPQRSTWXYZabcdefghijkmnopqrstuvwxyz\";\nvar BASE64_CHARS = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\" +         // 89\n  \"0123456789-_\";                                                                   // 90\n                                                                                    // 91\n// If seeds are provided, then the alea PRNG will be used, since cryptographic      // 92\n// PRNGs (Node crypto and window.crypto.getRandomValues) don't allow us to          // 93\n// specify seeds. The caller is responsible for making sure to provide a seed       // 94\n// for alea if a csprng is not available.                                           // 95\nvar RandomGenerator = function (seedArray) {                                        // 96\n  var self = this;                                                                  // 97\n  if (seedArray !== undefined)                                                      // 98\n    self.alea = Alea.apply(null, seedArray);                                        // 99\n};                                                                                  // 100\n                                                                                    // 101\nRandomGenerator.prototype.fraction = function () {                                  // 102\n  var self = this;                                                                  // 103\n  if (self.alea) {                                                                  // 104\n    return self.alea();                                                             // 105\n  } else if (nodeCrypto) {                                                          // 106\n    var numerator = parseInt(self.hexString(8), 16);                                // 107\n    return numerator * 2.3283064365386963e-10; // 2^-32                             // 108\n  } else if (typeof window !== \"undefined\" && window.crypto &&                      // 109\n             window.crypto.getRandomValues) {                                       // 110\n    var array = new Uint32Array(1);                                                 // 111\n    window.crypto.getRandomValues(array);                                           // 112\n    return array[0] * 2.3283064365386963e-10; // 2^-32                              // 113\n  } else {                                                                          // 114\n    throw new Error('No random generator available');                               // 115\n  }                                                                                 // 116\n};                                                                                  // 117\n                                                                                    // 118\nRandomGenerator.prototype.hexString = function (digits) {                           // 119\n  var self = this;                                                                  // 120\n  if (nodeCrypto && ! self.alea) {                                                  // 121\n    var numBytes = Math.ceil(digits / 2);                                           // 122\n    var bytes;                                                                      // 123\n    // Try to get cryptographically strong randomness. Fall back to                 // 124\n    // non-cryptographically strong if not available.                               // 125\n    try {                                                                           // 126\n      bytes = nodeCrypto.randomBytes(numBytes);                                     // 127\n    } catch (e) {                                                                   // 128\n      // XXX should re-throw any error except insufficient entropy                  // 129\n      bytes = nodeCrypto.pseudoRandomBytes(numBytes);                               // 130\n    }                                                                               // 131\n    var result = bytes.toString(\"hex\");                                             // 132\n    // If the number of digits is odd, we'll have generated an extra 4 bits         // 133\n    // of randomness, so we need to trim the last digit.                            // 134\n    return result.substring(0, digits);                                             // 135\n  } else {                                                                          // 136\n    var hexDigits = [];                                                             // 137\n    for (var i = 0; i < digits; ++i) {                                              // 138\n      hexDigits.push(self.choice(\"0123456789abcdef\"));                              // 139\n    }                                                                               // 140\n    return hexDigits.join('');                                                      // 141\n  }                                                                                 // 142\n};                                                                                  // 143\n                                                                                    // 144\nRandomGenerator.prototype._randomString = function (charsCount,                     // 145\n                                                    alphabet) {                     // 146\n  var self = this;                                                                  // 147\n  var digits = [];                                                                  // 148\n  for (var i = 0; i < charsCount; i++) {                                            // 149\n    digits[i] = self.choice(alphabet);                                              // 150\n  }                                                                                 // 151\n  return digits.join(\"\");                                                           // 152\n};                                                                                  // 153\n                                                                                    // 154\nRandomGenerator.prototype.id = function (charsCount) {                              // 155\n  var self = this;                                                                  // 156\n  // 17 characters is around 96 bits of entropy, which is the amount of             // 157\n  // state in the Alea PRNG.                                                        // 158\n  if (charsCount === undefined)                                                     // 159\n    charsCount = 17;                                                                // 160\n                                                                                    // 161\n  return self._randomString(charsCount, UNMISTAKABLE_CHARS);                        // 162\n};                                                                                  // 163\n                                                                                    // 164\nRandomGenerator.prototype.secret = function (charsCount) {                          // 165\n  var self = this;                                                                  // 166\n  // Default to 256 bits of entropy, or 43 characters at 6 bits per                 // 167\n  // character.                                                                     // 168\n  if (charsCount === undefined)                                                     // 169\n    charsCount = 43;                                                                // 170\n  return self._randomString(charsCount, BASE64_CHARS);                              // 171\n};                                                                                  // 172\n                                                                                    // 173\nRandomGenerator.prototype.choice = function (arrayOrString) {                       // 174\n  var index = Math.floor(this.fraction() * arrayOrString.length);                   // 175\n  if (typeof arrayOrString === \"string\")                                            // 176\n    return arrayOrString.substr(index, 1);                                          // 177\n  else                                                                              // 178\n    return arrayOrString[index];                                                    // 179\n};                                                                                  // 180\n                                                                                    // 181\n// instantiate RNG.  Heuristically collect entropy from various sources when a      // 182\n// cryptographic PRNG isn't available.                                              // 183\n                                                                                    // 184\n// client sources                                                                   // 185\nvar height = (typeof window !== 'undefined' && window.innerHeight) ||               // 186\n      (typeof document !== 'undefined'                                              // 187\n       && document.documentElement                                                  // 188\n       && document.documentElement.clientHeight) ||                                 // 189\n      (typeof document !== 'undefined'                                              // 190\n       && document.body                                                             // 191\n       && document.body.clientHeight) ||                                            // 192\n      1;                                                                            // 193\n                                                                                    // 194\nvar width = (typeof window !== 'undefined' && window.innerWidth) ||                 // 195\n      (typeof document !== 'undefined'                                              // 196\n       && document.documentElement                                                  // 197\n       && document.documentElement.clientWidth) ||                                  // 198\n      (typeof document !== 'undefined'                                              // 199\n       && document.body                                                             // 200\n       && document.body.clientWidth) ||                                             // 201\n      1;                                                                            // 202\n                                                                                    // 203\nvar agent = (typeof navigator !== 'undefined' && navigator.userAgent) || \"\";        // 204\n                                                                                    // 205\nif (nodeCrypto ||                                                                   // 206\n    (typeof window !== \"undefined\" &&                                               // 207\n     window.crypto && window.crypto.getRandomValues))                               // 208\n  Random = new RandomGenerator();                                                   // 209\nelse                                                                                // 210\n  Random = new RandomGenerator([new Date(), height, width, agent, Math.random()]);  // 211\n                                                                                    // 212\nRandom.createWithSeeds = function () {                                              // 213\n  if (arguments.length === 0) {                                                     // 214\n    throw new Error('No seeds were provided');                                      // 215\n  }                                                                                 // 216\n  return new RandomGenerator(arguments);                                            // 217\n};                                                                                  // 218\n                                                                                    // 219\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/random/deprecated.js                                                    //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\n// Before this package existed, we used to use this Meteor.uuid()                   // 1\n// implementing the RFC 4122 v4 UUID. It is no longer documented                    // 2\n// and will go away.                                                                // 3\n// XXX COMPAT WITH 0.5.6                                                            // 4\nMeteor.uuid = function () {                                                         // 5\n  var HEX_DIGITS = \"0123456789abcdef\";                                              // 6\n  var s = [];                                                                       // 7\n  for (var i = 0; i < 36; i++) {                                                    // 8\n    s[i] = Random.choice(HEX_DIGITS);                                               // 9\n  }                                                                                 // 10\n  s[14] = \"4\";                                                                      // 11\n  s[19] = HEX_DIGITS.substr((parseInt(s[19],16) & 0x3) | 0x8, 1);                   // 12\n  s[8] = s[13] = s[18] = s[23] = \"-\";                                               // 13\n                                                                                    // 14\n  var uuid = s.join(\"\");                                                            // 15\n  return uuid;                                                                      // 16\n};                                                                                  // 17\n                                                                                    // 18\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]