[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar OrderedDict;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/ordered-dict/packages/ordered-dict.js                                       //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\n(function(){                                                                            // 1\n                                                                                        // 2\n///////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                               //     // 4\n// packages/ordered-dict/ordered_dict.js                                         //     // 5\n//                                                                               //     // 6\n///////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                 //     // 8\n// This file defines an ordered dictionary abstraction that is useful for        // 1   // 9\n// maintaining a dataset backed by observeChanges.  It supports ordering items   // 2   // 10\n// by specifying the item they now come before.                                  // 3   // 11\n                                                                                 // 4   // 12\n// The implementation is a dictionary that contains nodes of a doubly-linked     // 5   // 13\n// list as its values.                                                           // 6   // 14\n                                                                                 // 7   // 15\n// constructs a new element struct                                               // 8   // 16\n// next and prev are whole elements, not keys.                                   // 9   // 17\nvar element = function (key, value, next, prev) {                                // 10  // 18\n  return {                                                                       // 11  // 19\n    key: key,                                                                    // 12  // 20\n    value: value,                                                                // 13  // 21\n    next: next,                                                                  // 14  // 22\n    prev: prev                                                                   // 15  // 23\n  };                                                                             // 16  // 24\n};                                                                               // 17  // 25\nOrderedDict = function (/* ... */) {                                             // 18  // 26\n  var self = this;                                                               // 19  // 27\n  self._dict = {};                                                               // 20  // 28\n  self._first = null;                                                            // 21  // 29\n  self._last = null;                                                             // 22  // 30\n  self._size = 0;                                                                // 23  // 31\n  var args = _.toArray(arguments);                                               // 24  // 32\n  self._stringify = function (x) { return x; };                                  // 25  // 33\n  if (typeof args[0] === 'function')                                             // 26  // 34\n    self._stringify = args.shift();                                              // 27  // 35\n  _.each(args, function (kv) {                                                   // 28  // 36\n    self.putBefore(kv[0], kv[1], null);                                          // 29  // 37\n  });                                                                            // 30  // 38\n};                                                                               // 31  // 39\n                                                                                 // 32  // 40\n_.extend(OrderedDict.prototype, {                                                // 33  // 41\n  // the \"prefix keys with a space\" thing comes from here                        // 34  // 42\n  // https://github.com/documentcloud/underscore/issues/376#issuecomment-2815649        // 43\n  _k: function (key) { return \" \" + this._stringify(key); },                     // 36  // 44\n                                                                                 // 37  // 45\n  empty: function () {                                                           // 38  // 46\n    var self = this;                                                             // 39  // 47\n    return !self._first;                                                         // 40  // 48\n  },                                                                             // 41  // 49\n  size: function () {                                                            // 42  // 50\n    var self = this;                                                             // 43  // 51\n    return self._size;                                                           // 44  // 52\n  },                                                                             // 45  // 53\n  _linkEltIn: function (elt) {                                                   // 46  // 54\n    var self = this;                                                             // 47  // 55\n    if (!elt.next) {                                                             // 48  // 56\n      elt.prev = self._last;                                                     // 49  // 57\n      if (self._last)                                                            // 50  // 58\n        self._last.next = elt;                                                   // 51  // 59\n      self._last = elt;                                                          // 52  // 60\n    } else {                                                                     // 53  // 61\n      elt.prev = elt.next.prev;                                                  // 54  // 62\n      elt.next.prev = elt;                                                       // 55  // 63\n      if (elt.prev)                                                              // 56  // 64\n        elt.prev.next = elt;                                                     // 57  // 65\n    }                                                                            // 58  // 66\n    if (self._first === null || self._first === elt.next)                        // 59  // 67\n      self._first = elt;                                                         // 60  // 68\n  },                                                                             // 61  // 69\n  _linkEltOut: function (elt) {                                                  // 62  // 70\n    var self = this;                                                             // 63  // 71\n    if (elt.next)                                                                // 64  // 72\n      elt.next.prev = elt.prev;                                                  // 65  // 73\n    if (elt.prev)                                                                // 66  // 74\n      elt.prev.next = elt.next;                                                  // 67  // 75\n    if (elt === self._last)                                                      // 68  // 76\n      self._last = elt.prev;                                                     // 69  // 77\n    if (elt === self._first)                                                     // 70  // 78\n      self._first = elt.next;                                                    // 71  // 79\n  },                                                                             // 72  // 80\n  putBefore: function (key, item, before) {                                      // 73  // 81\n    var self = this;                                                             // 74  // 82\n    if (self._dict[self._k(key)])                                                // 75  // 83\n      throw new Error(\"Item \" + key + \" already present in OrderedDict\");        // 76  // 84\n    var elt = before ?                                                           // 77  // 85\n          element(key, item, self._dict[self._k(before)]) :                      // 78  // 86\n          element(key, item, null);                                              // 79  // 87\n    if (elt.next === undefined)                                                  // 80  // 88\n      throw new Error(\"could not find item to put this one before\");             // 81  // 89\n    self._linkEltIn(elt);                                                        // 82  // 90\n    self._dict[self._k(key)] = elt;                                              // 83  // 91\n    self._size++;                                                                // 84  // 92\n  },                                                                             // 85  // 93\n  append: function (key, item) {                                                 // 86  // 94\n    var self = this;                                                             // 87  // 95\n    self.putBefore(key, item, null);                                             // 88  // 96\n  },                                                                             // 89  // 97\n  remove: function (key) {                                                       // 90  // 98\n    var self = this;                                                             // 91  // 99\n    var elt = self._dict[self._k(key)];                                          // 92  // 100\n    if (elt === undefined)                                                       // 93  // 101\n      throw new Error(\"Item \" + key + \" not present in OrderedDict\");            // 94  // 102\n    self._linkEltOut(elt);                                                       // 95  // 103\n    self._size--;                                                                // 96  // 104\n    delete self._dict[self._k(key)];                                             // 97  // 105\n    return elt.value;                                                            // 98  // 106\n  },                                                                             // 99  // 107\n  get: function (key) {                                                          // 100\n    var self = this;                                                             // 101\n    if (self.has(key))                                                           // 102\n        return self._dict[self._k(key)].value;                                   // 103\n    return undefined;                                                            // 104\n  },                                                                             // 105\n  has: function (key) {                                                          // 106\n    var self = this;                                                             // 107\n    return _.has(self._dict, self._k(key));                                      // 108\n  },                                                                             // 109\n  // Iterate through the items in this dictionary in order, calling              // 110\n  // iter(value, key, index) on each one.                                        // 111\n                                                                                 // 112\n  // Stops whenever iter returns OrderedDict.BREAK, or after the last element.   // 113\n  forEach: function (iter) {                                                     // 114\n    var self = this;                                                             // 115\n    var i = 0;                                                                   // 116\n    var elt = self._first;                                                       // 117\n    while (elt !== null) {                                                       // 118\n      var b = iter(elt.value, elt.key, i);                                       // 119\n      if (b === OrderedDict.BREAK)                                               // 120\n        return;                                                                  // 121\n      elt = elt.next;                                                            // 122\n      i++;                                                                       // 123\n    }                                                                            // 124\n  },                                                                             // 125\n  first: function () {                                                           // 126\n    var self = this;                                                             // 127\n    if (self.empty())                                                            // 128\n      return undefined;                                                          // 129\n    return self._first.key;                                                      // 130\n  },                                                                             // 131\n  firstValue: function () {                                                      // 132\n    var self = this;                                                             // 133\n    if (self.empty())                                                            // 134\n      return undefined;                                                          // 135\n    return self._first.value;                                                    // 136\n  },                                                                             // 137\n  last: function () {                                                            // 138\n    var self = this;                                                             // 139\n    if (self.empty())                                                            // 140\n      return undefined;                                                          // 141\n    return self._last.key;                                                       // 142\n  },                                                                             // 143\n  lastValue: function () {                                                       // 144\n    var self = this;                                                             // 145\n    if (self.empty())                                                            // 146\n      return undefined;                                                          // 147\n    return self._last.value;                                                     // 148\n  },                                                                             // 149\n  prev: function (key) {                                                         // 150\n    var self = this;                                                             // 151\n    if (self.has(key)) {                                                         // 152\n      var elt = self._dict[self._k(key)];                                        // 153\n      if (elt.prev)                                                              // 154\n        return elt.prev.key;                                                     // 155\n    }                                                                            // 156\n    return null;                                                                 // 157\n  },                                                                             // 158\n  next: function (key) {                                                         // 159\n    var self = this;                                                             // 160\n    if (self.has(key)) {                                                         // 161\n      var elt = self._dict[self._k(key)];                                        // 162\n      if (elt.next)                                                              // 163\n        return elt.next.key;                                                     // 164\n    }                                                                            // 165\n    return null;                                                                 // 166\n  },                                                                             // 167\n  moveBefore: function (key, before) {                                           // 168\n    var self = this;                                                             // 169\n    var elt = self._dict[self._k(key)];                                          // 170\n    var eltBefore = before ? self._dict[self._k(before)] : null;                 // 171\n    if (elt === undefined)                                                       // 172\n      throw new Error(\"Item to move is not present\");                            // 173\n    if (eltBefore === undefined) {                                               // 174\n      throw new Error(\"Could not find element to move this one before\");         // 175\n    }                                                                            // 176\n    if (eltBefore === elt.next) // no moving necessary                           // 177\n      return;                                                                    // 178\n    // remove from its old place                                                 // 179\n    self._linkEltOut(elt);                                                       // 180\n    // patch into its new place                                                  // 181\n    elt.next = eltBefore;                                                        // 182\n    self._linkEltIn(elt);                                                        // 183\n  },                                                                             // 184\n  // Linear, sadly.                                                              // 185\n  indexOf: function (key) {                                                      // 186\n    var self = this;                                                             // 187\n    var ret = null;                                                              // 188\n    self.forEach(function (v, k, i) {                                            // 189\n      if (self._k(k) === self._k(key)) {                                         // 190\n        ret = i;                                                                 // 191\n        return OrderedDict.BREAK;                                                // 192\n      }                                                                          // 193\n      return undefined;                                                          // 194\n    });                                                                          // 195\n    return ret;                                                                  // 196\n  },                                                                             // 197\n  _checkRep: function () {                                                       // 198\n    var self = this;                                                             // 199\n    _.each(self._dict, function (k, v) {                                         // 200\n      if (v.next === v)                                                          // 201\n        throw new Error(\"Next is a loop\");                                       // 202\n      if (v.prev === v)                                                          // 203\n        throw new Error(\"Prev is a loop\");                                       // 204\n    });                                                                          // 205\n  }                                                                              // 206\n                                                                                 // 207\n});                                                                              // 208\nOrderedDict.BREAK = {\"break\": true};                                             // 209\n                                                                                 // 210\n///////////////////////////////////////////////////////////////////////////////////     // 219\n                                                                                        // 220\n}).call(this);                                                                          // 221\n                                                                                        // 222\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ordered-dict'] = {\n  OrderedDict: OrderedDict\n};\n\n})();\n","servePath":"/packages/ordered-dict.js","sourceMap":{"version":3,"sources":["/packages/ordered-dict/packages/ordered-dict.js"],"names":[],"mappingsfile":"/packages/ordered-dict.js","sourcesContent":["(function(){\n\n///////////////////////////////////////////////////////////////////////////////////\n//                                                                               //\n// packages/ordered-dict/ordered_dict.js                                         //\n//                                                                               //\n///////////////////////////////////////////////////////////////////////////////////\n                                                                                 //\n// This file defines an ordered dictionary abstraction that is useful for        // 1\n// maintaining a dataset backed by observeChanges.  It supports ordering items   // 2\n// by specifying the item they now come before.                                  // 3\n                                                                                 // 4\n// The implementation is a dictionary that contains nodes of a doubly-linked     // 5\n// list as its values.                                                           // 6\n                                                                                 // 7\n// constructs a new element struct                                               // 8\n// next and prev are whole elements, not keys.                                   // 9\nvar element = function (key, value, next, prev) {                                // 10\n  return {                                                                       // 11\n    key: key,                                                                    // 12\n    value: value,                                                                // 13\n    next: next,                                                                  // 14\n    prev: prev                                                                   // 15\n  };                                                                             // 16\n};                                                                               // 17\nOrderedDict = function (/* ... */) {                                             // 18\n  var self = this;                                                               // 19\n  self._dict = {};                                                               // 20\n  self._first = null;                                                            // 21\n  self._last = null;                                                             // 22\n  self._size = 0;                                                                // 23\n  var args = _.toArray(arguments);                                               // 24\n  self._stringify = function (x) { return x; };                                  // 25\n  if (typeof args[0] === 'function')                                             // 26\n    self._stringify = args.shift();                                              // 27\n  _.each(args, function (kv) {                                                   // 28\n    self.putBefore(kv[0], kv[1], null);                                          // 29\n  });                                                                            // 30\n};                                                                               // 31\n                                                                                 // 32\n_.extend(OrderedDict.prototype, {                                                // 33\n  // the \"prefix keys with a space\" thing comes from here                        // 34\n  // https://github.com/documentcloud/underscore/issues/376#issuecomment-2815649\n  _k: function (key) { return \" \" + this._stringify(key); },                     // 36\n                                                                                 // 37\n  empty: function () {                                                           // 38\n    var self = this;                                                             // 39\n    return !self._first;                                                         // 40\n  },                                                                             // 41\n  size: function () {                                                            // 42\n    var self = this;                                                             // 43\n    return self._size;                                                           // 44\n  },                                                                             // 45\n  _linkEltIn: function (elt) {                                                   // 46\n    var self = this;                                                             // 47\n    if (!elt.next) {                                                             // 48\n      elt.prev = self._last;                                                     // 49\n      if (self._last)                                                            // 50\n        self._last.next = elt;                                                   // 51\n      self._last = elt;                                                          // 52\n    } else {                                                                     // 53\n      elt.prev = elt.next.prev;                                                  // 54\n      elt.next.prev = elt;                                                       // 55\n      if (elt.prev)                                                              // 56\n        elt.prev.next = elt;                                                     // 57\n    }                                                                            // 58\n    if (self._first === null || self._first === elt.next)                        // 59\n      self._first = elt;                                                         // 60\n  },                                                                             // 61\n  _linkEltOut: function (elt) {                                                  // 62\n    var self = this;                                                             // 63\n    if (elt.next)                                                                // 64\n      elt.next.prev = elt.prev;                                                  // 65\n    if (elt.prev)                                                                // 66\n      elt.prev.next = elt.next;                                                  // 67\n    if (elt === self._last)                                                      // 68\n      self._last = elt.prev;                                                     // 69\n    if (elt === self._first)                                                     // 70\n      self._first = elt.next;                                                    // 71\n  },                                                                             // 72\n  putBefore: function (key, item, before) {                                      // 73\n    var self = this;                                                             // 74\n    if (self._dict[self._k(key)])                                                // 75\n      throw new Error(\"Item \" + key + \" already present in OrderedDict\");        // 76\n    var elt = before ?                                                           // 77\n          element(key, item, self._dict[self._k(before)]) :                      // 78\n          element(key, item, null);                                              // 79\n    if (elt.next === undefined)                                                  // 80\n      throw new Error(\"could not find item to put this one before\");             // 81\n    self._linkEltIn(elt);                                                        // 82\n    self._dict[self._k(key)] = elt;                                              // 83\n    self._size++;                                                                // 84\n  },                                                                             // 85\n  append: function (key, item) {                                                 // 86\n    var self = this;                                                             // 87\n    self.putBefore(key, item, null);                                             // 88\n  },                                                                             // 89\n  remove: function (key) {                                                       // 90\n    var self = this;                                                             // 91\n    var elt = self._dict[self._k(key)];                                          // 92\n    if (elt === undefined)                                                       // 93\n      throw new Error(\"Item \" + key + \" not present in OrderedDict\");            // 94\n    self._linkEltOut(elt);                                                       // 95\n    self._size--;                                                                // 96\n    delete self._dict[self._k(key)];                                             // 97\n    return elt.value;                                                            // 98\n  },                                                                             // 99\n  get: function (key) {                                                          // 100\n    var self = this;                                                             // 101\n    if (self.has(key))                                                           // 102\n        return self._dict[self._k(key)].value;                                   // 103\n    return undefined;                                                            // 104\n  },                                                                             // 105\n  has: function (key) {                                                          // 106\n    var self = this;                                                             // 107\n    return _.has(self._dict, self._k(key));                                      // 108\n  },                                                                             // 109\n  // Iterate through the items in this dictionary in order, calling              // 110\n  // iter(value, key, index) on each one.                                        // 111\n                                                                                 // 112\n  // Stops whenever iter returns OrderedDict.BREAK, or after the last element.   // 113\n  forEach: function (iter) {                                                     // 114\n    var self = this;                                                             // 115\n    var i = 0;                                                                   // 116\n    var elt = self._first;                                                       // 117\n    while (elt !== null) {                                                       // 118\n      var b = iter(elt.value, elt.key, i);                                       // 119\n      if (b === OrderedDict.BREAK)                                               // 120\n        return;                                                                  // 121\n      elt = elt.next;                                                            // 122\n      i++;                                                                       // 123\n    }                                                                            // 124\n  },                                                                             // 125\n  first: function () {                                                           // 126\n    var self = this;                                                             // 127\n    if (self.empty())                                                            // 128\n      return undefined;                                                          // 129\n    return self._first.key;                                                      // 130\n  },                                                                             // 131\n  firstValue: function () {                                                      // 132\n    var self = this;                                                             // 133\n    if (self.empty())                                                            // 134\n      return undefined;                                                          // 135\n    return self._first.value;                                                    // 136\n  },                                                                             // 137\n  last: function () {                                                            // 138\n    var self = this;                                                             // 139\n    if (self.empty())                                                            // 140\n      return undefined;                                                          // 141\n    return self._last.key;                                                       // 142\n  },                                                                             // 143\n  lastValue: function () {                                                       // 144\n    var self = this;                                                             // 145\n    if (self.empty())                                                            // 146\n      return undefined;                                                          // 147\n    return self._last.value;                                                     // 148\n  },                                                                             // 149\n  prev: function (key) {                                                         // 150\n    var self = this;                                                             // 151\n    if (self.has(key)) {                                                         // 152\n      var elt = self._dict[self._k(key)];                                        // 153\n      if (elt.prev)                                                              // 154\n        return elt.prev.key;                                                     // 155\n    }                                                                            // 156\n    return null;                                                                 // 157\n  },                                                                             // 158\n  next: function (key) {                                                         // 159\n    var self = this;                                                             // 160\n    if (self.has(key)) {                                                         // 161\n      var elt = self._dict[self._k(key)];                                        // 162\n      if (elt.next)                                                              // 163\n        return elt.next.key;                                                     // 164\n    }                                                                            // 165\n    return null;                                                                 // 166\n  },                                                                             // 167\n  moveBefore: function (key, before) {                                           // 168\n    var self = this;                                                             // 169\n    var elt = self._dict[self._k(key)];                                          // 170\n    var eltBefore = before ? self._dict[self._k(before)] : null;                 // 171\n    if (elt === undefined)                                                       // 172\n      throw new Error(\"Item to move is not present\");                            // 173\n    if (eltBefore === undefined) {                                               // 174\n      throw new Error(\"Could not find element to move this one before\");         // 175\n    }                                                                            // 176\n    if (eltBefore === elt.next) // no moving necessary                           // 177\n      return;                                                                    // 178\n    // remove from its old place                                                 // 179\n    self._linkEltOut(elt);                                                       // 180\n    // patch into its new place                                                  // 181\n    elt.next = eltBefore;                                                        // 182\n    self._linkEltIn(elt);                                                        // 183\n  },                                                                             // 184\n  // Linear, sadly.                                                              // 185\n  indexOf: function (key) {                                                      // 186\n    var self = this;                                                             // 187\n    var ret = null;                                                              // 188\n    self.forEach(function (v, k, i) {                                            // 189\n      if (self._k(k) === self._k(key)) {                                         // 190\n        ret = i;                                                                 // 191\n        return OrderedDict.BREAK;                                                // 192\n      }                                                                          // 193\n      return undefined;                                                          // 194\n    });                                                                          // 195\n    return ret;                                                                  // 196\n  },                                                                             // 197\n  _checkRep: function () {                                                       // 198\n    var self = this;                                                             // 199\n    _.each(self._dict, function (k, v) {                                         // 200\n      if (v.next === v)                                                          // 201\n        throw new Error(\"Next is a loop\");                                       // 202\n      if (v.prev === v)                                                          // 203\n        throw new Error(\"Prev is a loop\");                                       // 204\n    });                                                                          // 205\n  }                                                                              // 206\n                                                                                 // 207\n});                                                                              // 208\nOrderedDict.BREAK = {\"break\": true};                                             // 209\n                                                                                 // 210\n///////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]