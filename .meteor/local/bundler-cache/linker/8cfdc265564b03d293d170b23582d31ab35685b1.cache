[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar URL = Package.url.URL;\n\n/* Package-scope variables */\nvar makeErrorByStatus, populateData, HTTP;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/http/packages/http.js                                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n(function(){                                                                                                          // 1\n                                                                                                                      // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/http/httpcall_common.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmakeErrorByStatus = function(statusCode, content) {                                                                   // 1\n  var MAX_LENGTH = 500; // if you change this, also change the appropriate test                                       // 2\n                                                                                                                      // 3\n  var truncate = function(str, length) {                                                                              // 4\n    return str.length > length ? str.slice(0, length) + '...' : str;                                                  // 5\n  };                                                                                                                  // 6\n                                                                                                                      // 7\n  var contentToCheck = typeof content == \"string\" ? content : content.toString();                                     // 8\n                                                                                                                      // 9\n  var message = \"failed [\" + statusCode + \"]\";                                                                        // 10\n                                                                                                                      // 11\n  if (contentToCheck) {                                                                                               // 12\n    message += \" \" + truncate(contentToCheck.replace(/\\n/g, \" \"), MAX_LENGTH);                                        // 13\n  }                                                                                                                   // 14\n                                                                                                                      // 15\n  return new Error(message);                                                                                          // 16\n};                                                                                                                    // 17\n                                                                                                                      // 18\n                                                                                                                      // 19\n// Fill in `response.data` if the content-type is JSON.                                                               // 20\npopulateData = function(response) {                                                                                   // 21\n  // Read Content-Type header, up to a ';' if there is one.                                                           // 22\n  // A typical header might be \"application/json; charset=utf-8\"                                                      // 23\n  // or just \"application/json\".                                                                                      // 24\n  var contentType = (response.headers['content-type'] || ';').split(';')[0];                                          // 25\n                                                                                                                      // 26\n  // Only try to parse data as JSON if server sets correct content type.                                              // 27\n  if (_.include(['application/json', 'text/javascript',                                                               // 28\n      'application/javascript', 'application/x-javascript'], contentType)) {                                          // 29\n    try {                                                                                                             // 30\n      response.data = JSON.parse(response.content);                                                                   // 31\n    } catch (err) {                                                                                                   // 32\n      response.data = null;                                                                                           // 33\n    }                                                                                                                 // 34\n  } else {                                                                                                            // 35\n    response.data = null;                                                                                             // 36\n  }                                                                                                                   // 37\n};                                                                                                                    // 38\n                                                                                                                      // 39\nHTTP = {};                                                                                                            // 40\n                                                                                                                      // 41\n/**                                                                                                                   // 42\n * @summary Send an HTTP `GET` request. Equivalent to calling [`HTTP.call`](#http_call) with \"GET\" as the first argument.\n * @param {String} url The URL to which the request should be sent.                                                   // 44\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                      // 45\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.   // 46\n * @locus Anywhere                                                                                                    // 47\n */                                                                                                                   // 48\nHTTP.get = function (/* varargs */) {                                                                                 // 49\n  return HTTP.call.apply(this, [\"GET\"].concat(_.toArray(arguments)));                                                 // 50\n};                                                                                                                    // 51\n                                                                                                                      // 52\n/**                                                                                                                   // 53\n * @summary Send an HTTP `POST` request. Equivalent to calling [`HTTP.call`](#http_call) with \"POST\" as the first argument.\n * @param {String} url The URL to which the request should be sent.                                                   // 55\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                      // 56\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.   // 57\n * @locus Anywhere                                                                                                    // 58\n */                                                                                                                   // 59\nHTTP.post = function (/* varargs */) {                                                                                // 60\n  return HTTP.call.apply(this, [\"POST\"].concat(_.toArray(arguments)));                                                // 61\n};                                                                                                                    // 62\n                                                                                                                      // 63\n/**                                                                                                                   // 64\n * @summary Send an HTTP `PUT` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PUT\" as the first argument.\n * @param {String} url The URL to which the request should be sent.                                                   // 66\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                      // 67\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.   // 68\n * @locus Anywhere                                                                                                    // 69\n */                                                                                                                   // 70\nHTTP.put = function (/* varargs */) {                                                                                 // 71\n  return HTTP.call.apply(this, [\"PUT\"].concat(_.toArray(arguments)));                                                 // 72\n};                                                                                                                    // 73\n                                                                                                                      // 74\n/**                                                                                                                   // 75\n * @summary Send an HTTP `DELETE` request. Equivalent to calling [`HTTP.call`](#http_call) with \"DELETE\" as the first argument. (Named `del` to avoid conflic with the Javascript keyword `delete`)\n * @param {String} url The URL to which the request should be sent.                                                   // 77\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                      // 78\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.   // 79\n * @locus Anywhere                                                                                                    // 80\n */                                                                                                                   // 81\nHTTP.del = function (/* varargs */) {                                                                                 // 82\n  return HTTP.call.apply(this, [\"DELETE\"].concat(_.toArray(arguments)));                                              // 83\n};                                                                                                                    // 84\n                                                                                                                      // 85\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      // 95\n}).call(this);                                                                                                        // 96\n                                                                                                                      // 97\n                                                                                                                      // 98\n                                                                                                                      // 99\n                                                                                                                      // 100\n                                                                                                                      // 101\n                                                                                                                      // 102\n(function(){                                                                                                          // 103\n                                                                                                                      // 104\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/http/httpcall_client.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**                                                                                                                   // 1\n * @summary Perform an outbound HTTP request.                                                                         // 2\n * @locus Anywhere                                                                                                    // 3\n * @param {String} method The [HTTP method](http://en.wikipedia.org/wiki/HTTP_method) to use, such as \"`GET`\", \"`POST`\", or \"`HEAD`\".\n * @param {String} url The URL to retrieve.                                                                           // 5\n * @param {Object} [options]                                                                                          // 6\n * @param {String} options.content String to use as the HTTP request body.                                            // 7\n * @param {Object} options.data JSON-able object to stringify and use as the HTTP request body. Overwrites `content`.\n * @param {String} options.query Query string to go in the URL. Overwrites any query string in `url`.                 // 9\n * @param {Object} options.params Dictionary of request parameters to be encoded and placed in the URL (for GETs) or request body (for POSTs).  If `content` or `data` is specified, `params` will always be placed in the URL.\n * @param {String} options.auth HTTP basic authentication string of the form `\"username:password\"`                    // 11\n * @param {Object} options.headers Dictionary of strings, headers to add to the HTTP request.                         // 12\n * @param {Number} options.timeout Maximum time in milliseconds to wait for the request before failing.  There is no timeout by default.\n * @param {Boolean} options.followRedirects If `true`, transparently follow HTTP redirects. Cannot be set to `false` on the client. Default `true`.\n * @param {Object} options.npmRequestOptions On the server, `HTTP.call` is implemented by using the [npm `request` module](https://www.npmjs.com/package/request). Any options in this object will be passed directly to the `request` invocation.\n * @param {Function} options.beforeSend On the client, this will be called before the request is sent to allow for more direct manipulation of the underlying XMLHttpRequest object, which will be passed as the first argument. If the callback returns `false`, the request will be not be send.\n * @param {Function} [asyncCallback] Optional callback.  If passed, the method runs asynchronously, instead of synchronously, and calls asyncCallback.  On the client, this callback is required.\n */                                                                                                                   // 18\nHTTP.call = function(method, url, options, callback) {                                                                // 19\n                                                                                                                      // 20\n  ////////// Process arguments //////////                                                                             // 21\n                                                                                                                      // 22\n  if (! callback && typeof options === \"function\") {                                                                  // 23\n    // support (method, url, callback) argument list                                                                  // 24\n    callback = options;                                                                                               // 25\n    options = null;                                                                                                   // 26\n  }                                                                                                                   // 27\n                                                                                                                      // 28\n  options = options || {};                                                                                            // 29\n                                                                                                                      // 30\n  if (typeof callback !== \"function\")                                                                                 // 31\n    throw new Error(                                                                                                  // 32\n      \"Can't make a blocking HTTP call from the client; callback required.\");                                         // 33\n                                                                                                                      // 34\n  method = (method || \"\").toUpperCase();                                                                              // 35\n                                                                                                                      // 36\n  var headers = {};                                                                                                   // 37\n                                                                                                                      // 38\n  var content = options.content;                                                                                      // 39\n  if (options.data) {                                                                                                 // 40\n    content = JSON.stringify(options.data);                                                                           // 41\n    headers['Content-Type'] = 'application/json';                                                                     // 42\n  }                                                                                                                   // 43\n                                                                                                                      // 44\n  var params_for_url, params_for_body;                                                                                // 45\n  if (content || method === \"GET\" || method === \"HEAD\")                                                               // 46\n    params_for_url = options.params;                                                                                  // 47\n  else                                                                                                                // 48\n    params_for_body = options.params;                                                                                 // 49\n                                                                                                                      // 50\n  url = URL._constructUrl(url, options.query, params_for_url);                                                        // 51\n                                                                                                                      // 52\n  if (options.followRedirects === false)                                                                              // 53\n    throw new Error(\"Option followRedirects:false not supported on client.\");                                         // 54\n                                                                                                                      // 55\n  if (_.has(options, 'npmRequestOptions')) {                                                                          // 56\n    throw new Error(\"Option npmRequestOptions not supported on client.\");                                             // 57\n  }                                                                                                                   // 58\n                                                                                                                      // 59\n  var username, password;                                                                                             // 60\n  if (options.auth) {                                                                                                 // 61\n    var colonLoc = options.auth.indexOf(':');                                                                         // 62\n    if (colonLoc < 0)                                                                                                 // 63\n      throw new Error('auth option should be of the form \"username:password\"');                                       // 64\n    username = options.auth.substring(0, colonLoc);                                                                   // 65\n    password = options.auth.substring(colonLoc+1);                                                                    // 66\n  }                                                                                                                   // 67\n                                                                                                                      // 68\n  if (params_for_body) {                                                                                              // 69\n    content = URL._encodeParams(params_for_body);                                                                     // 70\n  }                                                                                                                   // 71\n                                                                                                                      // 72\n  _.extend(headers, options.headers || {});                                                                           // 73\n                                                                                                                      // 74\n  ////////// Callback wrapping //////////                                                                             // 75\n                                                                                                                      // 76\n  // wrap callback to add a 'response' property on an error, in case                                                  // 77\n  // we have both (http 4xx/5xx error, which has a response payload)                                                  // 78\n  callback = (function(callback) {                                                                                    // 79\n    return function(error, response) {                                                                                // 80\n      if (error && response)                                                                                          // 81\n        error.response = response;                                                                                    // 82\n      callback(error, response);                                                                                      // 83\n    };                                                                                                                // 84\n  })(callback);                                                                                                       // 85\n                                                                                                                      // 86\n  // safety belt: only call the callback once.                                                                        // 87\n  callback = _.once(callback);                                                                                        // 88\n                                                                                                                      // 89\n                                                                                                                      // 90\n  ////////// Kickoff! //////////                                                                                      // 91\n                                                                                                                      // 92\n  // from this point on, errors are because of something remote, not                                                  // 93\n  // something we should check in advance. Turn exceptions into error                                                 // 94\n  // results.                                                                                                         // 95\n  try {                                                                                                               // 96\n    // setup XHR object                                                                                               // 97\n    var xhr;                                                                                                          // 98\n    if (typeof XMLHttpRequest !== \"undefined\")                                                                        // 99\n      xhr = new XMLHttpRequest();                                                                                     // 100\n    else if (typeof ActiveXObject !== \"undefined\")                                                                    // 101\n      xhr = new ActiveXObject(\"Microsoft.XMLHttp\"); // IE6                                                            // 102\n    else                                                                                                              // 103\n      throw new Error(\"Can't create XMLHttpRequest\"); // ???                                                          // 104\n                                                                                                                      // 105\n    xhr.open(method, url, true, username, password);                                                                  // 106\n                                                                                                                      // 107\n    for (var k in headers)                                                                                            // 108\n      xhr.setRequestHeader(k, headers[k]);                                                                            // 109\n                                                                                                                      // 110\n                                                                                                                      // 111\n    // setup timeout                                                                                                  // 112\n    var timed_out = false;                                                                                            // 113\n    var timer;                                                                                                        // 114\n    if (options.timeout) {                                                                                            // 115\n      timer = Meteor.setTimeout(function() {                                                                          // 116\n        timed_out = true;                                                                                             // 117\n        xhr.abort();                                                                                                  // 118\n      }, options.timeout);                                                                                            // 119\n    };                                                                                                                // 120\n                                                                                                                      // 121\n    // callback on complete                                                                                           // 122\n    xhr.onreadystatechange = function(evt) {                                                                          // 123\n      if (xhr.readyState === 4) { // COMPLETE                                                                         // 124\n        if (timer)                                                                                                    // 125\n          Meteor.clearTimeout(timer);                                                                                 // 126\n                                                                                                                      // 127\n        if (timed_out) {                                                                                              // 128\n          callback(new Error(\"timeout\"));                                                                             // 129\n        } else if (! xhr.status) {                                                                                    // 130\n          // no HTTP response                                                                                         // 131\n          callback(new Error(\"network\"));                                                                             // 132\n        } else {                                                                                                      // 133\n                                                                                                                      // 134\n          var response = {};                                                                                          // 135\n          response.statusCode = xhr.status;                                                                           // 136\n          response.content = xhr.responseText;                                                                        // 137\n                                                                                                                      // 138\n          response.headers = {};                                                                                      // 139\n          var header_str = xhr.getAllResponseHeaders();                                                               // 140\n                                                                                                                      // 141\n          // https://github.com/meteor/meteor/issues/553                                                              // 142\n          //                                                                                                          // 143\n          // In Firefox there is a weird issue, sometimes                                                             // 144\n          // getAllResponseHeaders returns the empty string, but                                                      // 145\n          // getResponseHeader returns correct results. Possibly this                                                 // 146\n          // issue:                                                                                                   // 147\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=608735                                                      // 148\n          //                                                                                                          // 149\n          // If this happens we can't get a full list of headers, but                                                 // 150\n          // at least get content-type so our JSON decoding happens                                                   // 151\n          // correctly. In theory, we could try and rescue more header                                                // 152\n          // values with a list of common headers, but content-type is                                                // 153\n          // the only vital one for now.                                                                              // 154\n          if (\"\" === header_str && xhr.getResponseHeader(\"content-type\"))                                             // 155\n            header_str =                                                                                              // 156\n            \"content-type: \" + xhr.getResponseHeader(\"content-type\");                                                 // 157\n                                                                                                                      // 158\n          var headers_raw = header_str.split(/\\r?\\n/);                                                                // 159\n          _.each(headers_raw, function (h) {                                                                          // 160\n            var m = /^(.*?):(?:\\s+)(.*)$/.exec(h);                                                                    // 161\n            if (m && m.length === 3)                                                                                  // 162\n              response.headers[m[1].toLowerCase()] = m[2];                                                            // 163\n          });                                                                                                         // 164\n                                                                                                                      // 165\n          populateData(response);                                                                                     // 166\n                                                                                                                      // 167\n          var error = null;                                                                                           // 168\n          if (response.statusCode >= 400)                                                                             // 169\n            error = makeErrorByStatus(response.statusCode, response.content);                                         // 170\n                                                                                                                      // 171\n          callback(error, response);                                                                                  // 172\n        }                                                                                                             // 173\n      }                                                                                                               // 174\n    };                                                                                                                // 175\n                                                                                                                      // 176\n    // Allow custom control over XHR and abort early.                                                                 // 177\n    if (options.beforeSend) {                                                                                         // 178\n      // Sanity                                                                                                       // 179\n      var beforeSend = _.once(options.beforeSend);                                                                    // 180\n                                                                                                                      // 181\n      // Call the callback and check to see if the request was aborted                                                // 182\n      if (false === beforeSend.call(null, xhr, options)) {                                                            // 183\n        return xhr.abort();                                                                                           // 184\n      }                                                                                                               // 185\n    }                                                                                                                 // 186\n                                                                                                                      // 187\n    // send it on its way                                                                                             // 188\n    xhr.send(content);                                                                                                // 189\n                                                                                                                      // 190\n  } catch (err) {                                                                                                     // 191\n    callback(err);                                                                                                    // 192\n  }                                                                                                                   // 193\n                                                                                                                      // 194\n};                                                                                                                    // 195\n                                                                                                                      // 196\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      // 308\n}).call(this);                                                                                                        // 309\n                                                                                                                      // 310\n                                                                                                                      // 311\n                                                                                                                      // 312\n                                                                                                                      // 313\n                                                                                                                      // 314\n                                                                                                                      // 315\n(function(){                                                                                                          // 316\n                                                                                                                      // 317\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/http/deprecated.js                                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// The HTTP object used to be called Meteor.http.                                                                     // 1\n// XXX COMPAT WITH 0.6.4                                                                                              // 2\nMeteor.http = HTTP;                                                                                                   // 3\n                                                                                                                      // 4\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      // 329\n}).call(this);                                                                                                        // 330\n                                                                                                                      // 331\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.http = {\n  HTTP: HTTP\n};\n\n})();\n","servePath":"/packages/http.js","sourceMap":{"version":3,"sources":["/packages/http/packages/http.js"],"names":[],"mappingsfile":"/packages/http.js","sourcesContent":["(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/http/httpcall_common.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmakeErrorByStatus = function(statusCode, content) {                                                                   // 1\n  var MAX_LENGTH = 500; // if you change this, also change the appropriate test                                       // 2\n                                                                                                                      // 3\n  var truncate = function(str, length) {                                                                              // 4\n    return str.length > length ? str.slice(0, length) + '...' : str;                                                  // 5\n  };                                                                                                                  // 6\n                                                                                                                      // 7\n  var contentToCheck = typeof content == \"string\" ? content : content.toString();                                     // 8\n                                                                                                                      // 9\n  var message = \"failed [\" + statusCode + \"]\";                                                                        // 10\n                                                                                                                      // 11\n  if (contentToCheck) {                                                                                               // 12\n    message += \" \" + truncate(contentToCheck.replace(/\\n/g, \" \"), MAX_LENGTH);                                        // 13\n  }                                                                                                                   // 14\n                                                                                                                      // 15\n  return new Error(message);                                                                                          // 16\n};                                                                                                                    // 17\n                                                                                                                      // 18\n                                                                                                                      // 19\n// Fill in `response.data` if the content-type is JSON.                                                               // 20\npopulateData = function(response) {                                                                                   // 21\n  // Read Content-Type header, up to a ';' if there is one.                                                           // 22\n  // A typical header might be \"application/json; charset=utf-8\"                                                      // 23\n  // or just \"application/json\".                                                                                      // 24\n  var contentType = (response.headers['content-type'] || ';').split(';')[0];                                          // 25\n                                                                                                                      // 26\n  // Only try to parse data as JSON if server sets correct content type.                                              // 27\n  if (_.include(['application/json', 'text/javascript',                                                               // 28\n      'application/javascript', 'application/x-javascript'], contentType)) {                                          // 29\n    try {                                                                                                             // 30\n      response.data = JSON.parse(response.content);                                                                   // 31\n    } catch (err) {                                                                                                   // 32\n      response.data = null;                                                                                           // 33\n    }                                                                                                                 // 34\n  } else {                                                                                                            // 35\n    response.data = null;                                                                                             // 36\n  }                                                                                                                   // 37\n};                                                                                                                    // 38\n                                                                                                                      // 39\nHTTP = {};                                                                                                            // 40\n                                                                                                                      // 41\n/**                                                                                                                   // 42\n * @summary Send an HTTP `GET` request. Equivalent to calling [`HTTP.call`](#http_call) with \"GET\" as the first argument.\n * @param {String} url The URL to which the request should be sent.                                                   // 44\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                      // 45\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.   // 46\n * @locus Anywhere                                                                                                    // 47\n */                                                                                                                   // 48\nHTTP.get = function (/* varargs */) {                                                                                 // 49\n  return HTTP.call.apply(this, [\"GET\"].concat(_.toArray(arguments)));                                                 // 50\n};                                                                                                                    // 51\n                                                                                                                      // 52\n/**                                                                                                                   // 53\n * @summary Send an HTTP `POST` request. Equivalent to calling [`HTTP.call`](#http_call) with \"POST\" as the first argument.\n * @param {String} url The URL to which the request should be sent.                                                   // 55\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                      // 56\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.   // 57\n * @locus Anywhere                                                                                                    // 58\n */                                                                                                                   // 59\nHTTP.post = function (/* varargs */) {                                                                                // 60\n  return HTTP.call.apply(this, [\"POST\"].concat(_.toArray(arguments)));                                                // 61\n};                                                                                                                    // 62\n                                                                                                                      // 63\n/**                                                                                                                   // 64\n * @summary Send an HTTP `PUT` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PUT\" as the first argument.\n * @param {String} url The URL to which the request should be sent.                                                   // 66\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                      // 67\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.   // 68\n * @locus Anywhere                                                                                                    // 69\n */                                                                                                                   // 70\nHTTP.put = function (/* varargs */) {                                                                                 // 71\n  return HTTP.call.apply(this, [\"PUT\"].concat(_.toArray(arguments)));                                                 // 72\n};                                                                                                                    // 73\n                                                                                                                      // 74\n/**                                                                                                                   // 75\n * @summary Send an HTTP `DELETE` request. Equivalent to calling [`HTTP.call`](#http_call) with \"DELETE\" as the first argument. (Named `del` to avoid conflic with the Javascript keyword `delete`)\n * @param {String} url The URL to which the request should be sent.                                                   // 77\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                      // 78\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.   // 79\n * @locus Anywhere                                                                                                    // 80\n */                                                                                                                   // 81\nHTTP.del = function (/* varargs */) {                                                                                 // 82\n  return HTTP.call.apply(this, [\"DELETE\"].concat(_.toArray(arguments)));                                              // 83\n};                                                                                                                    // 84\n                                                                                                                      // 85\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/http/httpcall_client.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/**                                                                                                                   // 1\n * @summary Perform an outbound HTTP request.                                                                         // 2\n * @locus Anywhere                                                                                                    // 3\n * @param {String} method The [HTTP method](http://en.wikipedia.org/wiki/HTTP_method) to use, such as \"`GET`\", \"`POST`\", or \"`HEAD`\".\n * @param {String} url The URL to retrieve.                                                                           // 5\n * @param {Object} [options]                                                                                          // 6\n * @param {String} options.content String to use as the HTTP request body.                                            // 7\n * @param {Object} options.data JSON-able object to stringify and use as the HTTP request body. Overwrites `content`.\n * @param {String} options.query Query string to go in the URL. Overwrites any query string in `url`.                 // 9\n * @param {Object} options.params Dictionary of request parameters to be encoded and placed in the URL (for GETs) or request body (for POSTs).  If `content` or `data` is specified, `params` will always be placed in the URL.\n * @param {String} options.auth HTTP basic authentication string of the form `\"username:password\"`                    // 11\n * @param {Object} options.headers Dictionary of strings, headers to add to the HTTP request.                         // 12\n * @param {Number} options.timeout Maximum time in milliseconds to wait for the request before failing.  There is no timeout by default.\n * @param {Boolean} options.followRedirects If `true`, transparently follow HTTP redirects. Cannot be set to `false` on the client. Default `true`.\n * @param {Object} options.npmRequestOptions On the server, `HTTP.call` is implemented by using the [npm `request` module](https://www.npmjs.com/package/request). Any options in this object will be passed directly to the `request` invocation.\n * @param {Function} options.beforeSend On the client, this will be called before the request is sent to allow for more direct manipulation of the underlying XMLHttpRequest object, which will be passed as the first argument. If the callback returns `false`, the request will be not be send.\n * @param {Function} [asyncCallback] Optional callback.  If passed, the method runs asynchronously, instead of synchronously, and calls asyncCallback.  On the client, this callback is required.\n */                                                                                                                   // 18\nHTTP.call = function(method, url, options, callback) {                                                                // 19\n                                                                                                                      // 20\n  ////////// Process arguments //////////                                                                             // 21\n                                                                                                                      // 22\n  if (! callback && typeof options === \"function\") {                                                                  // 23\n    // support (method, url, callback) argument list                                                                  // 24\n    callback = options;                                                                                               // 25\n    options = null;                                                                                                   // 26\n  }                                                                                                                   // 27\n                                                                                                                      // 28\n  options = options || {};                                                                                            // 29\n                                                                                                                      // 30\n  if (typeof callback !== \"function\")                                                                                 // 31\n    throw new Error(                                                                                                  // 32\n      \"Can't make a blocking HTTP call from the client; callback required.\");                                         // 33\n                                                                                                                      // 34\n  method = (method || \"\").toUpperCase();                                                                              // 35\n                                                                                                                      // 36\n  var headers = {};                                                                                                   // 37\n                                                                                                                      // 38\n  var content = options.content;                                                                                      // 39\n  if (options.data) {                                                                                                 // 40\n    content = JSON.stringify(options.data);                                                                           // 41\n    headers['Content-Type'] = 'application/json';                                                                     // 42\n  }                                                                                                                   // 43\n                                                                                                                      // 44\n  var params_for_url, params_for_body;                                                                                // 45\n  if (content || method === \"GET\" || method === \"HEAD\")                                                               // 46\n    params_for_url = options.params;                                                                                  // 47\n  else                                                                                                                // 48\n    params_for_body = options.params;                                                                                 // 49\n                                                                                                                      // 50\n  url = URL._constructUrl(url, options.query, params_for_url);                                                        // 51\n                                                                                                                      // 52\n  if (options.followRedirects === false)                                                                              // 53\n    throw new Error(\"Option followRedirects:false not supported on client.\");                                         // 54\n                                                                                                                      // 55\n  if (_.has(options, 'npmRequestOptions')) {                                                                          // 56\n    throw new Error(\"Option npmRequestOptions not supported on client.\");                                             // 57\n  }                                                                                                                   // 58\n                                                                                                                      // 59\n  var username, password;                                                                                             // 60\n  if (options.auth) {                                                                                                 // 61\n    var colonLoc = options.auth.indexOf(':');                                                                         // 62\n    if (colonLoc < 0)                                                                                                 // 63\n      throw new Error('auth option should be of the form \"username:password\"');                                       // 64\n    username = options.auth.substring(0, colonLoc);                                                                   // 65\n    password = options.auth.substring(colonLoc+1);                                                                    // 66\n  }                                                                                                                   // 67\n                                                                                                                      // 68\n  if (params_for_body) {                                                                                              // 69\n    content = URL._encodeParams(params_for_body);                                                                     // 70\n  }                                                                                                                   // 71\n                                                                                                                      // 72\n  _.extend(headers, options.headers || {});                                                                           // 73\n                                                                                                                      // 74\n  ////////// Callback wrapping //////////                                                                             // 75\n                                                                                                                      // 76\n  // wrap callback to add a 'response' property on an error, in case                                                  // 77\n  // we have both (http 4xx/5xx error, which has a response payload)                                                  // 78\n  callback = (function(callback) {                                                                                    // 79\n    return function(error, response) {                                                                                // 80\n      if (error && response)                                                                                          // 81\n        error.response = response;                                                                                    // 82\n      callback(error, response);                                                                                      // 83\n    };                                                                                                                // 84\n  })(callback);                                                                                                       // 85\n                                                                                                                      // 86\n  // safety belt: only call the callback once.                                                                        // 87\n  callback = _.once(callback);                                                                                        // 88\n                                                                                                                      // 89\n                                                                                                                      // 90\n  ////////// Kickoff! //////////                                                                                      // 91\n                                                                                                                      // 92\n  // from this point on, errors are because of something remote, not                                                  // 93\n  // something we should check in advance. Turn exceptions into error                                                 // 94\n  // results.                                                                                                         // 95\n  try {                                                                                                               // 96\n    // setup XHR object                                                                                               // 97\n    var xhr;                                                                                                          // 98\n    if (typeof XMLHttpRequest !== \"undefined\")                                                                        // 99\n      xhr = new XMLHttpRequest();                                                                                     // 100\n    else if (typeof ActiveXObject !== \"undefined\")                                                                    // 101\n      xhr = new ActiveXObject(\"Microsoft.XMLHttp\"); // IE6                                                            // 102\n    else                                                                                                              // 103\n      throw new Error(\"Can't create XMLHttpRequest\"); // ???                                                          // 104\n                                                                                                                      // 105\n    xhr.open(method, url, true, username, password);                                                                  // 106\n                                                                                                                      // 107\n    for (var k in headers)                                                                                            // 108\n      xhr.setRequestHeader(k, headers[k]);                                                                            // 109\n                                                                                                                      // 110\n                                                                                                                      // 111\n    // setup timeout                                                                                                  // 112\n    var timed_out = false;                                                                                            // 113\n    var timer;                                                                                                        // 114\n    if (options.timeout) {                                                                                            // 115\n      timer = Meteor.setTimeout(function() {                                                                          // 116\n        timed_out = true;                                                                                             // 117\n        xhr.abort();                                                                                                  // 118\n      }, options.timeout);                                                                                            // 119\n    };                                                                                                                // 120\n                                                                                                                      // 121\n    // callback on complete                                                                                           // 122\n    xhr.onreadystatechange = function(evt) {                                                                          // 123\n      if (xhr.readyState === 4) { // COMPLETE                                                                         // 124\n        if (timer)                                                                                                    // 125\n          Meteor.clearTimeout(timer);                                                                                 // 126\n                                                                                                                      // 127\n        if (timed_out) {                                                                                              // 128\n          callback(new Error(\"timeout\"));                                                                             // 129\n        } else if (! xhr.status) {                                                                                    // 130\n          // no HTTP response                                                                                         // 131\n          callback(new Error(\"network\"));                                                                             // 132\n        } else {                                                                                                      // 133\n                                                                                                                      // 134\n          var response = {};                                                                                          // 135\n          response.statusCode = xhr.status;                                                                           // 136\n          response.content = xhr.responseText;                                                                        // 137\n                                                                                                                      // 138\n          response.headers = {};                                                                                      // 139\n          var header_str = xhr.getAllResponseHeaders();                                                               // 140\n                                                                                                                      // 141\n          // https://github.com/meteor/meteor/issues/553                                                              // 142\n          //                                                                                                          // 143\n          // In Firefox there is a weird issue, sometimes                                                             // 144\n          // getAllResponseHeaders returns the empty string, but                                                      // 145\n          // getResponseHeader returns correct results. Possibly this                                                 // 146\n          // issue:                                                                                                   // 147\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=608735                                                      // 148\n          //                                                                                                          // 149\n          // If this happens we can't get a full list of headers, but                                                 // 150\n          // at least get content-type so our JSON decoding happens                                                   // 151\n          // correctly. In theory, we could try and rescue more header                                                // 152\n          // values with a list of common headers, but content-type is                                                // 153\n          // the only vital one for now.                                                                              // 154\n          if (\"\" === header_str && xhr.getResponseHeader(\"content-type\"))                                             // 155\n            header_str =                                                                                              // 156\n            \"content-type: \" + xhr.getResponseHeader(\"content-type\");                                                 // 157\n                                                                                                                      // 158\n          var headers_raw = header_str.split(/\\r?\\n/);                                                                // 159\n          _.each(headers_raw, function (h) {                                                                          // 160\n            var m = /^(.*?):(?:\\s+)(.*)$/.exec(h);                                                                    // 161\n            if (m && m.length === 3)                                                                                  // 162\n              response.headers[m[1].toLowerCase()] = m[2];                                                            // 163\n          });                                                                                                         // 164\n                                                                                                                      // 165\n          populateData(response);                                                                                     // 166\n                                                                                                                      // 167\n          var error = null;                                                                                           // 168\n          if (response.statusCode >= 400)                                                                             // 169\n            error = makeErrorByStatus(response.statusCode, response.content);                                         // 170\n                                                                                                                      // 171\n          callback(error, response);                                                                                  // 172\n        }                                                                                                             // 173\n      }                                                                                                               // 174\n    };                                                                                                                // 175\n                                                                                                                      // 176\n    // Allow custom control over XHR and abort early.                                                                 // 177\n    if (options.beforeSend) {                                                                                         // 178\n      // Sanity                                                                                                       // 179\n      var beforeSend = _.once(options.beforeSend);                                                                    // 180\n                                                                                                                      // 181\n      // Call the callback and check to see if the request was aborted                                                // 182\n      if (false === beforeSend.call(null, xhr, options)) {                                                            // 183\n        return xhr.abort();                                                                                           // 184\n      }                                                                                                               // 185\n    }                                                                                                                 // 186\n                                                                                                                      // 187\n    // send it on its way                                                                                             // 188\n    xhr.send(content);                                                                                                // 189\n                                                                                                                      // 190\n  } catch (err) {                                                                                                     // 191\n    callback(err);                                                                                                    // 192\n  }                                                                                                                   // 193\n                                                                                                                      // 194\n};                                                                                                                    // 195\n                                                                                                                      // 196\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/http/deprecated.js                                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// The HTTP object used to be called Meteor.http.                                                                     // 1\n// XXX COMPAT WITH 0.6.4                                                                                              // 2\nMeteor.http = HTTP;                                                                                                   // 3\n                                                                                                                      // 4\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]