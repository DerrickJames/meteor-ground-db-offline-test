[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar Meteor;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/meteor/packages/meteor.js                                                                            //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n(function(){                                                                                                     // 1\n                                                                                                                 // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                        //     // 4\n// packages/meteor/client_environment.js                                                                  //     // 5\n//                                                                                                        //     // 6\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                          //     // 8\n/**                                                                                                       // 1   // 9\n * @summary The Meteor namespace                                                                          // 2   // 10\n * @namespace Meteor                                                                                      // 3   // 11\n */                                                                                                       // 4   // 12\nMeteor = {                                                                                                // 5   // 13\n                                                                                                          // 6   // 14\n  /**                                                                                                     // 7   // 15\n   * @summary Boolean variable.  True if running in client environment.                                   // 8   // 16\n   * @locus Anywhere                                                                                      // 9   // 17\n   * @static                                                                                              // 10  // 18\n   * @type {Boolean}                                                                                      // 11  // 19\n   */                                                                                                     // 12  // 20\n  isClient: true,                                                                                         // 13  // 21\n                                                                                                          // 14  // 22\n  /**                                                                                                     // 15  // 23\n   * @summary Boolean variable.  True if running in server environment.                                   // 16  // 24\n   * @locus Anywhere                                                                                      // 17  // 25\n   * @static                                                                                              // 18  // 26\n   * @type {Boolean}                                                                                      // 19  // 27\n   */                                                                                                     // 20  // 28\n  isServer: false,                                                                                        // 21  // 29\n  isCordova: false                                                                                        // 22  // 30\n};                                                                                                        // 23  // 31\n                                                                                                          // 24  // 32\nif (typeof __meteor_runtime_config__ === 'object' &&                                                      // 25  // 33\n    __meteor_runtime_config__.PUBLIC_SETTINGS) {                                                          // 26  // 34\n  /**                                                                                                     // 27  // 35\n   * @summary `Meteor.settings` contains deployment-specific configuration options. You can initialize settings by passing the `--settings` option (which takes the name of a file containing JSON data) to `meteor run` or `meteor deploy`. When running your server directly (e.g. from a bundle), you instead specify settings by putting the JSON directly into the `METEOR_SETTINGS` environment variable. If the settings object contains a key named `public`, then `Meteor.settings.public` will be available on the client as well as the server.  All other properties of `Meteor.settings` are only defined on the server.  You can rely on `Meteor.settings` and `Meteor.settings.public` being defined objects (not undefined) on both client and server even if there are no settings specified.  Changes to `Meteor.settings.public` at runtime will be picked up by new client connections.\n   * @locus Anywhere                                                                                      // 29  // 37\n   * @type {Object}                                                                                       // 30  // 38\n   */                                                                                                     // 31  // 39\n  Meteor.settings = { 'public': __meteor_runtime_config__.PUBLIC_SETTINGS };                              // 32  // 40\n}                                                                                                         // 33  // 41\n                                                                                                          // 34  // 42\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 43\n                                                                                                                 // 44\n}).call(this);                                                                                                   // 45\n                                                                                                                 // 46\n                                                                                                                 // 47\n                                                                                                                 // 48\n                                                                                                                 // 49\n                                                                                                                 // 50\n                                                                                                                 // 51\n(function(){                                                                                                     // 52\n                                                                                                                 // 53\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 54\n//                                                                                                        //     // 55\n// packages/meteor/cordova_environment.js                                                                 //     // 56\n//                                                                                                        //     // 57\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 58\n                                                                                                          //     // 59\n/**                                                                                                       // 1   // 60\n * @summary Boolean variable.  True if running in a Cordova mobile environment.                           // 2   // 61\n * @type {Boolean}                                                                                        // 3   // 62\n * @static                                                                                                // 4   // 63\n * @locus Anywhere                                                                                        // 5   // 64\n */                                                                                                       // 6   // 65\nMeteor.isCordova = true;                                                                                  // 7   // 66\n                                                                                                          // 8   // 67\n                                                                                                          // 9   // 68\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 69\n                                                                                                                 // 70\n}).call(this);                                                                                                   // 71\n                                                                                                                 // 72\n                                                                                                                 // 73\n                                                                                                                 // 74\n                                                                                                                 // 75\n                                                                                                                 // 76\n                                                                                                                 // 77\n(function(){                                                                                                     // 78\n                                                                                                                 // 79\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 80\n//                                                                                                        //     // 81\n// packages/meteor/helpers.js                                                                             //     // 82\n//                                                                                                        //     // 83\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 84\n                                                                                                          //     // 85\nif (Meteor.isServer)                                                                                      // 1   // 86\n  var Future = Npm.require('fibers/future');                                                              // 2   // 87\n                                                                                                          // 3   // 88\nif (typeof __meteor_runtime_config__ === 'object' &&                                                      // 4   // 89\n    __meteor_runtime_config__.meteorRelease) {                                                            // 5   // 90\n  /**                                                                                                     // 6   // 91\n   * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `\"1.2.3\"`). It is `undefined` if the project was built using a git checkout of Meteor.\n   * @locus Anywhere                                                                                      // 8   // 93\n   * @type {String}                                                                                       // 9   // 94\n   */                                                                                                     // 10  // 95\n  Meteor.release = __meteor_runtime_config__.meteorRelease;                                               // 11  // 96\n}                                                                                                         // 12  // 97\n                                                                                                          // 13  // 98\n// XXX find a better home for these? Ideally they would be _.get,                                         // 14  // 99\n// _.ensure, _.delete..                                                                                   // 15  // 100\n                                                                                                          // 16  // 101\n_.extend(Meteor, {                                                                                        // 17  // 102\n  // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or                                       // 18  // 103\n  // a[b][c] doesn't exist.                                                                               // 19  // 104\n  //                                                                                                      // 20  // 105\n  _get: function (obj /*, arguments */) {                                                                 // 21  // 106\n    for (var i = 1; i < arguments.length; i++) {                                                          // 22  // 107\n      if (!(arguments[i] in obj))                                                                         // 23  // 108\n        return undefined;                                                                                 // 24  // 109\n      obj = obj[arguments[i]];                                                                            // 25  // 110\n    }                                                                                                     // 26  // 111\n    return obj;                                                                                           // 27  // 112\n  },                                                                                                      // 28  // 113\n                                                                                                          // 29  // 114\n  // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,                                     // 30  // 115\n  // it is created and set to {}. Either way, it is returned.                                             // 31  // 116\n  //                                                                                                      // 32  // 117\n  _ensure: function (obj /*, arguments */) {                                                              // 33  // 118\n    for (var i = 1; i < arguments.length; i++) {                                                          // 34  // 119\n      var key = arguments[i];                                                                             // 35  // 120\n      if (!(key in obj))                                                                                  // 36  // 121\n        obj[key] = {};                                                                                    // 37  // 122\n      obj = obj[key];                                                                                     // 38  // 123\n    }                                                                                                     // 39  // 124\n                                                                                                          // 40  // 125\n    return obj;                                                                                           // 41  // 126\n  },                                                                                                      // 42  // 127\n                                                                                                          // 43  // 128\n  // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it                                       // 44  // 129\n  // isn't empty, then a[b] unless it isn't empty.                                                        // 45  // 130\n  //                                                                                                      // 46  // 131\n  _delete: function (obj /*, arguments */) {                                                              // 47  // 132\n    var stack = [obj];                                                                                    // 48  // 133\n    var leaf = true;                                                                                      // 49  // 134\n    for (var i = 1; i < arguments.length - 1; i++) {                                                      // 50  // 135\n      var key = arguments[i];                                                                             // 51  // 136\n      if (!(key in obj)) {                                                                                // 52  // 137\n        leaf = false;                                                                                     // 53  // 138\n        break;                                                                                            // 54  // 139\n      }                                                                                                   // 55  // 140\n      obj = obj[key];                                                                                     // 56  // 141\n      if (typeof obj !== \"object\")                                                                        // 57  // 142\n        break;                                                                                            // 58  // 143\n      stack.push(obj);                                                                                    // 59  // 144\n    }                                                                                                     // 60  // 145\n                                                                                                          // 61  // 146\n    for (var i = stack.length - 1; i >= 0; i--) {                                                         // 62  // 147\n      var key = arguments[i+1];                                                                           // 63  // 148\n                                                                                                          // 64  // 149\n      if (leaf)                                                                                           // 65  // 150\n        leaf = false;                                                                                     // 66  // 151\n      else                                                                                                // 67  // 152\n        for (var other in stack[i][key])                                                                  // 68  // 153\n          return; // not empty -- we're done                                                              // 69  // 154\n                                                                                                          // 70  // 155\n      delete stack[i][key];                                                                               // 71  // 156\n    }                                                                                                     // 72  // 157\n  },                                                                                                      // 73  // 158\n                                                                                                          // 74  // 159\n  // wrapAsync can wrap any function that takes some number of arguments that                             // 75  // 160\n  // can't be undefined, followed by some optional arguments, where the callback                          // 76  // 161\n  // is the last optional argument.                                                                       // 77  // 162\n  // e.g. fs.readFile(pathname, [callback]),                                                              // 78  // 163\n  // fs.open(pathname, flags, [mode], [callback])                                                         // 79  // 164\n  // For maximum effectiveness and least confusion, wrapAsync should be used on                           // 80  // 165\n  // functions where the callback is the only argument of type Function.                                  // 81  // 166\n                                                                                                          // 82  // 167\n  /**                                                                                                     // 83  // 168\n   * @memberOf Meteor                                                                                     // 84  // 169\n   * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.\n   * @locus Anywhere                                                                                      // 86  // 171\n   * @param {Function} func A function that takes a callback as its final parameter                       // 87  // 172\n   * @param {Object} [context] Optional `this` object against which the original function will be invoked        // 173\n   */                                                                                                     // 89  // 174\n  wrapAsync: function (fn, context) {                                                                     // 90  // 175\n    return function (/* arguments */) {                                                                   // 91  // 176\n      var self = context || this;                                                                         // 92  // 177\n      var newArgs = _.toArray(arguments);                                                                 // 93  // 178\n      var callback;                                                                                       // 94  // 179\n                                                                                                          // 95  // 180\n      for (var i = newArgs.length - 1; i >= 0; --i) {                                                     // 96  // 181\n        var arg = newArgs[i];                                                                             // 97  // 182\n        var type = typeof arg;                                                                            // 98  // 183\n        if (type !== \"undefined\") {                                                                       // 99  // 184\n          if (type === \"function\") {                                                                      // 100\n            callback = arg;                                                                               // 101\n          }                                                                                               // 102\n          break;                                                                                          // 103\n        }                                                                                                 // 104\n      }                                                                                                   // 105\n                                                                                                          // 106\n      if (! callback) {                                                                                   // 107\n        if (Meteor.isClient) {                                                                            // 108\n          callback = logErr;                                                                              // 109\n        } else {                                                                                          // 110\n          var fut = new Future();                                                                         // 111\n          callback = fut.resolver();                                                                      // 112\n        }                                                                                                 // 113\n        ++i; // Insert the callback just after arg.                                                       // 114\n      }                                                                                                   // 115\n                                                                                                          // 116\n      newArgs[i] = Meteor.bindEnvironment(callback);                                                      // 117\n      var result = fn.apply(self, newArgs);                                                               // 118\n      return fut ? fut.wait() : result;                                                                   // 119\n    };                                                                                                    // 120\n  },                                                                                                      // 121\n                                                                                                          // 122\n  // Sets child's prototype to a new object whose prototype is parent's                                   // 123\n  // prototype. Used as:                                                                                  // 124\n  //   Meteor._inherits(ClassB, ClassA).                                                                  // 125\n  //   _.extend(ClassB.prototype, { ... })                                                                // 126\n  // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.                            // 127\n  _inherits: function (Child, Parent) {                                                                   // 128\n    // copy Parent static properties                                                                      // 129\n    for (var key in Parent) {                                                                             // 130\n      // make sure we only copy hasOwnProperty properties vs. prototype                                   // 131\n      // properties                                                                                       // 132\n      if (_.has(Parent, key))                                                                             // 133\n        Child[key] = Parent[key];                                                                         // 134\n    }                                                                                                     // 135\n                                                                                                          // 136\n    // a middle member of prototype chain: takes the prototype from the Parent                            // 137\n    var Middle = function () {                                                                            // 138\n      this.constructor = Child;                                                                           // 139\n    };                                                                                                    // 140\n    Middle.prototype = Parent.prototype;                                                                  // 141\n    Child.prototype = new Middle();                                                                       // 142\n    Child.__super__ = Parent.prototype;                                                                   // 143\n    return Child;                                                                                         // 144\n  }                                                                                                       // 145\n});                                                                                                       // 146\n                                                                                                          // 147\nvar warnedAboutWrapAsync = false;                                                                         // 148\n                                                                                                          // 149\n/**                                                                                                       // 150\n * @deprecated in 0.9.3                                                                                   // 151\n */                                                                                                       // 152\nMeteor._wrapAsync = function(fn, context) {                                                               // 153\n  if (! warnedAboutWrapAsync) {                                                                           // 154\n    Meteor._debug(\"Meteor._wrapAsync has been renamed to Meteor.wrapAsync\");                              // 155\n    warnedAboutWrapAsync = true;                                                                          // 156\n  }                                                                                                       // 157\n  return Meteor.wrapAsync.apply(Meteor, arguments);                                                       // 158\n};                                                                                                        // 159\n                                                                                                          // 160\nfunction logErr(err) {                                                                                    // 161\n  if (err) {                                                                                              // 162\n    return Meteor._debug(                                                                                 // 163\n      \"Exception in callback of async function\",                                                          // 164\n      err.stack ? err.stack : err                                                                         // 165\n    );                                                                                                    // 166\n  }                                                                                                       // 167\n}                                                                                                         // 168\n                                                                                                          // 169\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 255\n                                                                                                                 // 256\n}).call(this);                                                                                                   // 257\n                                                                                                                 // 258\n                                                                                                                 // 259\n                                                                                                                 // 260\n                                                                                                                 // 261\n                                                                                                                 // 262\n                                                                                                                 // 263\n(function(){                                                                                                     // 264\n                                                                                                                 // 265\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 266\n//                                                                                                        //     // 267\n// packages/meteor/setimmediate.js                                                                        //     // 268\n//                                                                                                        //     // 269\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 270\n                                                                                                          //     // 271\n// Chooses one of three setImmediate implementations:                                                     // 1   // 272\n//                                                                                                        // 2   // 273\n// * Native setImmediate (IE 10, Node 0.9+)                                                               // 3   // 274\n//                                                                                                        // 4   // 275\n// * postMessage (many browsers)                                                                          // 5   // 276\n//                                                                                                        // 6   // 277\n// * setTimeout  (fallback)                                                                               // 7   // 278\n//                                                                                                        // 8   // 279\n// The postMessage implementation is based on                                                             // 9   // 280\n// https://github.com/NobleJS/setImmediate/tree/1.0.1                                                     // 10  // 281\n//                                                                                                        // 11  // 282\n// Don't use `nextTick` for Node since it runs its callbacks before                                       // 12  // 283\n// I/O, which is stricter than we're looking for.                                                         // 13  // 284\n//                                                                                                        // 14  // 285\n// Not installed as a polyfill, as our public API is `Meteor.defer`.                                      // 15  // 286\n// Since we're not trying to be a polyfill, we have some                                                  // 16  // 287\n// simplifications:                                                                                       // 17  // 288\n//                                                                                                        // 18  // 289\n// If one invocation of a setImmediate callback pauses itself by a                                        // 19  // 290\n// call to alert/prompt/showModelDialog, the NobleJS polyfill                                             // 20  // 291\n// implementation ensured that no setImmedate callback would run until                                    // 21  // 292\n// the first invocation completed.  While correct per the spec, what it                                   // 22  // 293\n// would mean for us in practice is that any reactive updates relying                                     // 23  // 294\n// on Meteor.defer would be hung in the main window until the modal                                       // 24  // 295\n// dialog was dismissed.  Thus we only ensure that a setImmediate                                         // 25  // 296\n// function is called in a later event loop.                                                              // 26  // 297\n//                                                                                                        // 27  // 298\n// We don't need to support using a string to be eval'ed for the                                          // 28  // 299\n// callback, arguments to the function, or clearImmediate.                                                // 29  // 300\n                                                                                                          // 30  // 301\n\"use strict\";                                                                                             // 31  // 302\n                                                                                                          // 32  // 303\nvar global = this;                                                                                        // 33  // 304\n                                                                                                          // 34  // 305\n                                                                                                          // 35  // 306\n// IE 10, Node >= 9.1                                                                                     // 36  // 307\n                                                                                                          // 37  // 308\nfunction useSetImmediate() {                                                                              // 38  // 309\n  if (! global.setImmediate)                                                                              // 39  // 310\n    return null;                                                                                          // 40  // 311\n  else {                                                                                                  // 41  // 312\n    var setImmediate = function (fn) {                                                                    // 42  // 313\n      global.setImmediate(fn);                                                                            // 43  // 314\n    };                                                                                                    // 44  // 315\n    setImmediate.implementation = 'setImmediate';                                                         // 45  // 316\n    return setImmediate;                                                                                  // 46  // 317\n  }                                                                                                       // 47  // 318\n}                                                                                                         // 48  // 319\n                                                                                                          // 49  // 320\n                                                                                                          // 50  // 321\n// Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari                                         // 51  // 322\n                                                                                                          // 52  // 323\nfunction usePostMessage() {                                                                               // 53  // 324\n  // The test against `importScripts` prevents this implementation                                        // 54  // 325\n  // from being installed inside a web worker, where                                                      // 55  // 326\n  // `global.postMessage` means something completely different and                                        // 56  // 327\n  // can't be used for this purpose.                                                                      // 57  // 328\n                                                                                                          // 58  // 329\n  if (!global.postMessage || global.importScripts) {                                                      // 59  // 330\n    return null;                                                                                          // 60  // 331\n  }                                                                                                       // 61  // 332\n                                                                                                          // 62  // 333\n  // Avoid synchronous post message implementations.                                                      // 63  // 334\n                                                                                                          // 64  // 335\n  var postMessageIsAsynchronous = true;                                                                   // 65  // 336\n  var oldOnMessage = global.onmessage;                                                                    // 66  // 337\n  global.onmessage = function () {                                                                        // 67  // 338\n      postMessageIsAsynchronous = false;                                                                  // 68  // 339\n  };                                                                                                      // 69  // 340\n  global.postMessage(\"\", \"*\");                                                                            // 70  // 341\n  global.onmessage = oldOnMessage;                                                                        // 71  // 342\n                                                                                                          // 72  // 343\n  if (! postMessageIsAsynchronous)                                                                        // 73  // 344\n    return null;                                                                                          // 74  // 345\n                                                                                                          // 75  // 346\n  var funcIndex = 0;                                                                                      // 76  // 347\n  var funcs = {};                                                                                         // 77  // 348\n                                                                                                          // 78  // 349\n  // Installs an event handler on `global` for the `message` event: see                                   // 79  // 350\n  // * https://developer.mozilla.org/en/DOM/window.postMessage                                            // 80  // 351\n  // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages       // 81  // 352\n                                                                                                          // 82  // 353\n  // XXX use Random.id() here?                                                                            // 83  // 354\n  var MESSAGE_PREFIX = \"Meteor._setImmediate.\" + Math.random() + '.';                                     // 84  // 355\n                                                                                                          // 85  // 356\n  function isStringAndStartsWith(string, putativeStart) {                                                 // 86  // 357\n    return (typeof string === \"string\" &&                                                                 // 87  // 358\n            string.substring(0, putativeStart.length) === putativeStart);                                 // 88  // 359\n  }                                                                                                       // 89  // 360\n                                                                                                          // 90  // 361\n  function onGlobalMessage(event) {                                                                       // 91  // 362\n    // This will catch all incoming messages (even from other                                             // 92  // 363\n    // windows!), so we need to try reasonably hard to avoid letting                                      // 93  // 364\n    // anyone else trick us into firing off. We test the origin is                                        // 94  // 365\n    // still this window, and that a (randomly generated)                                                 // 95  // 366\n    // unpredictable identifying prefix is present.                                                       // 96  // 367\n    if (event.source === global &&                                                                        // 97  // 368\n        isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {                                              // 98  // 369\n      var index = event.data.substring(MESSAGE_PREFIX.length);                                            // 99  // 370\n      try {                                                                                               // 100\n        if (funcs[index])                                                                                 // 101\n          funcs[index]();                                                                                 // 102\n      }                                                                                                   // 103\n      finally {                                                                                           // 104\n        delete funcs[index];                                                                              // 105\n      }                                                                                                   // 106\n    }                                                                                                     // 107\n  }                                                                                                       // 108\n                                                                                                          // 109\n  if (global.addEventListener) {                                                                          // 110\n    global.addEventListener(\"message\", onGlobalMessage, false);                                           // 111\n  } else {                                                                                                // 112\n    global.attachEvent(\"onmessage\", onGlobalMessage);                                                     // 113\n  }                                                                                                       // 114\n                                                                                                          // 115\n  var setImmediate = function (fn) {                                                                      // 116\n    // Make `global` post a message to itself with the handle and                                         // 117\n    // identifying prefix, thus asynchronously invoking our                                               // 118\n    // onGlobalMessage listener above.                                                                    // 119\n    ++funcIndex;                                                                                          // 120\n    funcs[funcIndex] = fn;                                                                                // 121\n    global.postMessage(MESSAGE_PREFIX + funcIndex, \"*\");                                                  // 122\n  };                                                                                                      // 123\n  setImmediate.implementation = 'postMessage';                                                            // 124\n  return setImmediate;                                                                                    // 125\n}                                                                                                         // 126\n                                                                                                          // 127\n                                                                                                          // 128\nfunction useTimeout() {                                                                                   // 129\n  var setImmediate = function (fn) {                                                                      // 130\n    global.setTimeout(fn, 0);                                                                             // 131\n  };                                                                                                      // 132\n  setImmediate.implementation = 'setTimeout';                                                             // 133\n  return setImmediate;                                                                                    // 134\n}                                                                                                         // 135\n                                                                                                          // 136\n                                                                                                          // 137\nMeteor._setImmediate =                                                                                    // 138\n  useSetImmediate() ||                                                                                    // 139\n  usePostMessage() ||                                                                                     // 140\n  useTimeout();                                                                                           // 141\n                                                                                                          // 142\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 414\n                                                                                                                 // 415\n}).call(this);                                                                                                   // 416\n                                                                                                                 // 417\n                                                                                                                 // 418\n                                                                                                                 // 419\n                                                                                                                 // 420\n                                                                                                                 // 421\n                                                                                                                 // 422\n(function(){                                                                                                     // 423\n                                                                                                                 // 424\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 425\n//                                                                                                        //     // 426\n// packages/meteor/timers.js                                                                              //     // 427\n//                                                                                                        //     // 428\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 429\n                                                                                                          //     // 430\nvar withoutInvocation = function (f) {                                                                    // 1   // 431\n  if (Package.ddp) {                                                                                      // 2   // 432\n    var _CurrentInvocation = Package.ddp.DDP._CurrentInvocation;                                          // 3   // 433\n    if (_CurrentInvocation.get() && _CurrentInvocation.get().isSimulation)                                // 4   // 434\n      throw new Error(\"Can't set timers inside simulations\");                                             // 5   // 435\n    return function () { _CurrentInvocation.withValue(null, f); };                                        // 6   // 436\n  }                                                                                                       // 7   // 437\n  else                                                                                                    // 8   // 438\n    return f;                                                                                             // 9   // 439\n};                                                                                                        // 10  // 440\n                                                                                                          // 11  // 441\nvar bindAndCatch = function (context, f) {                                                                // 12  // 442\n  return Meteor.bindEnvironment(withoutInvocation(f), context);                                           // 13  // 443\n};                                                                                                        // 14  // 444\n                                                                                                          // 15  // 445\n_.extend(Meteor, {                                                                                        // 16  // 446\n  // Meteor.setTimeout and Meteor.setInterval callbacks scheduled                                         // 17  // 447\n  // inside a server method are not part of the method invocation and                                     // 18  // 448\n  // should clear out the CurrentInvocation environment variable.                                         // 19  // 449\n                                                                                                          // 20  // 450\n  /**                                                                                                     // 21  // 451\n   * @memberOf Meteor                                                                                     // 22  // 452\n   * @summary Call a function in the future after waiting for a specified delay.                          // 23  // 453\n   * @locus Anywhere                                                                                      // 24  // 454\n   * @param {Function} func The function to run                                                           // 25  // 455\n   * @param {Number} delay Number of milliseconds to wait before calling function                         // 26  // 456\n   */                                                                                                     // 27  // 457\n  setTimeout: function (f, duration) {                                                                    // 28  // 458\n    return setTimeout(bindAndCatch(\"setTimeout callback\", f), duration);                                  // 29  // 459\n  },                                                                                                      // 30  // 460\n                                                                                                          // 31  // 461\n  /**                                                                                                     // 32  // 462\n   * @memberOf Meteor                                                                                     // 33  // 463\n   * @summary Call a function repeatedly, with a time delay between calls.                                // 34  // 464\n   * @locus Anywhere                                                                                      // 35  // 465\n   * @param {Function} func The function to run                                                           // 36  // 466\n   * @param {Number} delay Number of milliseconds to wait between each function call.                     // 37  // 467\n   */                                                                                                     // 38  // 468\n  setInterval: function (f, duration) {                                                                   // 39  // 469\n    return setInterval(bindAndCatch(\"setInterval callback\", f), duration);                                // 40  // 470\n  },                                                                                                      // 41  // 471\n                                                                                                          // 42  // 472\n  /**                                                                                                     // 43  // 473\n   * @memberOf Meteor                                                                                     // 44  // 474\n   * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.                         // 45  // 475\n   * @locus Anywhere                                                                                      // 46  // 476\n   * @param {Number} id The handle returned by `Meteor.setInterval`                                       // 47  // 477\n   */                                                                                                     // 48  // 478\n  clearInterval: function(x) {                                                                            // 49  // 479\n    return clearInterval(x);                                                                              // 50  // 480\n  },                                                                                                      // 51  // 481\n                                                                                                          // 52  // 482\n  /**                                                                                                     // 53  // 483\n   * @memberOf Meteor                                                                                     // 54  // 484\n   * @summary Cancel a function call scheduled by `Meteor.setTimeout`.                                    // 55  // 485\n   * @locus Anywhere                                                                                      // 56  // 486\n   * @param {Number} id The handle returned by `Meteor.setTimeout`                                        // 57  // 487\n   */                                                                                                     // 58  // 488\n  clearTimeout: function(x) {                                                                             // 59  // 489\n    return clearTimeout(x);                                                                               // 60  // 490\n  },                                                                                                      // 61  // 491\n                                                                                                          // 62  // 492\n  // XXX consider making this guarantee ordering of defer'd callbacks, like                               // 63  // 493\n  // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:                              // 64  // 494\n  //    callSomethingThatDefersSomeWork();                                                                // 65  // 495\n  //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));                                  // 66  // 496\n  defer: function (f) {                                                                                   // 67  // 497\n    Meteor._setImmediate(bindAndCatch(\"defer callback\", f));                                              // 68  // 498\n  }                                                                                                       // 69  // 499\n});                                                                                                       // 70  // 500\n                                                                                                          // 71  // 501\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 502\n                                                                                                                 // 503\n}).call(this);                                                                                                   // 504\n                                                                                                                 // 505\n                                                                                                                 // 506\n                                                                                                                 // 507\n                                                                                                                 // 508\n                                                                                                                 // 509\n                                                                                                                 // 510\n(function(){                                                                                                     // 511\n                                                                                                                 // 512\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 513\n//                                                                                                        //     // 514\n// packages/meteor/errors.js                                                                              //     // 515\n//                                                                                                        //     // 516\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 517\n                                                                                                          //     // 518\n// Makes an error subclass which properly contains a stack trace in most                                  // 1   // 519\n// environments. constructor can set fields on `this` (and should probably set                            // 2   // 520\n// `message`, which is what gets displayed at the top of a stack trace).                                  // 3   // 521\n//                                                                                                        // 4   // 522\nMeteor.makeErrorType = function (name, constructor) {                                                     // 5   // 523\n  var errorClass = function (/*arguments*/) {                                                             // 6   // 524\n    var self = this;                                                                                      // 7   // 525\n                                                                                                          // 8   // 526\n    // Ensure we get a proper stack trace in most Javascript environments                                 // 9   // 527\n    if (Error.captureStackTrace) {                                                                        // 10  // 528\n      // V8 environments (Chrome and Node.js)                                                             // 11  // 529\n      Error.captureStackTrace(self, errorClass);                                                          // 12  // 530\n    } else {                                                                                              // 13  // 531\n      // Firefox                                                                                          // 14  // 532\n      var e = new Error;                                                                                  // 15  // 533\n      e.__proto__ = errorClass.prototype;                                                                 // 16  // 534\n      if (e instanceof errorClass)                                                                        // 17  // 535\n        self = e;                                                                                         // 18  // 536\n    }                                                                                                     // 19  // 537\n    // Safari magically works.                                                                            // 20  // 538\n                                                                                                          // 21  // 539\n    constructor.apply(self, arguments);                                                                   // 22  // 540\n                                                                                                          // 23  // 541\n    self.errorType = name;                                                                                // 24  // 542\n                                                                                                          // 25  // 543\n    return self;                                                                                          // 26  // 544\n  };                                                                                                      // 27  // 545\n                                                                                                          // 28  // 546\n  Meteor._inherits(errorClass, Error);                                                                    // 29  // 547\n                                                                                                          // 30  // 548\n  return errorClass;                                                                                      // 31  // 549\n};                                                                                                        // 32  // 550\n                                                                                                          // 33  // 551\n// This should probably be in the livedata package, but we don't want                                     // 34  // 552\n// to require you to use the livedata package to get it. Eventually we                                    // 35  // 553\n// should probably rename it to DDP.Error and put it back in the                                          // 36  // 554\n// 'livedata' package (which we should rename to 'ddp' also.)                                             // 37  // 555\n//                                                                                                        // 38  // 556\n// Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object                           // 39  // 557\n// containing 'error' and optionally 'reason' and 'details'.                                              // 40  // 558\n// The DDP client manually puts these into Meteor.Error objects. (We don't use                            // 41  // 559\n// EJSON.addType here because the type is determined by location in the                                   // 42  // 560\n// protocol, not text on the wire.)                                                                       // 43  // 561\n                                                                                                          // 44  // 562\n/**                                                                                                       // 45  // 563\n * @summary This class represents a symbolic error thrown by a method.                                    // 46  // 564\n * @locus Anywhere                                                                                        // 47  // 565\n * @class                                                                                                 // 48  // 566\n * @param {String} error A string code uniquely identifying this kind of error.                           // 49  // 567\n * This string should be used by callers of the method to determine the                                   // 50  // 568\n * appropriate action to take, instead of attempting to parse the reason                                  // 51  // 569\n * or details fields. For example:                                                                        // 52  // 570\n *                                                                                                        // 53  // 571\n * ```                                                                                                    // 54  // 572\n * // on the server, pick a code unique to this error                                                     // 55  // 573\n * // the reason field should be a useful debug message                                                   // 56  // 574\n * throw new Meteor.Error(\"logged-out\",                                                                   // 57  // 575\n *   \"The user must be logged in to post a comment.\");                                                    // 58  // 576\n *                                                                                                        // 59  // 577\n * // on the client                                                                                       // 60  // 578\n * Meteor.call(\"methodName\", function (error) {                                                           // 61  // 579\n *   // identify the error                                                                                // 62  // 580\n *   if (error && error.error === \"logged-out\") {                                                         // 63  // 581\n *     // show a nice error message                                                                       // 64  // 582\n *     Session.set(\"errorMessage\", \"Please log in to post a comment.\");                                   // 65  // 583\n *   }                                                                                                    // 66  // 584\n * });                                                                                                    // 67  // 585\n * ```                                                                                                    // 68  // 586\n *                                                                                                        // 69  // 587\n * For legacy reasons, some built-in Meteor functions such as `check` throw                               // 70  // 588\n * errors with a number in this field.                                                                    // 71  // 589\n *                                                                                                        // 72  // 590\n * @param {String} [reason] Optional.  A short human-readable summary of the                              // 73  // 591\n * error, like 'Not Found'.                                                                               // 74  // 592\n * @param {String} [details] Optional.  Additional information about the error,                           // 75  // 593\n * like a textual stack trace.                                                                            // 76  // 594\n */                                                                                                       // 77  // 595\nMeteor.Error = Meteor.makeErrorType(                                                                      // 78  // 596\n  \"Meteor.Error\",                                                                                         // 79  // 597\n  function (error, reason, details) {                                                                     // 80  // 598\n    var self = this;                                                                                      // 81  // 599\n                                                                                                          // 82  // 600\n    // String code uniquely identifying this kind of error.                                               // 83  // 601\n    self.error = error;                                                                                   // 84  // 602\n                                                                                                          // 85  // 603\n    // Optional: A short human-readable summary of the error. Not                                         // 86  // 604\n    // intended to be shown to end users, just developers. (\"Not Found\",                                  // 87  // 605\n    // \"Internal Server Error\")                                                                           // 88  // 606\n    self.reason = reason;                                                                                 // 89  // 607\n                                                                                                          // 90  // 608\n    // Optional: Additional information about the error, say for                                          // 91  // 609\n    // debugging. It might be a (textual) stack trace if the server is                                    // 92  // 610\n    // willing to provide one. The corresponding thing in HTTP would be                                   // 93  // 611\n    // the body of a 404 or 500 response. (The difference is that we                                      // 94  // 612\n    // never expect this to be shown to end users, only developers, so                                    // 95  // 613\n    // it doesn't need to be pretty.)                                                                     // 96  // 614\n    self.details = details;                                                                               // 97  // 615\n                                                                                                          // 98  // 616\n    // This is what gets displayed at the top of a stack trace. Current                                   // 99  // 617\n    // format is \"[404]\" (if no reason is set) or \"File not found [404]\"                                  // 100\n    if (self.reason)                                                                                      // 101\n      self.message = self.reason + ' [' + self.error + ']';                                               // 102\n    else                                                                                                  // 103\n      self.message = '[' + self.error + ']';                                                              // 104\n  });                                                                                                     // 105\n                                                                                                          // 106\n// Meteor.Error is basically data and is sent over DDP, so you should be able to                          // 107\n// properly EJSON-clone it. This is especially important because if a                                     // 108\n// Meteor.Error is thrown through a Future, the error, reason, and details                                // 109\n// properties become non-enumerable so a standard Object clone won't preserve                             // 110\n// them and they will be lost from DDP.                                                                   // 111\nMeteor.Error.prototype.clone = function () {                                                              // 112\n  var self = this;                                                                                        // 113\n  return new Meteor.Error(self.error, self.reason, self.details);                                         // 114\n};                                                                                                        // 115\n                                                                                                          // 116\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 635\n                                                                                                                 // 636\n}).call(this);                                                                                                   // 637\n                                                                                                                 // 638\n                                                                                                                 // 639\n                                                                                                                 // 640\n                                                                                                                 // 641\n                                                                                                                 // 642\n                                                                                                                 // 643\n(function(){                                                                                                     // 644\n                                                                                                                 // 645\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 646\n//                                                                                                        //     // 647\n// packages/meteor/fiber_stubs_client.js                                                                  //     // 648\n//                                                                                                        //     // 649\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 650\n                                                                                                          //     // 651\n// This file is a partial analogue to fiber_helpers.js, which allows the client                           // 1   // 652\n// to use a queue too, and also to call noYieldsAllowed.                                                  // 2   // 653\n                                                                                                          // 3   // 654\n// The client has no ability to yield, so noYieldsAllowed is a noop.                                      // 4   // 655\n//                                                                                                        // 5   // 656\nMeteor._noYieldsAllowed = function (f) {                                                                  // 6   // 657\n  return f();                                                                                             // 7   // 658\n};                                                                                                        // 8   // 659\n                                                                                                          // 9   // 660\n// An even simpler queue of tasks than the fiber-enabled one.  This one just                              // 10  // 661\n// runs all the tasks when you call runTask or flush, synchronously.                                      // 11  // 662\n//                                                                                                        // 12  // 663\nMeteor._SynchronousQueue = function () {                                                                  // 13  // 664\n  var self = this;                                                                                        // 14  // 665\n  self._tasks = [];                                                                                       // 15  // 666\n  self._running = false;                                                                                  // 16  // 667\n  self._runTimeout = null;                                                                                // 17  // 668\n};                                                                                                        // 18  // 669\n                                                                                                          // 19  // 670\n_.extend(Meteor._SynchronousQueue.prototype, {                                                            // 20  // 671\n  runTask: function (task) {                                                                              // 21  // 672\n    var self = this;                                                                                      // 22  // 673\n    if (!self.safeToRunTask())                                                                            // 23  // 674\n      throw new Error(\"Could not synchronously run a task from a running task\");                          // 24  // 675\n    self._tasks.push(task);                                                                               // 25  // 676\n    var tasks = self._tasks;                                                                              // 26  // 677\n    self._tasks = [];                                                                                     // 27  // 678\n    self._running = true;                                                                                 // 28  // 679\n                                                                                                          // 29  // 680\n    if (self._runTimeout) {                                                                               // 30  // 681\n      // Since we're going to drain the queue, we can forget about the timeout                            // 31  // 682\n      // which tries to run it.  (But if one of our tasks queues something else,                          // 32  // 683\n      // the timeout will be correctly re-created.)                                                       // 33  // 684\n      clearTimeout(self._runTimeout);                                                                     // 34  // 685\n      self._runTimeout = null;                                                                            // 35  // 686\n    }                                                                                                     // 36  // 687\n                                                                                                          // 37  // 688\n    try {                                                                                                 // 38  // 689\n      while (!_.isEmpty(tasks)) {                                                                         // 39  // 690\n        var t = tasks.shift();                                                                            // 40  // 691\n        try {                                                                                             // 41  // 692\n          t();                                                                                            // 42  // 693\n        } catch (e) {                                                                                     // 43  // 694\n          if (_.isEmpty(tasks)) {                                                                         // 44  // 695\n            // this was the last task, that is, the one we're calling runTask                             // 45  // 696\n            // for.                                                                                       // 46  // 697\n            throw e;                                                                                      // 47  // 698\n          } else {                                                                                        // 48  // 699\n            Meteor._debug(\"Exception in queued task: \" + (e.stack || e));                                 // 49  // 700\n          }                                                                                               // 50  // 701\n        }                                                                                                 // 51  // 702\n      }                                                                                                   // 52  // 703\n    } finally {                                                                                           // 53  // 704\n      self._running = false;                                                                              // 54  // 705\n    }                                                                                                     // 55  // 706\n  },                                                                                                      // 56  // 707\n                                                                                                          // 57  // 708\n  queueTask: function (task) {                                                                            // 58  // 709\n    var self = this;                                                                                      // 59  // 710\n    self._tasks.push(task);                                                                               // 60  // 711\n    // Intentionally not using Meteor.setTimeout, because it doesn't like runing                          // 61  // 712\n    // in stubs for now.                                                                                  // 62  // 713\n    if (!self._runTimeout) {                                                                              // 63  // 714\n      self._runTimeout = setTimeout(_.bind(self.flush, self), 0);                                         // 64  // 715\n    }                                                                                                     // 65  // 716\n  },                                                                                                      // 66  // 717\n                                                                                                          // 67  // 718\n  flush: function () {                                                                                    // 68  // 719\n    var self = this;                                                                                      // 69  // 720\n    self.runTask(function () {});                                                                         // 70  // 721\n  },                                                                                                      // 71  // 722\n                                                                                                          // 72  // 723\n  drain: function () {                                                                                    // 73  // 724\n    var self = this;                                                                                      // 74  // 725\n    if (!self.safeToRunTask())                                                                            // 75  // 726\n      return;                                                                                             // 76  // 727\n    while (!_.isEmpty(self._tasks)) {                                                                     // 77  // 728\n      self.flush();                                                                                       // 78  // 729\n    }                                                                                                     // 79  // 730\n  },                                                                                                      // 80  // 731\n                                                                                                          // 81  // 732\n  safeToRunTask: function () {                                                                            // 82  // 733\n    var self = this;                                                                                      // 83  // 734\n    return !self._running;                                                                                // 84  // 735\n  }                                                                                                       // 85  // 736\n});                                                                                                       // 86  // 737\n                                                                                                          // 87  // 738\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 739\n                                                                                                                 // 740\n}).call(this);                                                                                                   // 741\n                                                                                                                 // 742\n                                                                                                                 // 743\n                                                                                                                 // 744\n                                                                                                                 // 745\n                                                                                                                 // 746\n                                                                                                                 // 747\n(function(){                                                                                                     // 748\n                                                                                                                 // 749\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 750\n//                                                                                                        //     // 751\n// packages/meteor/startup_client.js                                                                      //     // 752\n//                                                                                                        //     // 753\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 754\n                                                                                                          //     // 755\nvar queue = [];                                                                                           // 1   // 756\nvar loaded = !Meteor.isCordova &&                                                                         // 2   // 757\n  (document.readyState === \"loaded\" || document.readyState == \"complete\");                                // 3   // 758\n                                                                                                          // 4   // 759\nvar awaitingEventsCount = 1;                                                                              // 5   // 760\nvar ready = function() {                                                                                  // 6   // 761\n  awaitingEventsCount--;                                                                                  // 7   // 762\n  if (awaitingEventsCount > 0)                                                                            // 8   // 763\n    return;                                                                                               // 9   // 764\n                                                                                                          // 10  // 765\n  loaded = true;                                                                                          // 11  // 766\n  var runStartupCallbacks = function () {                                                                 // 12  // 767\n    if (Meteor.isCordova) {                                                                               // 13  // 768\n      if (! cordova.plugins || ! cordova.plugins.CordovaUpdate) {                                         // 14  // 769\n        // XXX This timeout should not be necessary.                                                      // 15  // 770\n        // Cordova indicates that all the cordova plugins files have been loaded                          // 16  // 771\n        // and plugins are ready to be used when the \"deviceready\" callback                               // 17  // 772\n        // fires. Even though we wait for the \"deviceready\" event, plugins                                // 18  // 773\n        // have been observed to still not be ready (likely a Cordova bug).                               // 19  // 774\n        // We check the availability of the Cordova-Update plugin (the only                               // 20  // 775\n        // plugin that we always include for sure) and retry a bit later if it                            // 21  // 776\n        // is nowhere to be found. Experiments have found that either all                                 // 22  // 777\n        // plugins are attached or none.                                                                  // 23  // 778\n        Meteor.setTimeout(runStartupCallbacks, 20);                                                       // 24  // 779\n        return;                                                                                           // 25  // 780\n      }                                                                                                   // 26  // 781\n    }                                                                                                     // 27  // 782\n                                                                                                          // 28  // 783\n    while (queue.length)                                                                                  // 29  // 784\n      (queue.shift())();                                                                                  // 30  // 785\n  };                                                                                                      // 31  // 786\n  runStartupCallbacks();                                                                                  // 32  // 787\n};                                                                                                        // 33  // 788\n                                                                                                          // 34  // 789\nif (document.addEventListener) {                                                                          // 35  // 790\n  document.addEventListener('DOMContentLoaded', ready, false);                                            // 36  // 791\n                                                                                                          // 37  // 792\n  if (Meteor.isCordova) {                                                                                 // 38  // 793\n    awaitingEventsCount++;                                                                                // 39  // 794\n    document.addEventListener('deviceready', ready, false);                                               // 40  // 795\n  }                                                                                                       // 41  // 796\n                                                                                                          // 42  // 797\n  window.addEventListener('load', ready, false);                                                          // 43  // 798\n} else {                                                                                                  // 44  // 799\n  document.attachEvent('onreadystatechange', function () {                                                // 45  // 800\n    if (document.readyState === \"complete\")                                                               // 46  // 801\n      ready();                                                                                            // 47  // 802\n  });                                                                                                     // 48  // 803\n  window.attachEvent('load', ready);                                                                      // 49  // 804\n}                                                                                                         // 50  // 805\n                                                                                                          // 51  // 806\n/**                                                                                                       // 52  // 807\n * @summary Run code when a client or a server starts.                                                    // 53  // 808\n * @locus Anywhere                                                                                        // 54  // 809\n * @param {Function} func A function to run on startup.                                                   // 55  // 810\n */                                                                                                       // 56  // 811\nMeteor.startup = function (cb) {                                                                          // 57  // 812\n  var doScroll = !document.addEventListener &&                                                            // 58  // 813\n    document.documentElement.doScroll;                                                                    // 59  // 814\n                                                                                                          // 60  // 815\n  if (!doScroll || window !== top) {                                                                      // 61  // 816\n    if (loaded)                                                                                           // 62  // 817\n      cb();                                                                                               // 63  // 818\n    else                                                                                                  // 64  // 819\n      queue.push(cb);                                                                                     // 65  // 820\n  } else {                                                                                                // 66  // 821\n    try { doScroll('left'); }                                                                             // 67  // 822\n    catch (e) {                                                                                           // 68  // 823\n      setTimeout(function() { Meteor.startup(cb); }, 50);                                                 // 69  // 824\n      return;                                                                                             // 70  // 825\n    };                                                                                                    // 71  // 826\n    cb();                                                                                                 // 72  // 827\n  }                                                                                                       // 73  // 828\n};                                                                                                        // 74  // 829\n                                                                                                          // 75  // 830\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 831\n                                                                                                                 // 832\n}).call(this);                                                                                                   // 833\n                                                                                                                 // 834\n                                                                                                                 // 835\n                                                                                                                 // 836\n                                                                                                                 // 837\n                                                                                                                 // 838\n                                                                                                                 // 839\n(function(){                                                                                                     // 840\n                                                                                                                 // 841\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 842\n//                                                                                                        //     // 843\n// packages/meteor/debug.js                                                                               //     // 844\n//                                                                                                        //     // 845\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 846\n                                                                                                          //     // 847\nvar suppress = 0;                                                                                         // 1   // 848\n                                                                                                          // 2   // 849\n// replacement for console.log. This is a temporary API. We should                                        // 3   // 850\n// provide a real logging API soon (possibly just a polyfill for                                          // 4   // 851\n// console?)                                                                                              // 5   // 852\n//                                                                                                        // 6   // 853\n// NOTE: this is used on the server to print the warning about                                            // 7   // 854\n// having autopublish enabled when you probably meant to turn it                                          // 8   // 855\n// off. it's not really the proper use of something called                                                // 9   // 856\n// _debug. the intent is for this message to go to the terminal and                                       // 10  // 857\n// be very visible. if you change _debug to go someplace else, etc,                                       // 11  // 858\n// please fix the autopublish code to do something reasonable.                                            // 12  // 859\n//                                                                                                        // 13  // 860\nMeteor._debug = function (/* arguments */) {                                                              // 14  // 861\n  if (suppress) {                                                                                         // 15  // 862\n    suppress--;                                                                                           // 16  // 863\n    return;                                                                                               // 17  // 864\n  }                                                                                                       // 18  // 865\n  if (typeof console !== 'undefined' &&                                                                   // 19  // 866\n      typeof console.log !== 'undefined') {                                                               // 20  // 867\n    if (arguments.length == 0) { // IE Companion breaks otherwise                                         // 21  // 868\n      // IE10 PP4 requires at least one argument                                                          // 22  // 869\n      console.log('');                                                                                    // 23  // 870\n    } else {                                                                                              // 24  // 871\n      // IE doesn't have console.log.apply, it's not a real Object.                                       // 25  // 872\n      // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9                  // 26  // 873\n      // http://patik.com/blog/complete-cross-browser-console-log/                                        // 27  // 874\n      if (typeof console.log.apply === \"function\") {                                                      // 28  // 875\n        // Most browsers                                                                                  // 29  // 876\n                                                                                                          // 30  // 877\n        // Chrome and Safari only hyperlink URLs to source files in first argument of                     // 31  // 878\n        // console.log, so try to call it with one argument if possible.                                  // 32  // 879\n        // Approach taken here: If all arguments are strings, join them on space.                         // 33  // 880\n        // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991                            // 34  // 881\n        var allArgumentsOfTypeString = true;                                                              // 35  // 882\n        for (var i = 0; i < arguments.length; i++)                                                        // 36  // 883\n          if (typeof arguments[i] !== \"string\")                                                           // 37  // 884\n            allArgumentsOfTypeString = false;                                                             // 38  // 885\n                                                                                                          // 39  // 886\n        if (allArgumentsOfTypeString)                                                                     // 40  // 887\n          console.log.apply(console, [Array.prototype.join.call(arguments, \" \")]);                        // 41  // 888\n        else                                                                                              // 42  // 889\n          console.log.apply(console, arguments);                                                          // 43  // 890\n                                                                                                          // 44  // 891\n      } else if (typeof Function.prototype.bind === \"function\") {                                         // 45  // 892\n        // IE9                                                                                            // 46  // 893\n        var log = Function.prototype.bind.call(console.log, console);                                     // 47  // 894\n        log.apply(console, arguments);                                                                    // 48  // 895\n      } else {                                                                                            // 49  // 896\n        // IE8                                                                                            // 50  // 897\n        Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));        // 51  // 898\n      }                                                                                                   // 52  // 899\n    }                                                                                                     // 53  // 900\n  }                                                                                                       // 54  // 901\n};                                                                                                        // 55  // 902\n                                                                                                          // 56  // 903\n// Suppress the next 'count' Meteor._debug messsages. Use this to                                         // 57  // 904\n// stop tests from spamming the console.                                                                  // 58  // 905\n//                                                                                                        // 59  // 906\nMeteor._suppress_log = function (count) {                                                                 // 60  // 907\n  suppress += count;                                                                                      // 61  // 908\n};                                                                                                        // 62  // 909\n                                                                                                          // 63  // 910\nMeteor._supressed_log_expected = function () {                                                            // 64  // 911\n  return suppress !== 0;                                                                                  // 65  // 912\n};                                                                                                        // 66  // 913\n                                                                                                          // 67  // 914\n                                                                                                          // 68  // 915\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 916\n                                                                                                                 // 917\n}).call(this);                                                                                                   // 918\n                                                                                                                 // 919\n                                                                                                                 // 920\n                                                                                                                 // 921\n                                                                                                                 // 922\n                                                                                                                 // 923\n                                                                                                                 // 924\n(function(){                                                                                                     // 925\n                                                                                                                 // 926\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 927\n//                                                                                                        //     // 928\n// packages/meteor/string_utils.js                                                                        //     // 929\n//                                                                                                        //     // 930\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 931\n                                                                                                          //     // 932\n// Like Perl's quotemeta: quotes all regexp metacharacters.                                               // 1   // 933\n// Code taken from                                                                                        // 2   // 934\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions                      // 3   // 935\nMeteor._escapeRegExp = function (string) {                                                                // 4   // 936\n    return String(string).replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");                                         // 5   // 937\n};                                                                                                        // 6   // 938\n                                                                                                          // 7   // 939\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 940\n                                                                                                                 // 941\n}).call(this);                                                                                                   // 942\n                                                                                                                 // 943\n                                                                                                                 // 944\n                                                                                                                 // 945\n                                                                                                                 // 946\n                                                                                                                 // 947\n                                                                                                                 // 948\n(function(){                                                                                                     // 949\n                                                                                                                 // 950\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 951\n//                                                                                                        //     // 952\n// packages/meteor/dynamics_browser.js                                                                    //     // 953\n//                                                                                                        //     // 954\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 955\n                                                                                                          //     // 956\n// Simple implementation of dynamic scoping, for use in browsers                                          // 1   // 957\n                                                                                                          // 2   // 958\nvar nextSlot = 0;                                                                                         // 3   // 959\nvar currentValues = [];                                                                                   // 4   // 960\n                                                                                                          // 5   // 961\nMeteor.EnvironmentVariable = function () {                                                                // 6   // 962\n  this.slot = nextSlot++;                                                                                 // 7   // 963\n};                                                                                                        // 8   // 964\n                                                                                                          // 9   // 965\n_.extend(Meteor.EnvironmentVariable.prototype, {                                                          // 10  // 966\n  get: function () {                                                                                      // 11  // 967\n    return currentValues[this.slot];                                                                      // 12  // 968\n  },                                                                                                      // 13  // 969\n                                                                                                          // 14  // 970\n  getOrNullIfOutsideFiber: function () {                                                                  // 15  // 971\n    return this.get();                                                                                    // 16  // 972\n  },                                                                                                      // 17  // 973\n                                                                                                          // 18  // 974\n  withValue: function (value, func) {                                                                     // 19  // 975\n    var saved = currentValues[this.slot];                                                                 // 20  // 976\n    try {                                                                                                 // 21  // 977\n      currentValues[this.slot] = value;                                                                   // 22  // 978\n      var ret = func();                                                                                   // 23  // 979\n    } finally {                                                                                           // 24  // 980\n      currentValues[this.slot] = saved;                                                                   // 25  // 981\n    }                                                                                                     // 26  // 982\n    return ret;                                                                                           // 27  // 983\n  }                                                                                                       // 28  // 984\n});                                                                                                       // 29  // 985\n                                                                                                          // 30  // 986\nMeteor.bindEnvironment = function (func, onException, _this) {                                            // 31  // 987\n  // needed in order to be able to create closures inside func and                                        // 32  // 988\n  // have the closed variables not change back to their original                                          // 33  // 989\n  // values                                                                                               // 34  // 990\n  var boundValues = _.clone(currentValues);                                                               // 35  // 991\n                                                                                                          // 36  // 992\n  if (!onException || typeof(onException) === 'string') {                                                 // 37  // 993\n    var description = onException || \"callback of async function\";                                        // 38  // 994\n    onException = function (error) {                                                                      // 39  // 995\n      Meteor._debug(                                                                                      // 40  // 996\n        \"Exception in \" + description + \":\",                                                              // 41  // 997\n        error && error.stack || error                                                                     // 42  // 998\n      );                                                                                                  // 43  // 999\n    };                                                                                                    // 44  // 1000\n  }                                                                                                       // 45  // 1001\n                                                                                                          // 46  // 1002\n  return function (/* arguments */) {                                                                     // 47  // 1003\n    var savedValues = currentValues;                                                                      // 48  // 1004\n    try {                                                                                                 // 49  // 1005\n      currentValues = boundValues;                                                                        // 50  // 1006\n      var ret = func.apply(_this, _.toArray(arguments));                                                  // 51  // 1007\n    } catch (e) {                                                                                         // 52  // 1008\n      // note: callback-hook currently relies on the fact that if onException                             // 53  // 1009\n      // throws in the browser, the wrapped call throws.                                                  // 54  // 1010\n      onException(e);                                                                                     // 55  // 1011\n    } finally {                                                                                           // 56  // 1012\n      currentValues = savedValues;                                                                        // 57  // 1013\n    }                                                                                                     // 58  // 1014\n    return ret;                                                                                           // 59  // 1015\n  };                                                                                                      // 60  // 1016\n};                                                                                                        // 61  // 1017\n                                                                                                          // 62  // 1018\nMeteor._nodeCodeMustBeInFiber = function () {                                                             // 63  // 1019\n  // no-op on browser                                                                                     // 64  // 1020\n};                                                                                                        // 65  // 1021\n                                                                                                          // 66  // 1022\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1023\n                                                                                                                 // 1024\n}).call(this);                                                                                                   // 1025\n                                                                                                                 // 1026\n                                                                                                                 // 1027\n                                                                                                                 // 1028\n                                                                                                                 // 1029\n                                                                                                                 // 1030\n                                                                                                                 // 1031\n(function(){                                                                                                     // 1032\n                                                                                                                 // 1033\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1034\n//                                                                                                        //     // 1035\n// packages/meteor/url_common.js                                                                          //     // 1036\n//                                                                                                        //     // 1037\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1038\n                                                                                                          //     // 1039\n/**                                                                                                       // 1   // 1040\n * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed with `meteor deploy`, but must be provided when using `meteor build`.\n * @locus Anywhere                                                                                        // 3   // 1042\n * @param {String} [path] A path to append to the root URL. Do not include a leading \"`/`\".               // 4   // 1043\n * @param {Object} [options]                                                                              // 5   // 1044\n * @param {Boolean} options.secure Create an HTTPS URL.                                                   // 6   // 1045\n * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.\n * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: \"`http://foo.example.com`\"\n */                                                                                                       // 9   // 1048\nMeteor.absoluteUrl = function (path, options) {                                                           // 10  // 1049\n  // path is optional                                                                                     // 11  // 1050\n  if (!options && typeof path === 'object') {                                                             // 12  // 1051\n    options = path;                                                                                       // 13  // 1052\n    path = undefined;                                                                                     // 14  // 1053\n  }                                                                                                       // 15  // 1054\n  // merge options with defaults                                                                          // 16  // 1055\n  options = _.extend({}, Meteor.absoluteUrl.defaultOptions, options || {});                               // 17  // 1056\n                                                                                                          // 18  // 1057\n  var url = options.rootUrl;                                                                              // 19  // 1058\n  if (!url)                                                                                               // 20  // 1059\n    throw new Error(\"Must pass options.rootUrl or set ROOT_URL in the server environment\");               // 21  // 1060\n                                                                                                          // 22  // 1061\n  if (!/^http[s]?:\\/\\//i.test(url)) // url starts with 'http://' or 'https://'                            // 23  // 1062\n    url = 'http://' + url; // we will later fix to https if options.secure is set                         // 24  // 1063\n                                                                                                          // 25  // 1064\n  if (!/\\/$/.test(url)) // url ends with '/'                                                              // 26  // 1065\n    url += '/';                                                                                           // 27  // 1066\n                                                                                                          // 28  // 1067\n  if (path)                                                                                               // 29  // 1068\n    url += path;                                                                                          // 30  // 1069\n                                                                                                          // 31  // 1070\n  // turn http to https if secure option is set, and we're not talking                                    // 32  // 1071\n  // to localhost.                                                                                        // 33  // 1072\n  if (options.secure &&                                                                                   // 34  // 1073\n      /^http:/.test(url) && // url starts with 'http:'                                                    // 35  // 1074\n      !/http:\\/\\/localhost[:\\/]/.test(url) && // doesn't match localhost                                  // 36  // 1075\n      !/http:\\/\\/127\\.0\\.0\\.1[:\\/]/.test(url)) // or 127.0.0.1                                            // 37  // 1076\n    url = url.replace(/^http:/, 'https:');                                                                // 38  // 1077\n                                                                                                          // 39  // 1078\n  if (options.replaceLocalhost)                                                                           // 40  // 1079\n    url = url.replace(/^http:\\/\\/localhost([:\\/].*)/, 'http://127.0.0.1$1');                              // 41  // 1080\n                                                                                                          // 42  // 1081\n  return url;                                                                                             // 43  // 1082\n};                                                                                                        // 44  // 1083\n                                                                                                          // 45  // 1084\n// allow later packages to override default options                                                       // 46  // 1085\nMeteor.absoluteUrl.defaultOptions = { };                                                                  // 47  // 1086\nif (typeof __meteor_runtime_config__ === \"object\" &&                                                      // 48  // 1087\n    __meteor_runtime_config__.ROOT_URL)                                                                   // 49  // 1088\n  Meteor.absoluteUrl.defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;                         // 50  // 1089\n                                                                                                          // 51  // 1090\n                                                                                                          // 52  // 1091\nMeteor._relativeToSiteRootUrl = function (link) {                                                         // 53  // 1092\n  if (typeof __meteor_runtime_config__ === \"object\" &&                                                    // 54  // 1093\n      link.substr(0, 1) === \"/\")                                                                          // 55  // 1094\n    link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\") + link;                                 // 56  // 1095\n  return link;                                                                                            // 57  // 1096\n};                                                                                                        // 58  // 1097\n                                                                                                          // 59  // 1098\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1099\n                                                                                                                 // 1100\n}).call(this);                                                                                                   // 1101\n                                                                                                                 // 1102\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.meteor = {\n  Meteor: Meteor\n};\n\n})();\n","servePath":"/packages/meteor.js","sourceMap":{"version":3,"sources":["/packages/meteor/packages/meteor.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wH","file":"/packages/meteor.js","sourcesContent":["(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/client_environment.js                                                                  //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n/**                                                                                                       // 1\n * @summary The Meteor namespace                                                                          // 2\n * @namespace Meteor                                                                                      // 3\n */                                                                                                       // 4\nMeteor = {                                                                                                // 5\n                                                                                                          // 6\n  /**                                                                                                     // 7\n   * @summary Boolean variable.  True if running in client environment.                                   // 8\n   * @locus Anywhere                                                                                      // 9\n   * @static                                                                                              // 10\n   * @type {Boolean}                                                                                      // 11\n   */                                                                                                     // 12\n  isClient: true,                                                                                         // 13\n                                                                                                          // 14\n  /**                                                                                                     // 15\n   * @summary Boolean variable.  True if running in server environment.                                   // 16\n   * @locus Anywhere                                                                                      // 17\n   * @static                                                                                              // 18\n   * @type {Boolean}                                                                                      // 19\n   */                                                                                                     // 20\n  isServer: false,                                                                                        // 21\n  isCordova: false                                                                                        // 22\n};                                                                                                        // 23\n                                                                                                          // 24\nif (typeof __meteor_runtime_config__ === 'object' &&                                                      // 25\n    __meteor_runtime_config__.PUBLIC_SETTINGS) {                                                          // 26\n  /**                                                                                                     // 27\n   * @summary `Meteor.settings` contains deployment-specific configuration options. You can initialize settings by passing the `--settings` option (which takes the name of a file containing JSON data) to `meteor run` or `meteor deploy`. When running your server directly (e.g. from a bundle), you instead specify settings by putting the JSON directly into the `METEOR_SETTINGS` environment variable. If the settings object contains a key named `public`, then `Meteor.settings.public` will be available on the client as well as the server.  All other properties of `Meteor.settings` are only defined on the server.  You can rely on `Meteor.settings` and `Meteor.settings.public` being defined objects (not undefined) on both client and server even if there are no settings specified.  Changes to `Meteor.settings.public` at runtime will be picked up by new client connections.\n   * @locus Anywhere                                                                                      // 29\n   * @type {Object}                                                                                       // 30\n   */                                                                                                     // 31\n  Meteor.settings = { 'public': __meteor_runtime_config__.PUBLIC_SETTINGS };                              // 32\n}                                                                                                         // 33\n                                                                                                          // 34\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/cordova_environment.js                                                                 //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n/**                                                                                                       // 1\n * @summary Boolean variable.  True if running in a Cordova mobile environment.                           // 2\n * @type {Boolean}                                                                                        // 3\n * @static                                                                                                // 4\n * @locus Anywhere                                                                                        // 5\n */                                                                                                       // 6\nMeteor.isCordova = true;                                                                                  // 7\n                                                                                                          // 8\n                                                                                                          // 9\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/helpers.js                                                                             //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nif (Meteor.isServer)                                                                                      // 1\n  var Future = Npm.require('fibers/future');                                                              // 2\n                                                                                                          // 3\nif (typeof __meteor_runtime_config__ === 'object' &&                                                      // 4\n    __meteor_runtime_config__.meteorRelease) {                                                            // 5\n  /**                                                                                                     // 6\n   * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `\"1.2.3\"`). It is `undefined` if the project was built using a git checkout of Meteor.\n   * @locus Anywhere                                                                                      // 8\n   * @type {String}                                                                                       // 9\n   */                                                                                                     // 10\n  Meteor.release = __meteor_runtime_config__.meteorRelease;                                               // 11\n}                                                                                                         // 12\n                                                                                                          // 13\n// XXX find a better home for these? Ideally they would be _.get,                                         // 14\n// _.ensure, _.delete..                                                                                   // 15\n                                                                                                          // 16\n_.extend(Meteor, {                                                                                        // 17\n  // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or                                       // 18\n  // a[b][c] doesn't exist.                                                                               // 19\n  //                                                                                                      // 20\n  _get: function (obj /*, arguments */) {                                                                 // 21\n    for (var i = 1; i < arguments.length; i++) {                                                          // 22\n      if (!(arguments[i] in obj))                                                                         // 23\n        return undefined;                                                                                 // 24\n      obj = obj[arguments[i]];                                                                            // 25\n    }                                                                                                     // 26\n    return obj;                                                                                           // 27\n  },                                                                                                      // 28\n                                                                                                          // 29\n  // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,                                     // 30\n  // it is created and set to {}. Either way, it is returned.                                             // 31\n  //                                                                                                      // 32\n  _ensure: function (obj /*, arguments */) {                                                              // 33\n    for (var i = 1; i < arguments.length; i++) {                                                          // 34\n      var key = arguments[i];                                                                             // 35\n      if (!(key in obj))                                                                                  // 36\n        obj[key] = {};                                                                                    // 37\n      obj = obj[key];                                                                                     // 38\n    }                                                                                                     // 39\n                                                                                                          // 40\n    return obj;                                                                                           // 41\n  },                                                                                                      // 42\n                                                                                                          // 43\n  // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it                                       // 44\n  // isn't empty, then a[b] unless it isn't empty.                                                        // 45\n  //                                                                                                      // 46\n  _delete: function (obj /*, arguments */) {                                                              // 47\n    var stack = [obj];                                                                                    // 48\n    var leaf = true;                                                                                      // 49\n    for (var i = 1; i < arguments.length - 1; i++) {                                                      // 50\n      var key = arguments[i];                                                                             // 51\n      if (!(key in obj)) {                                                                                // 52\n        leaf = false;                                                                                     // 53\n        break;                                                                                            // 54\n      }                                                                                                   // 55\n      obj = obj[key];                                                                                     // 56\n      if (typeof obj !== \"object\")                                                                        // 57\n        break;                                                                                            // 58\n      stack.push(obj);                                                                                    // 59\n    }                                                                                                     // 60\n                                                                                                          // 61\n    for (var i = stack.length - 1; i >= 0; i--) {                                                         // 62\n      var key = arguments[i+1];                                                                           // 63\n                                                                                                          // 64\n      if (leaf)                                                                                           // 65\n        leaf = false;                                                                                     // 66\n      else                                                                                                // 67\n        for (var other in stack[i][key])                                                                  // 68\n          return; // not empty -- we're done                                                              // 69\n                                                                                                          // 70\n      delete stack[i][key];                                                                               // 71\n    }                                                                                                     // 72\n  },                                                                                                      // 73\n                                                                                                          // 74\n  // wrapAsync can wrap any function that takes some number of arguments that                             // 75\n  // can't be undefined, followed by some optional arguments, where the callback                          // 76\n  // is the last optional argument.                                                                       // 77\n  // e.g. fs.readFile(pathname, [callback]),                                                              // 78\n  // fs.open(pathname, flags, [mode], [callback])                                                         // 79\n  // For maximum effectiveness and least confusion, wrapAsync should be used on                           // 80\n  // functions where the callback is the only argument of type Function.                                  // 81\n                                                                                                          // 82\n  /**                                                                                                     // 83\n   * @memberOf Meteor                                                                                     // 84\n   * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.\n   * @locus Anywhere                                                                                      // 86\n   * @param {Function} func A function that takes a callback as its final parameter                       // 87\n   * @param {Object} [context] Optional `this` object against which the original function will be invoked\n   */                                                                                                     // 89\n  wrapAsync: function (fn, context) {                                                                     // 90\n    return function (/* arguments */) {                                                                   // 91\n      var self = context || this;                                                                         // 92\n      var newArgs = _.toArray(arguments);                                                                 // 93\n      var callback;                                                                                       // 94\n                                                                                                          // 95\n      for (var i = newArgs.length - 1; i >= 0; --i) {                                                     // 96\n        var arg = newArgs[i];                                                                             // 97\n        var type = typeof arg;                                                                            // 98\n        if (type !== \"undefined\") {                                                                       // 99\n          if (type === \"function\") {                                                                      // 100\n            callback = arg;                                                                               // 101\n          }                                                                                               // 102\n          break;                                                                                          // 103\n        }                                                                                                 // 104\n      }                                                                                                   // 105\n                                                                                                          // 106\n      if (! callback) {                                                                                   // 107\n        if (Meteor.isClient) {                                                                            // 108\n          callback = logErr;                                                                              // 109\n        } else {                                                                                          // 110\n          var fut = new Future();                                                                         // 111\n          callback = fut.resolver();                                                                      // 112\n        }                                                                                                 // 113\n        ++i; // Insert the callback just after arg.                                                       // 114\n      }                                                                                                   // 115\n                                                                                                          // 116\n      newArgs[i] = Meteor.bindEnvironment(callback);                                                      // 117\n      var result = fn.apply(self, newArgs);                                                               // 118\n      return fut ? fut.wait() : result;                                                                   // 119\n    };                                                                                                    // 120\n  },                                                                                                      // 121\n                                                                                                          // 122\n  // Sets child's prototype to a new object whose prototype is parent's                                   // 123\n  // prototype. Used as:                                                                                  // 124\n  //   Meteor._inherits(ClassB, ClassA).                                                                  // 125\n  //   _.extend(ClassB.prototype, { ... })                                                                // 126\n  // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.                            // 127\n  _inherits: function (Child, Parent) {                                                                   // 128\n    // copy Parent static properties                                                                      // 129\n    for (var key in Parent) {                                                                             // 130\n      // make sure we only copy hasOwnProperty properties vs. prototype                                   // 131\n      // properties                                                                                       // 132\n      if (_.has(Parent, key))                                                                             // 133\n        Child[key] = Parent[key];                                                                         // 134\n    }                                                                                                     // 135\n                                                                                                          // 136\n    // a middle member of prototype chain: takes the prototype from the Parent                            // 137\n    var Middle = function () {                                                                            // 138\n      this.constructor = Child;                                                                           // 139\n    };                                                                                                    // 140\n    Middle.prototype = Parent.prototype;                                                                  // 141\n    Child.prototype = new Middle();                                                                       // 142\n    Child.__super__ = Parent.prototype;                                                                   // 143\n    return Child;                                                                                         // 144\n  }                                                                                                       // 145\n});                                                                                                       // 146\n                                                                                                          // 147\nvar warnedAboutWrapAsync = false;                                                                         // 148\n                                                                                                          // 149\n/**                                                                                                       // 150\n * @deprecated in 0.9.3                                                                                   // 151\n */                                                                                                       // 152\nMeteor._wrapAsync = function(fn, context) {                                                               // 153\n  if (! warnedAboutWrapAsync) {                                                                           // 154\n    Meteor._debug(\"Meteor._wrapAsync has been renamed to Meteor.wrapAsync\");                              // 155\n    warnedAboutWrapAsync = true;                                                                          // 156\n  }                                                                                                       // 157\n  return Meteor.wrapAsync.apply(Meteor, arguments);                                                       // 158\n};                                                                                                        // 159\n                                                                                                          // 160\nfunction logErr(err) {                                                                                    // 161\n  if (err) {                                                                                              // 162\n    return Meteor._debug(                                                                                 // 163\n      \"Exception in callback of async function\",                                                          // 164\n      err.stack ? err.stack : err                                                                         // 165\n    );                                                                                                    // 166\n  }                                                                                                       // 167\n}                                                                                                         // 168\n                                                                                                          // 169\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/setimmediate.js                                                                        //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n// Chooses one of three setImmediate implementations:                                                     // 1\n//                                                                                                        // 2\n// * Native setImmediate (IE 10, Node 0.9+)                                                               // 3\n//                                                                                                        // 4\n// * postMessage (many browsers)                                                                          // 5\n//                                                                                                        // 6\n// * setTimeout  (fallback)                                                                               // 7\n//                                                                                                        // 8\n// The postMessage implementation is based on                                                             // 9\n// https://github.com/NobleJS/setImmediate/tree/1.0.1                                                     // 10\n//                                                                                                        // 11\n// Don't use `nextTick` for Node since it runs its callbacks before                                       // 12\n// I/O, which is stricter than we're looking for.                                                         // 13\n//                                                                                                        // 14\n// Not installed as a polyfill, as our public API is `Meteor.defer`.                                      // 15\n// Since we're not trying to be a polyfill, we have some                                                  // 16\n// simplifications:                                                                                       // 17\n//                                                                                                        // 18\n// If one invocation of a setImmediate callback pauses itself by a                                        // 19\n// call to alert/prompt/showModelDialog, the NobleJS polyfill                                             // 20\n// implementation ensured that no setImmedate callback would run until                                    // 21\n// the first invocation completed.  While correct per the spec, what it                                   // 22\n// would mean for us in practice is that any reactive updates relying                                     // 23\n// on Meteor.defer would be hung in the main window until the modal                                       // 24\n// dialog was dismissed.  Thus we only ensure that a setImmediate                                         // 25\n// function is called in a later event loop.                                                              // 26\n//                                                                                                        // 27\n// We don't need to support using a string to be eval'ed for the                                          // 28\n// callback, arguments to the function, or clearImmediate.                                                // 29\n                                                                                                          // 30\n\"use strict\";                                                                                             // 31\n                                                                                                          // 32\nvar global = this;                                                                                        // 33\n                                                                                                          // 34\n                                                                                                          // 35\n// IE 10, Node >= 9.1                                                                                     // 36\n                                                                                                          // 37\nfunction useSetImmediate() {                                                                              // 38\n  if (! global.setImmediate)                                                                              // 39\n    return null;                                                                                          // 40\n  else {                                                                                                  // 41\n    var setImmediate = function (fn) {                                                                    // 42\n      global.setImmediate(fn);                                                                            // 43\n    };                                                                                                    // 44\n    setImmediate.implementation = 'setImmediate';                                                         // 45\n    return setImmediate;                                                                                  // 46\n  }                                                                                                       // 47\n}                                                                                                         // 48\n                                                                                                          // 49\n                                                                                                          // 50\n// Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari                                         // 51\n                                                                                                          // 52\nfunction usePostMessage() {                                                                               // 53\n  // The test against `importScripts` prevents this implementation                                        // 54\n  // from being installed inside a web worker, where                                                      // 55\n  // `global.postMessage` means something completely different and                                        // 56\n  // can't be used for this purpose.                                                                      // 57\n                                                                                                          // 58\n  if (!global.postMessage || global.importScripts) {                                                      // 59\n    return null;                                                                                          // 60\n  }                                                                                                       // 61\n                                                                                                          // 62\n  // Avoid synchronous post message implementations.                                                      // 63\n                                                                                                          // 64\n  var postMessageIsAsynchronous = true;                                                                   // 65\n  var oldOnMessage = global.onmessage;                                                                    // 66\n  global.onmessage = function () {                                                                        // 67\n      postMessageIsAsynchronous = false;                                                                  // 68\n  };                                                                                                      // 69\n  global.postMessage(\"\", \"*\");                                                                            // 70\n  global.onmessage = oldOnMessage;                                                                        // 71\n                                                                                                          // 72\n  if (! postMessageIsAsynchronous)                                                                        // 73\n    return null;                                                                                          // 74\n                                                                                                          // 75\n  var funcIndex = 0;                                                                                      // 76\n  var funcs = {};                                                                                         // 77\n                                                                                                          // 78\n  // Installs an event handler on `global` for the `message` event: see                                   // 79\n  // * https://developer.mozilla.org/en/DOM/window.postMessage                                            // 80\n  // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages       // 81\n                                                                                                          // 82\n  // XXX use Random.id() here?                                                                            // 83\n  var MESSAGE_PREFIX = \"Meteor._setImmediate.\" + Math.random() + '.';                                     // 84\n                                                                                                          // 85\n  function isStringAndStartsWith(string, putativeStart) {                                                 // 86\n    return (typeof string === \"string\" &&                                                                 // 87\n            string.substring(0, putativeStart.length) === putativeStart);                                 // 88\n  }                                                                                                       // 89\n                                                                                                          // 90\n  function onGlobalMessage(event) {                                                                       // 91\n    // This will catch all incoming messages (even from other                                             // 92\n    // windows!), so we need to try reasonably hard to avoid letting                                      // 93\n    // anyone else trick us into firing off. We test the origin is                                        // 94\n    // still this window, and that a (randomly generated)                                                 // 95\n    // unpredictable identifying prefix is present.                                                       // 96\n    if (event.source === global &&                                                                        // 97\n        isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {                                              // 98\n      var index = event.data.substring(MESSAGE_PREFIX.length);                                            // 99\n      try {                                                                                               // 100\n        if (funcs[index])                                                                                 // 101\n          funcs[index]();                                                                                 // 102\n      }                                                                                                   // 103\n      finally {                                                                                           // 104\n        delete funcs[index];                                                                              // 105\n      }                                                                                                   // 106\n    }                                                                                                     // 107\n  }                                                                                                       // 108\n                                                                                                          // 109\n  if (global.addEventListener) {                                                                          // 110\n    global.addEventListener(\"message\", onGlobalMessage, false);                                           // 111\n  } else {                                                                                                // 112\n    global.attachEvent(\"onmessage\", onGlobalMessage);                                                     // 113\n  }                                                                                                       // 114\n                                                                                                          // 115\n  var setImmediate = function (fn) {                                                                      // 116\n    // Make `global` post a message to itself with the handle and                                         // 117\n    // identifying prefix, thus asynchronously invoking our                                               // 118\n    // onGlobalMessage listener above.                                                                    // 119\n    ++funcIndex;                                                                                          // 120\n    funcs[funcIndex] = fn;                                                                                // 121\n    global.postMessage(MESSAGE_PREFIX + funcIndex, \"*\");                                                  // 122\n  };                                                                                                      // 123\n  setImmediate.implementation = 'postMessage';                                                            // 124\n  return setImmediate;                                                                                    // 125\n}                                                                                                         // 126\n                                                                                                          // 127\n                                                                                                          // 128\nfunction useTimeout() {                                                                                   // 129\n  var setImmediate = function (fn) {                                                                      // 130\n    global.setTimeout(fn, 0);                                                                             // 131\n  };                                                                                                      // 132\n  setImmediate.implementation = 'setTimeout';                                                             // 133\n  return setImmediate;                                                                                    // 134\n}                                                                                                         // 135\n                                                                                                          // 136\n                                                                                                          // 137\nMeteor._setImmediate =                                                                                    // 138\n  useSetImmediate() ||                                                                                    // 139\n  usePostMessage() ||                                                                                     // 140\n  useTimeout();                                                                                           // 141\n                                                                                                          // 142\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/timers.js                                                                              //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nvar withoutInvocation = function (f) {                                                                    // 1\n  if (Package.ddp) {                                                                                      // 2\n    var _CurrentInvocation = Package.ddp.DDP._CurrentInvocation;                                          // 3\n    if (_CurrentInvocation.get() && _CurrentInvocation.get().isSimulation)                                // 4\n      throw new Error(\"Can't set timers inside simulations\");                                             // 5\n    return function () { _CurrentInvocation.withValue(null, f); };                                        // 6\n  }                                                                                                       // 7\n  else                                                                                                    // 8\n    return f;                                                                                             // 9\n};                                                                                                        // 10\n                                                                                                          // 11\nvar bindAndCatch = function (context, f) {                                                                // 12\n  return Meteor.bindEnvironment(withoutInvocation(f), context);                                           // 13\n};                                                                                                        // 14\n                                                                                                          // 15\n_.extend(Meteor, {                                                                                        // 16\n  // Meteor.setTimeout and Meteor.setInterval callbacks scheduled                                         // 17\n  // inside a server method are not part of the method invocation and                                     // 18\n  // should clear out the CurrentInvocation environment variable.                                         // 19\n                                                                                                          // 20\n  /**                                                                                                     // 21\n   * @memberOf Meteor                                                                                     // 22\n   * @summary Call a function in the future after waiting for a specified delay.                          // 23\n   * @locus Anywhere                                                                                      // 24\n   * @param {Function} func The function to run                                                           // 25\n   * @param {Number} delay Number of milliseconds to wait before calling function                         // 26\n   */                                                                                                     // 27\n  setTimeout: function (f, duration) {                                                                    // 28\n    return setTimeout(bindAndCatch(\"setTimeout callback\", f), duration);                                  // 29\n  },                                                                                                      // 30\n                                                                                                          // 31\n  /**                                                                                                     // 32\n   * @memberOf Meteor                                                                                     // 33\n   * @summary Call a function repeatedly, with a time delay between calls.                                // 34\n   * @locus Anywhere                                                                                      // 35\n   * @param {Function} func The function to run                                                           // 36\n   * @param {Number} delay Number of milliseconds to wait between each function call.                     // 37\n   */                                                                                                     // 38\n  setInterval: function (f, duration) {                                                                   // 39\n    return setInterval(bindAndCatch(\"setInterval callback\", f), duration);                                // 40\n  },                                                                                                      // 41\n                                                                                                          // 42\n  /**                                                                                                     // 43\n   * @memberOf Meteor                                                                                     // 44\n   * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.                         // 45\n   * @locus Anywhere                                                                                      // 46\n   * @param {Number} id The handle returned by `Meteor.setInterval`                                       // 47\n   */                                                                                                     // 48\n  clearInterval: function(x) {                                                                            // 49\n    return clearInterval(x);                                                                              // 50\n  },                                                                                                      // 51\n                                                                                                          // 52\n  /**                                                                                                     // 53\n   * @memberOf Meteor                                                                                     // 54\n   * @summary Cancel a function call scheduled by `Meteor.setTimeout`.                                    // 55\n   * @locus Anywhere                                                                                      // 56\n   * @param {Number} id The handle returned by `Meteor.setTimeout`                                        // 57\n   */                                                                                                     // 58\n  clearTimeout: function(x) {                                                                             // 59\n    return clearTimeout(x);                                                                               // 60\n  },                                                                                                      // 61\n                                                                                                          // 62\n  // XXX consider making this guarantee ordering of defer'd callbacks, like                               // 63\n  // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:                              // 64\n  //    callSomethingThatDefersSomeWork();                                                                // 65\n  //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));                                  // 66\n  defer: function (f) {                                                                                   // 67\n    Meteor._setImmediate(bindAndCatch(\"defer callback\", f));                                              // 68\n  }                                                                                                       // 69\n});                                                                                                       // 70\n                                                                                                          // 71\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/errors.js                                                                              //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n// Makes an error subclass which properly contains a stack trace in most                                  // 1\n// environments. constructor can set fields on `this` (and should probably set                            // 2\n// `message`, which is what gets displayed at the top of a stack trace).                                  // 3\n//                                                                                                        // 4\nMeteor.makeErrorType = function (name, constructor) {                                                     // 5\n  var errorClass = function (/*arguments*/) {                                                             // 6\n    var self = this;                                                                                      // 7\n                                                                                                          // 8\n    // Ensure we get a proper stack trace in most Javascript environments                                 // 9\n    if (Error.captureStackTrace) {                                                                        // 10\n      // V8 environments (Chrome and Node.js)                                                             // 11\n      Error.captureStackTrace(self, errorClass);                                                          // 12\n    } else {                                                                                              // 13\n      // Firefox                                                                                          // 14\n      var e = new Error;                                                                                  // 15\n      e.__proto__ = errorClass.prototype;                                                                 // 16\n      if (e instanceof errorClass)                                                                        // 17\n        self = e;                                                                                         // 18\n    }                                                                                                     // 19\n    // Safari magically works.                                                                            // 20\n                                                                                                          // 21\n    constructor.apply(self, arguments);                                                                   // 22\n                                                                                                          // 23\n    self.errorType = name;                                                                                // 24\n                                                                                                          // 25\n    return self;                                                                                          // 26\n  };                                                                                                      // 27\n                                                                                                          // 28\n  Meteor._inherits(errorClass, Error);                                                                    // 29\n                                                                                                          // 30\n  return errorClass;                                                                                      // 31\n};                                                                                                        // 32\n                                                                                                          // 33\n// This should probably be in the livedata package, but we don't want                                     // 34\n// to require you to use the livedata package to get it. Eventually we                                    // 35\n// should probably rename it to DDP.Error and put it back in the                                          // 36\n// 'livedata' package (which we should rename to 'ddp' also.)                                             // 37\n//                                                                                                        // 38\n// Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object                           // 39\n// containing 'error' and optionally 'reason' and 'details'.                                              // 40\n// The DDP client manually puts these into Meteor.Error objects. (We don't use                            // 41\n// EJSON.addType here because the type is determined by location in the                                   // 42\n// protocol, not text on the wire.)                                                                       // 43\n                                                                                                          // 44\n/**                                                                                                       // 45\n * @summary This class represents a symbolic error thrown by a method.                                    // 46\n * @locus Anywhere                                                                                        // 47\n * @class                                                                                                 // 48\n * @param {String} error A string code uniquely identifying this kind of error.                           // 49\n * This string should be used by callers of the method to determine the                                   // 50\n * appropriate action to take, instead of attempting to parse the reason                                  // 51\n * or details fields. For example:                                                                        // 52\n *                                                                                                        // 53\n * ```                                                                                                    // 54\n * // on the server, pick a code unique to this error                                                     // 55\n * // the reason field should be a useful debug message                                                   // 56\n * throw new Meteor.Error(\"logged-out\",                                                                   // 57\n *   \"The user must be logged in to post a comment.\");                                                    // 58\n *                                                                                                        // 59\n * // on the client                                                                                       // 60\n * Meteor.call(\"methodName\", function (error) {                                                           // 61\n *   // identify the error                                                                                // 62\n *   if (error && error.error === \"logged-out\") {                                                         // 63\n *     // show a nice error message                                                                       // 64\n *     Session.set(\"errorMessage\", \"Please log in to post a comment.\");                                   // 65\n *   }                                                                                                    // 66\n * });                                                                                                    // 67\n * ```                                                                                                    // 68\n *                                                                                                        // 69\n * For legacy reasons, some built-in Meteor functions such as `check` throw                               // 70\n * errors with a number in this field.                                                                    // 71\n *                                                                                                        // 72\n * @param {String} [reason] Optional.  A short human-readable summary of the                              // 73\n * error, like 'Not Found'.                                                                               // 74\n * @param {String} [details] Optional.  Additional information about the error,                           // 75\n * like a textual stack trace.                                                                            // 76\n */                                                                                                       // 77\nMeteor.Error = Meteor.makeErrorType(                                                                      // 78\n  \"Meteor.Error\",                                                                                         // 79\n  function (error, reason, details) {                                                                     // 80\n    var self = this;                                                                                      // 81\n                                                                                                          // 82\n    // String code uniquely identifying this kind of error.                                               // 83\n    self.error = error;                                                                                   // 84\n                                                                                                          // 85\n    // Optional: A short human-readable summary of the error. Not                                         // 86\n    // intended to be shown to end users, just developers. (\"Not Found\",                                  // 87\n    // \"Internal Server Error\")                                                                           // 88\n    self.reason = reason;                                                                                 // 89\n                                                                                                          // 90\n    // Optional: Additional information about the error, say for                                          // 91\n    // debugging. It might be a (textual) stack trace if the server is                                    // 92\n    // willing to provide one. The corresponding thing in HTTP would be                                   // 93\n    // the body of a 404 or 500 response. (The difference is that we                                      // 94\n    // never expect this to be shown to end users, only developers, so                                    // 95\n    // it doesn't need to be pretty.)                                                                     // 96\n    self.details = details;                                                                               // 97\n                                                                                                          // 98\n    // This is what gets displayed at the top of a stack trace. Current                                   // 99\n    // format is \"[404]\" (if no reason is set) or \"File not found [404]\"                                  // 100\n    if (self.reason)                                                                                      // 101\n      self.message = self.reason + ' [' + self.error + ']';                                               // 102\n    else                                                                                                  // 103\n      self.message = '[' + self.error + ']';                                                              // 104\n  });                                                                                                     // 105\n                                                                                                          // 106\n// Meteor.Error is basically data and is sent over DDP, so you should be able to                          // 107\n// properly EJSON-clone it. This is especially important because if a                                     // 108\n// Meteor.Error is thrown through a Future, the error, reason, and details                                // 109\n// properties become non-enumerable so a standard Object clone won't preserve                             // 110\n// them and they will be lost from DDP.                                                                   // 111\nMeteor.Error.prototype.clone = function () {                                                              // 112\n  var self = this;                                                                                        // 113\n  return new Meteor.Error(self.error, self.reason, self.details);                                         // 114\n};                                                                                                        // 115\n                                                                                                          // 116\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/fiber_stubs_client.js                                                                  //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n// This file is a partial analogue to fiber_helpers.js, which allows the client                           // 1\n// to use a queue too, and also to call noYieldsAllowed.                                                  // 2\n                                                                                                          // 3\n// The client has no ability to yield, so noYieldsAllowed is a noop.                                      // 4\n//                                                                                                        // 5\nMeteor._noYieldsAllowed = function (f) {                                                                  // 6\n  return f();                                                                                             // 7\n};                                                                                                        // 8\n                                                                                                          // 9\n// An even simpler queue of tasks than the fiber-enabled one.  This one just                              // 10\n// runs all the tasks when you call runTask or flush, synchronously.                                      // 11\n//                                                                                                        // 12\nMeteor._SynchronousQueue = function () {                                                                  // 13\n  var self = this;                                                                                        // 14\n  self._tasks = [];                                                                                       // 15\n  self._running = false;                                                                                  // 16\n  self._runTimeout = null;                                                                                // 17\n};                                                                                                        // 18\n                                                                                                          // 19\n_.extend(Meteor._SynchronousQueue.prototype, {                                                            // 20\n  runTask: function (task) {                                                                              // 21\n    var self = this;                                                                                      // 22\n    if (!self.safeToRunTask())                                                                            // 23\n      throw new Error(\"Could not synchronously run a task from a running task\");                          // 24\n    self._tasks.push(task);                                                                               // 25\n    var tasks = self._tasks;                                                                              // 26\n    self._tasks = [];                                                                                     // 27\n    self._running = true;                                                                                 // 28\n                                                                                                          // 29\n    if (self._runTimeout) {                                                                               // 30\n      // Since we're going to drain the queue, we can forget about the timeout                            // 31\n      // which tries to run it.  (But if one of our tasks queues something else,                          // 32\n      // the timeout will be correctly re-created.)                                                       // 33\n      clearTimeout(self._runTimeout);                                                                     // 34\n      self._runTimeout = null;                                                                            // 35\n    }                                                                                                     // 36\n                                                                                                          // 37\n    try {                                                                                                 // 38\n      while (!_.isEmpty(tasks)) {                                                                         // 39\n        var t = tasks.shift();                                                                            // 40\n        try {                                                                                             // 41\n          t();                                                                                            // 42\n        } catch (e) {                                                                                     // 43\n          if (_.isEmpty(tasks)) {                                                                         // 44\n            // this was the last task, that is, the one we're calling runTask                             // 45\n            // for.                                                                                       // 46\n            throw e;                                                                                      // 47\n          } else {                                                                                        // 48\n            Meteor._debug(\"Exception in queued task: \" + (e.stack || e));                                 // 49\n          }                                                                                               // 50\n        }                                                                                                 // 51\n      }                                                                                                   // 52\n    } finally {                                                                                           // 53\n      self._running = false;                                                                              // 54\n    }                                                                                                     // 55\n  },                                                                                                      // 56\n                                                                                                          // 57\n  queueTask: function (task) {                                                                            // 58\n    var self = this;                                                                                      // 59\n    self._tasks.push(task);                                                                               // 60\n    // Intentionally not using Meteor.setTimeout, because it doesn't like runing                          // 61\n    // in stubs for now.                                                                                  // 62\n    if (!self._runTimeout) {                                                                              // 63\n      self._runTimeout = setTimeout(_.bind(self.flush, self), 0);                                         // 64\n    }                                                                                                     // 65\n  },                                                                                                      // 66\n                                                                                                          // 67\n  flush: function () {                                                                                    // 68\n    var self = this;                                                                                      // 69\n    self.runTask(function () {});                                                                         // 70\n  },                                                                                                      // 71\n                                                                                                          // 72\n  drain: function () {                                                                                    // 73\n    var self = this;                                                                                      // 74\n    if (!self.safeToRunTask())                                                                            // 75\n      return;                                                                                             // 76\n    while (!_.isEmpty(self._tasks)) {                                                                     // 77\n      self.flush();                                                                                       // 78\n    }                                                                                                     // 79\n  },                                                                                                      // 80\n                                                                                                          // 81\n  safeToRunTask: function () {                                                                            // 82\n    var self = this;                                                                                      // 83\n    return !self._running;                                                                                // 84\n  }                                                                                                       // 85\n});                                                                                                       // 86\n                                                                                                          // 87\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/startup_client.js                                                                      //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nvar queue = [];                                                                                           // 1\nvar loaded = !Meteor.isCordova &&                                                                         // 2\n  (document.readyState === \"loaded\" || document.readyState == \"complete\");                                // 3\n                                                                                                          // 4\nvar awaitingEventsCount = 1;                                                                              // 5\nvar ready = function() {                                                                                  // 6\n  awaitingEventsCount--;                                                                                  // 7\n  if (awaitingEventsCount > 0)                                                                            // 8\n    return;                                                                                               // 9\n                                                                                                          // 10\n  loaded = true;                                                                                          // 11\n  var runStartupCallbacks = function () {                                                                 // 12\n    if (Meteor.isCordova) {                                                                               // 13\n      if (! cordova.plugins || ! cordova.plugins.CordovaUpdate) {                                         // 14\n        // XXX This timeout should not be necessary.                                                      // 15\n        // Cordova indicates that all the cordova plugins files have been loaded                          // 16\n        // and plugins are ready to be used when the \"deviceready\" callback                               // 17\n        // fires. Even though we wait for the \"deviceready\" event, plugins                                // 18\n        // have been observed to still not be ready (likely a Cordova bug).                               // 19\n        // We check the availability of the Cordova-Update plugin (the only                               // 20\n        // plugin that we always include for sure) and retry a bit later if it                            // 21\n        // is nowhere to be found. Experiments have found that either all                                 // 22\n        // plugins are attached or none.                                                                  // 23\n        Meteor.setTimeout(runStartupCallbacks, 20);                                                       // 24\n        return;                                                                                           // 25\n      }                                                                                                   // 26\n    }                                                                                                     // 27\n                                                                                                          // 28\n    while (queue.length)                                                                                  // 29\n      (queue.shift())();                                                                                  // 30\n  };                                                                                                      // 31\n  runStartupCallbacks();                                                                                  // 32\n};                                                                                                        // 33\n                                                                                                          // 34\nif (document.addEventListener) {                                                                          // 35\n  document.addEventListener('DOMContentLoaded', ready, false);                                            // 36\n                                                                                                          // 37\n  if (Meteor.isCordova) {                                                                                 // 38\n    awaitingEventsCount++;                                                                                // 39\n    document.addEventListener('deviceready', ready, false);                                               // 40\n  }                                                                                                       // 41\n                                                                                                          // 42\n  window.addEventListener('load', ready, false);                                                          // 43\n} else {                                                                                                  // 44\n  document.attachEvent('onreadystatechange', function () {                                                // 45\n    if (document.readyState === \"complete\")                                                               // 46\n      ready();                                                                                            // 47\n  });                                                                                                     // 48\n  window.attachEvent('load', ready);                                                                      // 49\n}                                                                                                         // 50\n                                                                                                          // 51\n/**                                                                                                       // 52\n * @summary Run code when a client or a server starts.                                                    // 53\n * @locus Anywhere                                                                                        // 54\n * @param {Function} func A function to run on startup.                                                   // 55\n */                                                                                                       // 56\nMeteor.startup = function (cb) {                                                                          // 57\n  var doScroll = !document.addEventListener &&                                                            // 58\n    document.documentElement.doScroll;                                                                    // 59\n                                                                                                          // 60\n  if (!doScroll || window !== top) {                                                                      // 61\n    if (loaded)                                                                                           // 62\n      cb();                                                                                               // 63\n    else                                                                                                  // 64\n      queue.push(cb);                                                                                     // 65\n  } else {                                                                                                // 66\n    try { doScroll('left'); }                                                                             // 67\n    catch (e) {                                                                                           // 68\n      setTimeout(function() { Meteor.startup(cb); }, 50);                                                 // 69\n      return;                                                                                             // 70\n    };                                                                                                    // 71\n    cb();                                                                                                 // 72\n  }                                                                                                       // 73\n};                                                                                                        // 74\n                                                                                                          // 75\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/debug.js                                                                               //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nvar suppress = 0;                                                                                         // 1\n                                                                                                          // 2\n// replacement for console.log. This is a temporary API. We should                                        // 3\n// provide a real logging API soon (possibly just a polyfill for                                          // 4\n// console?)                                                                                              // 5\n//                                                                                                        // 6\n// NOTE: this is used on the server to print the warning about                                            // 7\n// having autopublish enabled when you probably meant to turn it                                          // 8\n// off. it's not really the proper use of something called                                                // 9\n// _debug. the intent is for this message to go to the terminal and                                       // 10\n// be very visible. if you change _debug to go someplace else, etc,                                       // 11\n// please fix the autopublish code to do something reasonable.                                            // 12\n//                                                                                                        // 13\nMeteor._debug = function (/* arguments */) {                                                              // 14\n  if (suppress) {                                                                                         // 15\n    suppress--;                                                                                           // 16\n    return;                                                                                               // 17\n  }                                                                                                       // 18\n  if (typeof console !== 'undefined' &&                                                                   // 19\n      typeof console.log !== 'undefined') {                                                               // 20\n    if (arguments.length == 0) { // IE Companion breaks otherwise                                         // 21\n      // IE10 PP4 requires at least one argument                                                          // 22\n      console.log('');                                                                                    // 23\n    } else {                                                                                              // 24\n      // IE doesn't have console.log.apply, it's not a real Object.                                       // 25\n      // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9                  // 26\n      // http://patik.com/blog/complete-cross-browser-console-log/                                        // 27\n      if (typeof console.log.apply === \"function\") {                                                      // 28\n        // Most browsers                                                                                  // 29\n                                                                                                          // 30\n        // Chrome and Safari only hyperlink URLs to source files in first argument of                     // 31\n        // console.log, so try to call it with one argument if possible.                                  // 32\n        // Approach taken here: If all arguments are strings, join them on space.                         // 33\n        // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991                            // 34\n        var allArgumentsOfTypeString = true;                                                              // 35\n        for (var i = 0; i < arguments.length; i++)                                                        // 36\n          if (typeof arguments[i] !== \"string\")                                                           // 37\n            allArgumentsOfTypeString = false;                                                             // 38\n                                                                                                          // 39\n        if (allArgumentsOfTypeString)                                                                     // 40\n          console.log.apply(console, [Array.prototype.join.call(arguments, \" \")]);                        // 41\n        else                                                                                              // 42\n          console.log.apply(console, arguments);                                                          // 43\n                                                                                                          // 44\n      } else if (typeof Function.prototype.bind === \"function\") {                                         // 45\n        // IE9                                                                                            // 46\n        var log = Function.prototype.bind.call(console.log, console);                                     // 47\n        log.apply(console, arguments);                                                                    // 48\n      } else {                                                                                            // 49\n        // IE8                                                                                            // 50\n        Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));        // 51\n      }                                                                                                   // 52\n    }                                                                                                     // 53\n  }                                                                                                       // 54\n};                                                                                                        // 55\n                                                                                                          // 56\n// Suppress the next 'count' Meteor._debug messsages. Use this to                                         // 57\n// stop tests from spamming the console.                                                                  // 58\n//                                                                                                        // 59\nMeteor._suppress_log = function (count) {                                                                 // 60\n  suppress += count;                                                                                      // 61\n};                                                                                                        // 62\n                                                                                                          // 63\nMeteor._supressed_log_expected = function () {                                                            // 64\n  return suppress !== 0;                                                                                  // 65\n};                                                                                                        // 66\n                                                                                                          // 67\n                                                                                                          // 68\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/string_utils.js                                                                        //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n// Like Perl's quotemeta: quotes all regexp metacharacters.                                               // 1\n// Code taken from                                                                                        // 2\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions                      // 3\nMeteor._escapeRegExp = function (string) {                                                                // 4\n    return String(string).replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");                                         // 5\n};                                                                                                        // 6\n                                                                                                          // 7\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/dynamics_browser.js                                                                    //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n// Simple implementation of dynamic scoping, for use in browsers                                          // 1\n                                                                                                          // 2\nvar nextSlot = 0;                                                                                         // 3\nvar currentValues = [];                                                                                   // 4\n                                                                                                          // 5\nMeteor.EnvironmentVariable = function () {                                                                // 6\n  this.slot = nextSlot++;                                                                                 // 7\n};                                                                                                        // 8\n                                                                                                          // 9\n_.extend(Meteor.EnvironmentVariable.prototype, {                                                          // 10\n  get: function () {                                                                                      // 11\n    return currentValues[this.slot];                                                                      // 12\n  },                                                                                                      // 13\n                                                                                                          // 14\n  getOrNullIfOutsideFiber: function () {                                                                  // 15\n    return this.get();                                                                                    // 16\n  },                                                                                                      // 17\n                                                                                                          // 18\n  withValue: function (value, func) {                                                                     // 19\n    var saved = currentValues[this.slot];                                                                 // 20\n    try {                                                                                                 // 21\n      currentValues[this.slot] = value;                                                                   // 22\n      var ret = func();                                                                                   // 23\n    } finally {                                                                                           // 24\n      currentValues[this.slot] = saved;                                                                   // 25\n    }                                                                                                     // 26\n    return ret;                                                                                           // 27\n  }                                                                                                       // 28\n});                                                                                                       // 29\n                                                                                                          // 30\nMeteor.bindEnvironment = function (func, onException, _this) {                                            // 31\n  // needed in order to be able to create closures inside func and                                        // 32\n  // have the closed variables not change back to their original                                          // 33\n  // values                                                                                               // 34\n  var boundValues = _.clone(currentValues);                                                               // 35\n                                                                                                          // 36\n  if (!onException || typeof(onException) === 'string') {                                                 // 37\n    var description = onException || \"callback of async function\";                                        // 38\n    onException = function (error) {                                                                      // 39\n      Meteor._debug(                                                                                      // 40\n        \"Exception in \" + description + \":\",                                                              // 41\n        error && error.stack || error                                                                     // 42\n      );                                                                                                  // 43\n    };                                                                                                    // 44\n  }                                                                                                       // 45\n                                                                                                          // 46\n  return function (/* arguments */) {                                                                     // 47\n    var savedValues = currentValues;                                                                      // 48\n    try {                                                                                                 // 49\n      currentValues = boundValues;                                                                        // 50\n      var ret = func.apply(_this, _.toArray(arguments));                                                  // 51\n    } catch (e) {                                                                                         // 52\n      // note: callback-hook currently relies on the fact that if onException                             // 53\n      // throws in the browser, the wrapped call throws.                                                  // 54\n      onException(e);                                                                                     // 55\n    } finally {                                                                                           // 56\n      currentValues = savedValues;                                                                        // 57\n    }                                                                                                     // 58\n    return ret;                                                                                           // 59\n  };                                                                                                      // 60\n};                                                                                                        // 61\n                                                                                                          // 62\nMeteor._nodeCodeMustBeInFiber = function () {                                                             // 63\n  // no-op on browser                                                                                     // 64\n};                                                                                                        // 65\n                                                                                                          // 66\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/url_common.js                                                                          //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n/**                                                                                                       // 1\n * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed with `meteor deploy`, but must be provided when using `meteor build`.\n * @locus Anywhere                                                                                        // 3\n * @param {String} [path] A path to append to the root URL. Do not include a leading \"`/`\".               // 4\n * @param {Object} [options]                                                                              // 5\n * @param {Boolean} options.secure Create an HTTPS URL.                                                   // 6\n * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.\n * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: \"`http://foo.example.com`\"\n */                                                                                                       // 9\nMeteor.absoluteUrl = function (path, options) {                                                           // 10\n  // path is optional                                                                                     // 11\n  if (!options && typeof path === 'object') {                                                             // 12\n    options = path;                                                                                       // 13\n    path = undefined;                                                                                     // 14\n  }                                                                                                       // 15\n  // merge options with defaults                                                                          // 16\n  options = _.extend({}, Meteor.absoluteUrl.defaultOptions, options || {});                               // 17\n                                                                                                          // 18\n  var url = options.rootUrl;                                                                              // 19\n  if (!url)                                                                                               // 20\n    throw new Error(\"Must pass options.rootUrl or set ROOT_URL in the server environment\");               // 21\n                                                                                                          // 22\n  if (!/^http[s]?:\\/\\//i.test(url)) // url starts with 'http://' or 'https://'                            // 23\n    url = 'http://' + url; // we will later fix to https if options.secure is set                         // 24\n                                                                                                          // 25\n  if (!/\\/$/.test(url)) // url ends with '/'                                                              // 26\n    url += '/';                                                                                           // 27\n                                                                                                          // 28\n  if (path)                                                                                               // 29\n    url += path;                                                                                          // 30\n                                                                                                          // 31\n  // turn http to https if secure option is set, and we're not talking                                    // 32\n  // to localhost.                                                                                        // 33\n  if (options.secure &&                                                                                   // 34\n      /^http:/.test(url) && // url starts with 'http:'                                                    // 35\n      !/http:\\/\\/localhost[:\\/]/.test(url) && // doesn't match localhost                                  // 36\n      !/http:\\/\\/127\\.0\\.0\\.1[:\\/]/.test(url)) // or 127.0.0.1                                            // 37\n    url = url.replace(/^http:/, 'https:');                                                                // 38\n                                                                                                          // 39\n  if (options.replaceLocalhost)                                                                           // 40\n    url = url.replace(/^http:\\/\\/localhost([:\\/].*)/, 'http://127.0.0.1$1');                              // 41\n                                                                                                          // 42\n  return url;                                                                                             // 43\n};                                                                                                        // 44\n                                                                                                          // 45\n// allow later packages to override default options                                                       // 46\nMeteor.absoluteUrl.defaultOptions = { };                                                                  // 47\nif (typeof __meteor_runtime_config__ === \"object\" &&                                                      // 48\n    __meteor_runtime_config__.ROOT_URL)                                                                   // 49\n  Meteor.absoluteUrl.defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;                         // 50\n                                                                                                          // 51\n                                                                                                          // 52\nMeteor._relativeToSiteRootUrl = function (link) {                                                         // 53\n  if (typeof __meteor_runtime_config__ === \"object\" &&                                                    // 54\n      link.substr(0, 1) === \"/\")                                                                          // 55\n    link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\") + link;                                 // 56\n  return link;                                                                                            // 57\n};                                                                                                        // 58\n                                                                                                          // 59\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]