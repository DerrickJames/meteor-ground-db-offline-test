[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar EJSON = Package.ejson.EJSON;\n\n/* Package-scope variables */\nvar ReactiveDict;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                             //\n// packages/reactive-dict/packages/reactive-dict.js                                            //\n//                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                               //\n(function(){                                                                                   // 1\n                                                                                               // 2\n//////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                      //     // 4\n// packages/reactive-dict/reactive-dict.js                                              //     // 5\n//                                                                                      //     // 6\n//////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                        //     // 8\n// XXX come up with a serialization method which canonicalizes object key               // 1   // 9\n// order, which would allow us to use objects as values for equals.                     // 2   // 10\nvar stringify = function (value) {                                                      // 3   // 11\n  if (value === undefined)                                                              // 4   // 12\n    return 'undefined';                                                                 // 5   // 13\n  return EJSON.stringify(value);                                                        // 6   // 14\n};                                                                                      // 7   // 15\nvar parse = function (serialized) {                                                     // 8   // 16\n  if (serialized === undefined || serialized === 'undefined')                           // 9   // 17\n    return undefined;                                                                   // 10  // 18\n  return EJSON.parse(serialized);                                                       // 11  // 19\n};                                                                                      // 12  // 20\n                                                                                        // 13  // 21\nvar changed = function (v) {                                                            // 14  // 22\n  v && v.changed();                                                                     // 15  // 23\n};                                                                                      // 16  // 24\n                                                                                        // 17  // 25\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName                     // 18  // 26\nReactiveDict = function (dictName) {                                                    // 19  // 27\n  // this.keys: key -> value                                                            // 20  // 28\n  if (dictName) {                                                                       // 21  // 29\n    if (typeof dictName === 'string') {                                                 // 22  // 30\n      // the normal case, argument is a string name.                                    // 23  // 31\n      // _registerDictForMigrate will throw an error on duplicate name.                 // 24  // 32\n      ReactiveDict._registerDictForMigrate(dictName, this);                             // 25  // 33\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};                       // 26  // 34\n      this.name = dictName;                                                             // 27  // 35\n    } else if (typeof dictName === 'object') {                                          // 28  // 36\n      // back-compat case: dictName is actually migrationData                           // 29  // 37\n      this.keys = dictName;                                                             // 30  // 38\n    } else {                                                                            // 31  // 39\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);                    // 32  // 40\n    }                                                                                   // 33  // 41\n  } else {                                                                              // 34  // 42\n    // no name given; no migration will be performed                                    // 35  // 43\n    this.keys = {};                                                                     // 36  // 44\n  }                                                                                     // 37  // 45\n                                                                                        // 38  // 46\n  this.allDeps = new Tracker.Dependency;                                                // 39  // 47\n  this.keyDeps = {}; // key -> Dependency                                               // 40  // 48\n  this.keyValueDeps = {}; // key -> Dependency                                          // 41  // 49\n};                                                                                      // 42  // 50\n                                                                                        // 43  // 51\n_.extend(ReactiveDict.prototype, {                                                      // 44  // 52\n  // set() began as a key/value method, but we are now overloading it                   // 45  // 53\n  // to take an object of key/value pairs, similar to backbone                          // 46  // 54\n  // http://backbonejs.org/#Model-set                                                   // 47  // 55\n                                                                                        // 48  // 56\n  set: function (keyOrObject, value) {                                                  // 49  // 57\n    var self = this;                                                                    // 50  // 58\n                                                                                        // 51  // 59\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {                   // 52  // 60\n      self._setObject(keyOrObject);                                                     // 53  // 61\n      return;                                                                           // 54  // 62\n    }                                                                                   // 55  // 63\n    // the input isn't an object, so it must be a key                                   // 56  // 64\n    // and we resume with the rest of the function                                      // 57  // 65\n    var key = keyOrObject;                                                              // 58  // 66\n                                                                                        // 59  // 67\n    value = stringify(value);                                                           // 60  // 68\n                                                                                        // 61  // 69\n    var oldSerializedValue = 'undefined';                                               // 62  // 70\n    if (_.has(self.keys, key)) oldSerializedValue = self.keys[key];                     // 63  // 71\n    if (value === oldSerializedValue)                                                   // 64  // 72\n      return;                                                                           // 65  // 73\n    self.keys[key] = value;                                                             // 66  // 74\n                                                                                        // 67  // 75\n    self.allDeps.changed();                                                             // 68  // 76\n    changed(self.keyDeps[key]);                                                         // 69  // 77\n    if (self.keyValueDeps[key]) {                                                       // 70  // 78\n      changed(self.keyValueDeps[key][oldSerializedValue]);                              // 71  // 79\n      changed(self.keyValueDeps[key][value]);                                           // 72  // 80\n    }                                                                                   // 73  // 81\n  },                                                                                    // 74  // 82\n                                                                                        // 75  // 83\n  setDefault: function (key, value) {                                                   // 76  // 84\n    var self = this;                                                                    // 77  // 85\n    // for now, explicitly check for undefined, since there is no                       // 78  // 86\n    // ReactiveDict.clear().  Later we might have a ReactiveDict.clear(), in which case        // 87\n    // we should check if it has the key.                                               // 80  // 88\n    if (self.keys[key] === undefined) {                                                 // 81  // 89\n      self.set(key, value);                                                             // 82  // 90\n    }                                                                                   // 83  // 91\n  },                                                                                    // 84  // 92\n                                                                                        // 85  // 93\n  get: function (key) {                                                                 // 86  // 94\n    var self = this;                                                                    // 87  // 95\n    self._ensureKey(key);                                                               // 88  // 96\n    self.keyDeps[key].depend();                                                         // 89  // 97\n    return parse(self.keys[key]);                                                       // 90  // 98\n  },                                                                                    // 91  // 99\n                                                                                        // 92  // 100\n  equals: function (key, value) {                                                       // 93  // 101\n    var self = this;                                                                    // 94  // 102\n                                                                                        // 95  // 103\n    // Mongo.ObjectID is in the 'mongo' package                                         // 96  // 104\n    var ObjectID = null;                                                                // 97  // 105\n    if (Package.mongo) {                                                                // 98  // 106\n      ObjectID = Package.mongo.Mongo.ObjectID;                                          // 99  // 107\n    }                                                                                   // 100\n                                                                                        // 101\n    // We don't allow objects (or arrays that might include objects) for                // 102\n    // .equals, because JSON.stringify doesn't canonicalize object key                  // 103\n    // order. (We can make equals have the right return value by parsing the            // 104\n    // current value and using EJSON.equals, but we won't have a canonical              // 105\n    // element of keyValueDeps[key] to store the dependency.) You can still use         // 106\n    // \"EJSON.equals(reactiveDict.get(key), value)\".                                    // 107\n    //                                                                                  // 108\n    // XXX we could allow arrays as long as we recursively check that there             // 109\n    // are no objects                                                                   // 110\n    if (typeof value !== 'string' &&                                                    // 111\n        typeof value !== 'number' &&                                                    // 112\n        typeof value !== 'boolean' &&                                                   // 113\n        typeof value !== 'undefined' &&                                                 // 114\n        !(value instanceof Date) &&                                                     // 115\n        !(ObjectID && value instanceof ObjectID) &&                                     // 116\n        value !== null) {                                                               // 117\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");                     // 118\n    }                                                                                   // 119\n    var serializedValue = stringify(value);                                             // 120\n                                                                                        // 121\n    if (Tracker.active) {                                                               // 122\n      self._ensureKey(key);                                                             // 123\n                                                                                        // 124\n      if (! _.has(self.keyValueDeps[key], serializedValue))                             // 125\n        self.keyValueDeps[key][serializedValue] = new Tracker.Dependency;               // 126\n                                                                                        // 127\n      var isNew = self.keyValueDeps[key][serializedValue].depend();                     // 128\n      if (isNew) {                                                                      // 129\n        Tracker.onInvalidate(function () {                                              // 130\n          // clean up [key][serializedValue] if it's now empty, so we don't             // 131\n          // use O(n) memory for n = values seen ever                                   // 132\n          if (! self.keyValueDeps[key][serializedValue].hasDependents())                // 133\n            delete self.keyValueDeps[key][serializedValue];                             // 134\n        });                                                                             // 135\n      }                                                                                 // 136\n    }                                                                                   // 137\n                                                                                        // 138\n    var oldValue = undefined;                                                           // 139\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);                        // 140\n    return EJSON.equals(oldValue, value);                                               // 141\n  },                                                                                    // 142\n                                                                                        // 143\n  all: function() {                                                                     // 144\n    this.allDeps.depend();                                                              // 145\n    var ret = {};                                                                       // 146\n    _.each(this.keys, function(value, key) {                                            // 147\n      ret[key] = parse(value);                                                          // 148\n    });                                                                                 // 149\n    return ret;                                                                         // 150\n  },                                                                                    // 151\n                                                                                        // 152\n  clear: function() {                                                                   // 153\n    var self = this;                                                                    // 154\n                                                                                        // 155\n    var oldKeys = self.keys;                                                            // 156\n    self.keys = {};                                                                     // 157\n                                                                                        // 158\n    self.allDeps.changed();                                                             // 159\n                                                                                        // 160\n    _.each(oldKeys, function(value, key) {                                              // 161\n      changed(self.keyDeps[key]);                                                       // 162\n      changed(self.keyValueDeps[key][value]);                                           // 163\n      changed(self.keyValueDeps[key]['undefined']);                                     // 164\n    });                                                                                 // 165\n                                                                                        // 166\n  },                                                                                    // 167\n                                                                                        // 168\n  _setObject: function (object) {                                                       // 169\n    var self = this;                                                                    // 170\n                                                                                        // 171\n    _.each(object, function (value, key){                                               // 172\n      self.set(key, value);                                                             // 173\n    });                                                                                 // 174\n  },                                                                                    // 175\n                                                                                        // 176\n  _ensureKey: function (key) {                                                          // 177\n    var self = this;                                                                    // 178\n    if (!(key in self.keyDeps)) {                                                       // 179\n      self.keyDeps[key] = new Tracker.Dependency;                                       // 180\n      self.keyValueDeps[key] = {};                                                      // 181\n    }                                                                                   // 182\n  },                                                                                    // 183\n                                                                                        // 184\n  // Get a JSON value that can be passed to the constructor to                          // 185\n  // create a new ReactiveDict with the same contents as this one                       // 186\n  _getMigrationData: function () {                                                      // 187\n    // XXX sanitize and make sure it's JSONible?                                        // 188\n    return this.keys;                                                                   // 189\n  }                                                                                     // 190\n});                                                                                     // 191\n                                                                                        // 192\n//////////////////////////////////////////////////////////////////////////////////////////     // 201\n                                                                                               // 202\n}).call(this);                                                                                 // 203\n                                                                                               // 204\n                                                                                               // 205\n                                                                                               // 206\n                                                                                               // 207\n                                                                                               // 208\n                                                                                               // 209\n(function(){                                                                                   // 210\n                                                                                               // 211\n//////////////////////////////////////////////////////////////////////////////////////////     // 212\n//                                                                                      //     // 213\n// packages/reactive-dict/migration.js                                                  //     // 214\n//                                                                                      //     // 215\n//////////////////////////////////////////////////////////////////////////////////////////     // 216\n                                                                                        //     // 217\nReactiveDict._migratedDictData = {}; // name -> data                                    // 1   // 218\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict                              // 2   // 219\n                                                                                        // 3   // 220\nReactiveDict._loadMigratedDict = function (dictName) {                                  // 4   // 221\n  if (_.has(ReactiveDict._migratedDictData, dictName))                                  // 5   // 222\n    return ReactiveDict._migratedDictData[dictName];                                    // 6   // 223\n                                                                                        // 7   // 224\n  return null;                                                                          // 8   // 225\n};                                                                                      // 9   // 226\n                                                                                        // 10  // 227\nReactiveDict._registerDictForMigrate = function (dictName, dict) {                      // 11  // 228\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))                                    // 12  // 229\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);                        // 13  // 230\n                                                                                        // 14  // 231\n  ReactiveDict._dictsToMigrate[dictName] = dict;                                        // 15  // 232\n};                                                                                      // 16  // 233\n                                                                                        // 17  // 234\nif (Meteor.isClient && Package.reload) {                                                // 18  // 235\n  // Put old migrated data into ReactiveDict._migratedDictData,                         // 19  // 236\n  // where it can be accessed by ReactiveDict._loadMigratedDict.                        // 20  // 237\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');            // 21  // 238\n  if (migrationData && migrationData.dicts)                                             // 22  // 239\n    ReactiveDict._migratedDictData = migrationData.dicts;                               // 23  // 240\n                                                                                        // 24  // 241\n  // On migration, assemble the data from all the dicts that have been                  // 25  // 242\n  // registered.                                                                        // 26  // 243\n  Package.reload.Reload._onMigrate('reactive-dict', function () {                       // 27  // 244\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;                                  // 28  // 245\n    var dataToMigrate = {};                                                             // 29  // 246\n                                                                                        // 30  // 247\n    for (var dictName in dictsToMigrate)                                                // 31  // 248\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();           // 32  // 249\n                                                                                        // 33  // 250\n    return [true, {dicts: dataToMigrate}];                                              // 34  // 251\n  });                                                                                   // 35  // 252\n}                                                                                       // 36  // 253\n                                                                                        // 37  // 254\n//////////////////////////////////////////////////////////////////////////////////////////     // 255\n                                                                                               // 256\n}).call(this);                                                                                 // 257\n                                                                                               // 258\n/////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['reactive-dict'] = {\n  ReactiveDict: ReactiveDict\n};\n\n})();\n","servePath":"/packages/reactive-dict.js","sourceMap":{"version":3,"sources":["/packages/reactive-dict/packages/reactive-dict.js"],"names":[],"mappingsqG","file":"/packages/reactive-dict.js","sourcesContent":["(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/reactive-dict/reactive-dict.js                                              //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\n// XXX come up with a serialization method which canonicalizes object key               // 1\n// order, which would allow us to use objects as values for equals.                     // 2\nvar stringify = function (value) {                                                      // 3\n  if (value === undefined)                                                              // 4\n    return 'undefined';                                                                 // 5\n  return EJSON.stringify(value);                                                        // 6\n};                                                                                      // 7\nvar parse = function (serialized) {                                                     // 8\n  if (serialized === undefined || serialized === 'undefined')                           // 9\n    return undefined;                                                                   // 10\n  return EJSON.parse(serialized);                                                       // 11\n};                                                                                      // 12\n                                                                                        // 13\nvar changed = function (v) {                                                            // 14\n  v && v.changed();                                                                     // 15\n};                                                                                      // 16\n                                                                                        // 17\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName                     // 18\nReactiveDict = function (dictName) {                                                    // 19\n  // this.keys: key -> value                                                            // 20\n  if (dictName) {                                                                       // 21\n    if (typeof dictName === 'string') {                                                 // 22\n      // the normal case, argument is a string name.                                    // 23\n      // _registerDictForMigrate will throw an error on duplicate name.                 // 24\n      ReactiveDict._registerDictForMigrate(dictName, this);                             // 25\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};                       // 26\n      this.name = dictName;                                                             // 27\n    } else if (typeof dictName === 'object') {                                          // 28\n      // back-compat case: dictName is actually migrationData                           // 29\n      this.keys = dictName;                                                             // 30\n    } else {                                                                            // 31\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);                    // 32\n    }                                                                                   // 33\n  } else {                                                                              // 34\n    // no name given; no migration will be performed                                    // 35\n    this.keys = {};                                                                     // 36\n  }                                                                                     // 37\n                                                                                        // 38\n  this.allDeps = new Tracker.Dependency;                                                // 39\n  this.keyDeps = {}; // key -> Dependency                                               // 40\n  this.keyValueDeps = {}; // key -> Dependency                                          // 41\n};                                                                                      // 42\n                                                                                        // 43\n_.extend(ReactiveDict.prototype, {                                                      // 44\n  // set() began as a key/value method, but we are now overloading it                   // 45\n  // to take an object of key/value pairs, similar to backbone                          // 46\n  // http://backbonejs.org/#Model-set                                                   // 47\n                                                                                        // 48\n  set: function (keyOrObject, value) {                                                  // 49\n    var self = this;                                                                    // 50\n                                                                                        // 51\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {                   // 52\n      self._setObject(keyOrObject);                                                     // 53\n      return;                                                                           // 54\n    }                                                                                   // 55\n    // the input isn't an object, so it must be a key                                   // 56\n    // and we resume with the rest of the function                                      // 57\n    var key = keyOrObject;                                                              // 58\n                                                                                        // 59\n    value = stringify(value);                                                           // 60\n                                                                                        // 61\n    var oldSerializedValue = 'undefined';                                               // 62\n    if (_.has(self.keys, key)) oldSerializedValue = self.keys[key];                     // 63\n    if (value === oldSerializedValue)                                                   // 64\n      return;                                                                           // 65\n    self.keys[key] = value;                                                             // 66\n                                                                                        // 67\n    self.allDeps.changed();                                                             // 68\n    changed(self.keyDeps[key]);                                                         // 69\n    if (self.keyValueDeps[key]) {                                                       // 70\n      changed(self.keyValueDeps[key][oldSerializedValue]);                              // 71\n      changed(self.keyValueDeps[key][value]);                                           // 72\n    }                                                                                   // 73\n  },                                                                                    // 74\n                                                                                        // 75\n  setDefault: function (key, value) {                                                   // 76\n    var self = this;                                                                    // 77\n    // for now, explicitly check for undefined, since there is no                       // 78\n    // ReactiveDict.clear().  Later we might have a ReactiveDict.clear(), in which case\n    // we should check if it has the key.                                               // 80\n    if (self.keys[key] === undefined) {                                                 // 81\n      self.set(key, value);                                                             // 82\n    }                                                                                   // 83\n  },                                                                                    // 84\n                                                                                        // 85\n  get: function (key) {                                                                 // 86\n    var self = this;                                                                    // 87\n    self._ensureKey(key);                                                               // 88\n    self.keyDeps[key].depend();                                                         // 89\n    return parse(self.keys[key]);                                                       // 90\n  },                                                                                    // 91\n                                                                                        // 92\n  equals: function (key, value) {                                                       // 93\n    var self = this;                                                                    // 94\n                                                                                        // 95\n    // Mongo.ObjectID is in the 'mongo' package                                         // 96\n    var ObjectID = null;                                                                // 97\n    if (Package.mongo) {                                                                // 98\n      ObjectID = Package.mongo.Mongo.ObjectID;                                          // 99\n    }                                                                                   // 100\n                                                                                        // 101\n    // We don't allow objects (or arrays that might include objects) for                // 102\n    // .equals, because JSON.stringify doesn't canonicalize object key                  // 103\n    // order. (We can make equals have the right return value by parsing the            // 104\n    // current value and using EJSON.equals, but we won't have a canonical              // 105\n    // element of keyValueDeps[key] to store the dependency.) You can still use         // 106\n    // \"EJSON.equals(reactiveDict.get(key), value)\".                                    // 107\n    //                                                                                  // 108\n    // XXX we could allow arrays as long as we recursively check that there             // 109\n    // are no objects                                                                   // 110\n    if (typeof value !== 'string' &&                                                    // 111\n        typeof value !== 'number' &&                                                    // 112\n        typeof value !== 'boolean' &&                                                   // 113\n        typeof value !== 'undefined' &&                                                 // 114\n        !(value instanceof Date) &&                                                     // 115\n        !(ObjectID && value instanceof ObjectID) &&                                     // 116\n        value !== null) {                                                               // 117\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");                     // 118\n    }                                                                                   // 119\n    var serializedValue = stringify(value);                                             // 120\n                                                                                        // 121\n    if (Tracker.active) {                                                               // 122\n      self._ensureKey(key);                                                             // 123\n                                                                                        // 124\n      if (! _.has(self.keyValueDeps[key], serializedValue))                             // 125\n        self.keyValueDeps[key][serializedValue] = new Tracker.Dependency;               // 126\n                                                                                        // 127\n      var isNew = self.keyValueDeps[key][serializedValue].depend();                     // 128\n      if (isNew) {                                                                      // 129\n        Tracker.onInvalidate(function () {                                              // 130\n          // clean up [key][serializedValue] if it's now empty, so we don't             // 131\n          // use O(n) memory for n = values seen ever                                   // 132\n          if (! self.keyValueDeps[key][serializedValue].hasDependents())                // 133\n            delete self.keyValueDeps[key][serializedValue];                             // 134\n        });                                                                             // 135\n      }                                                                                 // 136\n    }                                                                                   // 137\n                                                                                        // 138\n    var oldValue = undefined;                                                           // 139\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);                        // 140\n    return EJSON.equals(oldValue, value);                                               // 141\n  },                                                                                    // 142\n                                                                                        // 143\n  all: function() {                                                                     // 144\n    this.allDeps.depend();                                                              // 145\n    var ret = {};                                                                       // 146\n    _.each(this.keys, function(value, key) {                                            // 147\n      ret[key] = parse(value);                                                          // 148\n    });                                                                                 // 149\n    return ret;                                                                         // 150\n  },                                                                                    // 151\n                                                                                        // 152\n  clear: function() {                                                                   // 153\n    var self = this;                                                                    // 154\n                                                                                        // 155\n    var oldKeys = self.keys;                                                            // 156\n    self.keys = {};                                                                     // 157\n                                                                                        // 158\n    self.allDeps.changed();                                                             // 159\n                                                                                        // 160\n    _.each(oldKeys, function(value, key) {                                              // 161\n      changed(self.keyDeps[key]);                                                       // 162\n      changed(self.keyValueDeps[key][value]);                                           // 163\n      changed(self.keyValueDeps[key]['undefined']);                                     // 164\n    });                                                                                 // 165\n                                                                                        // 166\n  },                                                                                    // 167\n                                                                                        // 168\n  _setObject: function (object) {                                                       // 169\n    var self = this;                                                                    // 170\n                                                                                        // 171\n    _.each(object, function (value, key){                                               // 172\n      self.set(key, value);                                                             // 173\n    });                                                                                 // 174\n  },                                                                                    // 175\n                                                                                        // 176\n  _ensureKey: function (key) {                                                          // 177\n    var self = this;                                                                    // 178\n    if (!(key in self.keyDeps)) {                                                       // 179\n      self.keyDeps[key] = new Tracker.Dependency;                                       // 180\n      self.keyValueDeps[key] = {};                                                      // 181\n    }                                                                                   // 182\n  },                                                                                    // 183\n                                                                                        // 184\n  // Get a JSON value that can be passed to the constructor to                          // 185\n  // create a new ReactiveDict with the same contents as this one                       // 186\n  _getMigrationData: function () {                                                      // 187\n    // XXX sanitize and make sure it's JSONible?                                        // 188\n    return this.keys;                                                                   // 189\n  }                                                                                     // 190\n});                                                                                     // 191\n                                                                                        // 192\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/reactive-dict/migration.js                                                  //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\nReactiveDict._migratedDictData = {}; // name -> data                                    // 1\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict                              // 2\n                                                                                        // 3\nReactiveDict._loadMigratedDict = function (dictName) {                                  // 4\n  if (_.has(ReactiveDict._migratedDictData, dictName))                                  // 5\n    return ReactiveDict._migratedDictData[dictName];                                    // 6\n                                                                                        // 7\n  return null;                                                                          // 8\n};                                                                                      // 9\n                                                                                        // 10\nReactiveDict._registerDictForMigrate = function (dictName, dict) {                      // 11\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))                                    // 12\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);                        // 13\n                                                                                        // 14\n  ReactiveDict._dictsToMigrate[dictName] = dict;                                        // 15\n};                                                                                      // 16\n                                                                                        // 17\nif (Meteor.isClient && Package.reload) {                                                // 18\n  // Put old migrated data into ReactiveDict._migratedDictData,                         // 19\n  // where it can be accessed by ReactiveDict._loadMigratedDict.                        // 20\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');            // 21\n  if (migrationData && migrationData.dicts)                                             // 22\n    ReactiveDict._migratedDictData = migrationData.dicts;                               // 23\n                                                                                        // 24\n  // On migration, assemble the data from all the dicts that have been                  // 25\n  // registered.                                                                        // 26\n  Package.reload.Reload._onMigrate('reactive-dict', function () {                       // 27\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;                                  // 28\n    var dataToMigrate = {};                                                             // 29\n                                                                                        // 30\n    for (var dictName in dictsToMigrate)                                                // 31\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();           // 32\n                                                                                        // 33\n    return [true, {dicts: dataToMigrate}];                                              // 34\n  });                                                                                   // 35\n}                                                                                       // 36\n                                                                                        // 37\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]