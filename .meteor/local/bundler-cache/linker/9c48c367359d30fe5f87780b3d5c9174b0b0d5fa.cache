[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\n\n/* Package-scope variables */\nvar DDPCommon;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/ddp-common/packages/ddp-common.js                                                               //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\n(function(){                                                                                                // 1\n                                                                                                            // 2\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                   //     // 4\n// packages/ddp-common/namespace.js                                                                  //     // 5\n//                                                                                                   //     // 6\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                     //     // 8\n/**                                                                                                  // 1   // 9\n * @namespace DDPCommon                                                                              // 2   // 10\n * @summary Namespace for DDPCommon-related methods/classes. Shared between                          // 3   // 11\n * `ddp-client` and `ddp-server`, where the ddp-client is the implementation                         // 4   // 12\n * of a ddp client for both client AND server; and the ddp server is the                             // 5   // 13\n * implementation of the livedata server and stream server. Common                                   // 6   // 14\n * functionality shared between both can be shared under this namespace                              // 7   // 15\n */                                                                                                  // 8   // 16\nDDPCommon = {};                                                                                      // 9   // 17\n                                                                                                     // 10  // 18\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 19\n                                                                                                            // 20\n}).call(this);                                                                                              // 21\n                                                                                                            // 22\n                                                                                                            // 23\n                                                                                                            // 24\n                                                                                                            // 25\n                                                                                                            // 26\n                                                                                                            // 27\n(function(){                                                                                                // 28\n                                                                                                            // 29\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 30\n//                                                                                                   //     // 31\n// packages/ddp-common/heartbeat.js                                                                  //     // 32\n//                                                                                                   //     // 33\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 34\n                                                                                                     //     // 35\n// Heartbeat options:                                                                                // 1   // 36\n//   heartbeatInterval: interval to send pings, in milliseconds.                                     // 2   // 37\n//   heartbeatTimeout: timeout to close the connection if a reply isn't                              // 3   // 38\n//     received, in milliseconds.                                                                    // 4   // 39\n//   sendPing: function to call to send a ping on the connection.                                    // 5   // 40\n//   onTimeout: function to call to close the connection.                                            // 6   // 41\n                                                                                                     // 7   // 42\nDDPCommon.Heartbeat = function (options) {                                                           // 8   // 43\n  var self = this;                                                                                   // 9   // 44\n                                                                                                     // 10  // 45\n  self.heartbeatInterval = options.heartbeatInterval;                                                // 11  // 46\n  self.heartbeatTimeout = options.heartbeatTimeout;                                                  // 12  // 47\n  self._sendPing = options.sendPing;                                                                 // 13  // 48\n  self._onTimeout = options.onTimeout;                                                               // 14  // 49\n  self._seenPacket = false;                                                                          // 15  // 50\n                                                                                                     // 16  // 51\n  self._heartbeatIntervalHandle = null;                                                              // 17  // 52\n  self._heartbeatTimeoutHandle = null;                                                               // 18  // 53\n};                                                                                                   // 19  // 54\n                                                                                                     // 20  // 55\n_.extend(DDPCommon.Heartbeat.prototype, {                                                            // 21  // 56\n  stop: function () {                                                                                // 22  // 57\n    var self = this;                                                                                 // 23  // 58\n    self._clearHeartbeatIntervalTimer();                                                             // 24  // 59\n    self._clearHeartbeatTimeoutTimer();                                                              // 25  // 60\n  },                                                                                                 // 26  // 61\n                                                                                                     // 27  // 62\n  start: function () {                                                                               // 28  // 63\n    var self = this;                                                                                 // 29  // 64\n    self.stop();                                                                                     // 30  // 65\n    self._startHeartbeatIntervalTimer();                                                             // 31  // 66\n  },                                                                                                 // 32  // 67\n                                                                                                     // 33  // 68\n  _startHeartbeatIntervalTimer: function () {                                                        // 34  // 69\n    var self = this;                                                                                 // 35  // 70\n    self._heartbeatIntervalHandle = Meteor.setInterval(                                              // 36  // 71\n      _.bind(self._heartbeatIntervalFired, self),                                                    // 37  // 72\n      self.heartbeatInterval                                                                         // 38  // 73\n    );                                                                                               // 39  // 74\n  },                                                                                                 // 40  // 75\n                                                                                                     // 41  // 76\n  _startHeartbeatTimeoutTimer: function () {                                                         // 42  // 77\n    var self = this;                                                                                 // 43  // 78\n    self._heartbeatTimeoutHandle = Meteor.setTimeout(                                                // 44  // 79\n      _.bind(self._heartbeatTimeoutFired, self),                                                     // 45  // 80\n      self.heartbeatTimeout                                                                          // 46  // 81\n    );                                                                                               // 47  // 82\n  },                                                                                                 // 48  // 83\n                                                                                                     // 49  // 84\n  _clearHeartbeatIntervalTimer: function () {                                                        // 50  // 85\n    var self = this;                                                                                 // 51  // 86\n    if (self._heartbeatIntervalHandle) {                                                             // 52  // 87\n      Meteor.clearInterval(self._heartbeatIntervalHandle);                                           // 53  // 88\n      self._heartbeatIntervalHandle = null;                                                          // 54  // 89\n    }                                                                                                // 55  // 90\n  },                                                                                                 // 56  // 91\n                                                                                                     // 57  // 92\n  _clearHeartbeatTimeoutTimer: function () {                                                         // 58  // 93\n    var self = this;                                                                                 // 59  // 94\n    if (self._heartbeatTimeoutHandle) {                                                              // 60  // 95\n      Meteor.clearTimeout(self._heartbeatTimeoutHandle);                                             // 61  // 96\n      self._heartbeatTimeoutHandle = null;                                                           // 62  // 97\n    }                                                                                                // 63  // 98\n  },                                                                                                 // 64  // 99\n                                                                                                     // 65  // 100\n  // The heartbeat interval timer is fired when we should send a ping.                               // 66  // 101\n  _heartbeatIntervalFired: function () {                                                             // 67  // 102\n    var self = this;                                                                                 // 68  // 103\n    // don't send ping if we've seen a packet since we last checked,                                 // 69  // 104\n    // *or* if we have already sent a ping and are awaiting a timeout.                               // 70  // 105\n    // That shouldn't happen, but it's possible if                                                   // 71  // 106\n    // `self.heartbeatInterval` is smaller than                                                      // 72  // 107\n    // `self.heartbeatTimeout`.                                                                      // 73  // 108\n    if (! self._seenPacket && ! self._heartbeatTimeoutHandle) {                                      // 74  // 109\n      self._sendPing();                                                                              // 75  // 110\n      // Set up timeout, in case a pong doesn't arrive in time.                                      // 76  // 111\n      self._startHeartbeatTimeoutTimer();                                                            // 77  // 112\n    }                                                                                                // 78  // 113\n    self._seenPacket = false;                                                                        // 79  // 114\n  },                                                                                                 // 80  // 115\n                                                                                                     // 81  // 116\n  // The heartbeat timeout timer is fired when we sent a ping, but we                                // 82  // 117\n  // timed out waiting for the pong.                                                                 // 83  // 118\n  _heartbeatTimeoutFired: function () {                                                              // 84  // 119\n    var self = this;                                                                                 // 85  // 120\n    self._heartbeatTimeoutHandle = null;                                                             // 86  // 121\n    self._onTimeout();                                                                               // 87  // 122\n  },                                                                                                 // 88  // 123\n                                                                                                     // 89  // 124\n  messageReceived: function () {                                                                     // 90  // 125\n    var self = this;                                                                                 // 91  // 126\n    // Tell periodic checkin that we have seen a packet, and thus it                                 // 92  // 127\n    // does not need to send a ping this cycle.                                                      // 93  // 128\n    self._seenPacket = true;                                                                         // 94  // 129\n    // If we were waiting for a pong, we got it.                                                     // 95  // 130\n    if (self._heartbeatTimeoutHandle) {                                                              // 96  // 131\n      self._clearHeartbeatTimeoutTimer();                                                            // 97  // 132\n    }                                                                                                // 98  // 133\n  }                                                                                                  // 99  // 134\n});                                                                                                  // 100\n                                                                                                     // 101\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 137\n                                                                                                            // 138\n}).call(this);                                                                                              // 139\n                                                                                                            // 140\n                                                                                                            // 141\n                                                                                                            // 142\n                                                                                                            // 143\n                                                                                                            // 144\n                                                                                                            // 145\n(function(){                                                                                                // 146\n                                                                                                            // 147\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 148\n//                                                                                                   //     // 149\n// packages/ddp-common/utils.js                                                                      //     // 150\n//                                                                                                   //     // 151\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 152\n                                                                                                     //     // 153\nDDPCommon.SUPPORTED_DDP_VERSIONS = [ '1', 'pre2', 'pre1' ];                                          // 1   // 154\n                                                                                                     // 2   // 155\nDDPCommon.parseDDP = function (stringMessage) {                                                      // 3   // 156\n  try {                                                                                              // 4   // 157\n    var msg = JSON.parse(stringMessage);                                                             // 5   // 158\n  } catch (e) {                                                                                      // 6   // 159\n    Meteor._debug(\"Discarding message with invalid JSON\", stringMessage);                            // 7   // 160\n    return null;                                                                                     // 8   // 161\n  }                                                                                                  // 9   // 162\n  // DDP messages must be objects.                                                                   // 10  // 163\n  if (msg === null || typeof msg !== 'object') {                                                     // 11  // 164\n    Meteor._debug(\"Discarding non-object DDP message\", stringMessage);                               // 12  // 165\n    return null;                                                                                     // 13  // 166\n  }                                                                                                  // 14  // 167\n                                                                                                     // 15  // 168\n  // massage msg to get it into \"abstract ddp\" rather than \"wire ddp\" format.                        // 16  // 169\n                                                                                                     // 17  // 170\n  // switch between \"cleared\" rep of unsetting fields and \"undefined\"                                // 18  // 171\n  // rep of same                                                                                     // 19  // 172\n  if (_.has(msg, 'cleared')) {                                                                       // 20  // 173\n    if (!_.has(msg, 'fields'))                                                                       // 21  // 174\n      msg.fields = {};                                                                               // 22  // 175\n    _.each(msg.cleared, function (clearKey) {                                                        // 23  // 176\n      msg.fields[clearKey] = undefined;                                                              // 24  // 177\n    });                                                                                              // 25  // 178\n    delete msg.cleared;                                                                              // 26  // 179\n  }                                                                                                  // 27  // 180\n                                                                                                     // 28  // 181\n  _.each(['fields', 'params', 'result'], function (field) {                                          // 29  // 182\n    if (_.has(msg, field))                                                                           // 30  // 183\n      msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);                                      // 31  // 184\n  });                                                                                                // 32  // 185\n                                                                                                     // 33  // 186\n  return msg;                                                                                        // 34  // 187\n};                                                                                                   // 35  // 188\n                                                                                                     // 36  // 189\nDDPCommon.stringifyDDP = function (msg) {                                                            // 37  // 190\n  var copy = EJSON.clone(msg);                                                                       // 38  // 191\n  // swizzle 'changed' messages from 'fields undefined' rep to 'fields                               // 39  // 192\n  // and cleared' rep                                                                                // 40  // 193\n  if (_.has(msg, 'fields')) {                                                                        // 41  // 194\n    var cleared = [];                                                                                // 42  // 195\n    _.each(msg.fields, function (value, key) {                                                       // 43  // 196\n      if (value === undefined) {                                                                     // 44  // 197\n        cleared.push(key);                                                                           // 45  // 198\n        delete copy.fields[key];                                                                     // 46  // 199\n      }                                                                                              // 47  // 200\n    });                                                                                              // 48  // 201\n    if (!_.isEmpty(cleared))                                                                         // 49  // 202\n      copy.cleared = cleared;                                                                        // 50  // 203\n    if (_.isEmpty(copy.fields))                                                                      // 51  // 204\n      delete copy.fields;                                                                            // 52  // 205\n  }                                                                                                  // 53  // 206\n  // adjust types to basic                                                                           // 54  // 207\n  _.each(['fields', 'params', 'result'], function (field) {                                          // 55  // 208\n    if (_.has(copy, field))                                                                          // 56  // 209\n      copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);                                      // 57  // 210\n  });                                                                                                // 58  // 211\n  if (msg.id && typeof msg.id !== 'string') {                                                        // 59  // 212\n    throw new Error(\"Message id is not a string\");                                                   // 60  // 213\n  }                                                                                                  // 61  // 214\n  return JSON.stringify(copy);                                                                       // 62  // 215\n};                                                                                                   // 63  // 216\n                                                                                                     // 64  // 217\n                                                                                                     // 65  // 218\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 219\n                                                                                                            // 220\n}).call(this);                                                                                              // 221\n                                                                                                            // 222\n                                                                                                            // 223\n                                                                                                            // 224\n                                                                                                            // 225\n                                                                                                            // 226\n                                                                                                            // 227\n(function(){                                                                                                // 228\n                                                                                                            // 229\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 230\n//                                                                                                   //     // 231\n// packages/ddp-common/method_invocation.js                                                          //     // 232\n//                                                                                                   //     // 233\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 234\n                                                                                                     //     // 235\n// Instance name is this because it is usually referred to as this inside a                          // 1   // 236\n// method definition                                                                                 // 2   // 237\n/**                                                                                                  // 3   // 238\n * @summary The state for a single invocation of a method, referenced by this                        // 4   // 239\n * inside a method definition.                                                                       // 5   // 240\n * @param {Object} options                                                                           // 6   // 241\n * @instanceName this                                                                                // 7   // 242\n */                                                                                                  // 8   // 243\nDDPCommon.MethodInvocation = function (options) {                                                    // 9   // 244\n  var self = this;                                                                                   // 10  // 245\n                                                                                                     // 11  // 246\n  // true if we're running not the actual method, but a stub (that is,                               // 12  // 247\n  // if we're on a client (which may be a browser, or in the future a                                // 13  // 248\n  // server connecting to another server) and presently running a                                    // 14  // 249\n  // simulation of a server-side method for latency compensation                                     // 15  // 250\n  // purposes). not currently true except in a client such as a browser,                             // 16  // 251\n  // since there's usually no point in running stubs unless you have a                               // 17  // 252\n  // zero-latency connection to the user.                                                            // 18  // 253\n                                                                                                     // 19  // 254\n  /**                                                                                                // 20  // 255\n   * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.  // 21  // 256\n   * @locus Anywhere                                                                                 // 22  // 257\n   * @name  isSimulation                                                                             // 23  // 258\n   * @memberOf DDPCommon.MethodInvocation                                                            // 24  // 259\n   * @instance                                                                                       // 25  // 260\n   * @type {Boolean}                                                                                 // 26  // 261\n   */                                                                                                // 27  // 262\n  this.isSimulation = options.isSimulation;                                                          // 28  // 263\n                                                                                                     // 29  // 264\n  // call this function to allow other method invocations (from the                                  // 30  // 265\n  // same client) to continue running without waiting for this one to                                // 31  // 266\n  // complete.                                                                                       // 32  // 267\n  this._unblock = options.unblock || function () {};                                                 // 33  // 268\n  this._calledUnblock = false;                                                                       // 34  // 269\n                                                                                                     // 35  // 270\n  // current user id                                                                                 // 36  // 271\n                                                                                                     // 37  // 272\n  /**                                                                                                // 38  // 273\n   * @summary The id of the user that made this method call, or `null` if no user was logged in.     // 39  // 274\n   * @locus Anywhere                                                                                 // 40  // 275\n   * @name  userId                                                                                   // 41  // 276\n   * @memberOf DDPCommon.MethodInvocation                                                            // 42  // 277\n   * @instance                                                                                       // 43  // 278\n   */                                                                                                // 44  // 279\n  this.userId = options.userId;                                                                      // 45  // 280\n                                                                                                     // 46  // 281\n  // sets current user id in all appropriate server contexts and                                     // 47  // 282\n  // reruns subscriptions                                                                            // 48  // 283\n  this._setUserId = options.setUserId || function () {};                                             // 49  // 284\n                                                                                                     // 50  // 285\n  // On the server, the connection this method call came in on.                                      // 51  // 286\n                                                                                                     // 52  // 287\n  /**                                                                                                // 53  // 288\n   * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call.\n   * @locus Server                                                                                   // 55  // 290\n   * @name  connection                                                                               // 56  // 291\n   * @memberOf DDPCommon.MethodInvocation                                                            // 57  // 292\n   * @instance                                                                                       // 58  // 293\n   */                                                                                                // 59  // 294\n  this.connection = options.connection;                                                              // 60  // 295\n                                                                                                     // 61  // 296\n  // The seed for randomStream value generation                                                      // 62  // 297\n  this.randomSeed = options.randomSeed;                                                              // 63  // 298\n                                                                                                     // 64  // 299\n  // This is set by RandomStream.get; and holds the random stream state                              // 65  // 300\n  this.randomStream = null;                                                                          // 66  // 301\n};                                                                                                   // 67  // 302\n                                                                                                     // 68  // 303\n_.extend(DDPCommon.MethodInvocation.prototype, {                                                     // 69  // 304\n  /**                                                                                                // 70  // 305\n   * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.\n   * @locus Server                                                                                   // 72  // 307\n   * @memberOf DDPCommon.MethodInvocation                                                            // 73  // 308\n   * @instance                                                                                       // 74  // 309\n   */                                                                                                // 75  // 310\n  unblock: function () {                                                                             // 76  // 311\n    var self = this;                                                                                 // 77  // 312\n    self._calledUnblock = true;                                                                      // 78  // 313\n    self._unblock();                                                                                 // 79  // 314\n  },                                                                                                 // 80  // 315\n                                                                                                     // 81  // 316\n  /**                                                                                                // 82  // 317\n   * @summary Set the logged in user.                                                                // 83  // 318\n   * @locus Server                                                                                   // 84  // 319\n   * @memberOf DDPCommon.MethodInvocation                                                            // 85  // 320\n   * @instance                                                                                       // 86  // 321\n   * @param {String | null} userId The value that should be returned by `userId` on this connection.        // 322\n   */                                                                                                // 88  // 323\n  setUserId: function(userId) {                                                                      // 89  // 324\n    var self = this;                                                                                 // 90  // 325\n    if (self._calledUnblock)                                                                         // 91  // 326\n      throw new Error(\"Can't call setUserId in a method after calling unblock\");                     // 92  // 327\n    self.userId = userId;                                                                            // 93  // 328\n    self._setUserId(userId);                                                                         // 94  // 329\n  }                                                                                                  // 95  // 330\n});                                                                                                  // 96  // 331\n                                                                                                     // 97  // 332\n                                                                                                     // 98  // 333\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 334\n                                                                                                            // 335\n}).call(this);                                                                                              // 336\n                                                                                                            // 337\n                                                                                                            // 338\n                                                                                                            // 339\n                                                                                                            // 340\n                                                                                                            // 341\n                                                                                                            // 342\n(function(){                                                                                                // 343\n                                                                                                            // 344\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 345\n//                                                                                                   //     // 346\n// packages/ddp-common/random_stream.js                                                              //     // 347\n//                                                                                                   //     // 348\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 349\n                                                                                                     //     // 350\n// RandomStream allows for generation of pseudo-random values, from a seed.                          // 1   // 351\n//                                                                                                   // 2   // 352\n// We use this for consistent 'random' numbers across the client and server.                         // 3   // 353\n// We want to generate probably-unique IDs on the client, and we ideally want                        // 4   // 354\n// the server to generate the same IDs when it executes the method.                                  // 5   // 355\n//                                                                                                   // 6   // 356\n// For generated values to be the same, we must seed ourselves the same way,                         // 7   // 357\n// and we must keep track of the current state of our pseudo-random generators.                      // 8   // 358\n// We call this state the scope. By default, we use the current DDP method                           // 9   // 359\n// invocation as our scope.  DDP now allows the client to specify a randomSeed.                      // 10  // 360\n// If a randomSeed is provided it will be used to seed our random sequences.                         // 11  // 361\n// In this way, client and server method calls will generate the same values.                        // 12  // 362\n//                                                                                                   // 13  // 363\n// We expose multiple named streams; each stream is independent                                      // 14  // 364\n// and is seeded differently (but predictably from the name).                                        // 15  // 365\n// By using multiple streams, we support reordering of requests,                                     // 16  // 366\n// as long as they occur on different streams.                                                       // 17  // 367\n//                                                                                                   // 18  // 368\n// @param options {Optional Object}                                                                  // 19  // 369\n//   seed: Array or value - Seed value(s) for the generator.                                         // 20  // 370\n//                          If an array, will be used as-is                                          // 21  // 371\n//                          If a value, will be converted to a single-value array                    // 22  // 372\n//                          If omitted, a random array will be used as the seed.                     // 23  // 373\nDDPCommon.RandomStream = function (options) {                                                        // 24  // 374\n  var self = this;                                                                                   // 25  // 375\n                                                                                                     // 26  // 376\n  this.seed = [].concat(options.seed || randomToken());                                              // 27  // 377\n                                                                                                     // 28  // 378\n  this.sequences = {};                                                                               // 29  // 379\n};                                                                                                   // 30  // 380\n                                                                                                     // 31  // 381\n// Returns a random string of sufficient length for a random seed.                                   // 32  // 382\n// This is a placeholder function; a similar function is planned                                     // 33  // 383\n// for Random itself; when that is added we should remove this function,                             // 34  // 384\n// and call Random's randomToken instead.                                                            // 35  // 385\nfunction randomToken() {                                                                             // 36  // 386\n  return Random.hexString(20);                                                                       // 37  // 387\n};                                                                                                   // 38  // 388\n                                                                                                     // 39  // 389\n// Returns the random stream with the specified name, in the specified scope.                        // 40  // 390\n// If scope is null (or otherwise falsey) then we will use Random, which will                        // 41  // 391\n// give us as random numbers as possible, but won't produce the same                                 // 42  // 392\n// values across client and server.                                                                  // 43  // 393\n// However, scope will normally be the current DDP method invocation, so                             // 44  // 394\n// we'll use the stream with the specified name, and we should get consistent                        // 45  // 395\n// values on the client and server sides of a method call.                                           // 46  // 396\nDDPCommon.RandomStream.get = function (scope, name) {                                                // 47  // 397\n  if (!name) {                                                                                       // 48  // 398\n    name = \"default\";                                                                                // 49  // 399\n  }                                                                                                  // 50  // 400\n  if (!scope) {                                                                                      // 51  // 401\n    // There was no scope passed in;                                                                 // 52  // 402\n    // the sequence won't actually be reproducible.                                                  // 53  // 403\n    return Random;                                                                                   // 54  // 404\n  }                                                                                                  // 55  // 405\n  var randomStream = scope.randomStream;                                                             // 56  // 406\n  if (!randomStream) {                                                                               // 57  // 407\n    scope.randomStream = randomStream = new DDPCommon.RandomStream({                                 // 58  // 408\n      seed: scope.randomSeed                                                                         // 59  // 409\n    });                                                                                              // 60  // 410\n  }                                                                                                  // 61  // 411\n  return randomStream._sequence(name);                                                               // 62  // 412\n};                                                                                                   // 63  // 413\n                                                                                                     // 64  // 414\n                                                                                                     // 65  // 415\n// Creates a randomSeed for passing to a method call.                                                // 66  // 416\n// Note that we take enclosing as an argument,                                                       // 67  // 417\n// though we expect it to be DDP._CurrentInvocation.get()                                            // 68  // 418\n// However, we often evaluate makeRpcSeed lazily, and thus the relevant                              // 69  // 419\n// invocation may not be the one currently in scope.                                                 // 70  // 420\n// If enclosing is null, we'll use Random and values won't be repeatable.                            // 71  // 421\nDDPCommon.makeRpcSeed = function (enclosing, methodName) {                                           // 72  // 422\n  var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);                          // 73  // 423\n  return stream.hexString(20);                                                                       // 74  // 424\n};                                                                                                   // 75  // 425\n                                                                                                     // 76  // 426\n_.extend(DDPCommon.RandomStream.prototype, {                                                         // 77  // 427\n  // Get a random sequence with the specified name, creating it if does not exist.                   // 78  // 428\n  // New sequences are seeded with the seed concatenated with the name.                              // 79  // 429\n  // By passing a seed into Random.create, we use the Alea generator.                                // 80  // 430\n  _sequence: function (name) {                                                                       // 81  // 431\n    var self = this;                                                                                 // 82  // 432\n                                                                                                     // 83  // 433\n    var sequence = self.sequences[name] || null;                                                     // 84  // 434\n    if (sequence === null) {                                                                         // 85  // 435\n      var sequenceSeed = self.seed.concat(name);                                                     // 86  // 436\n      for (var i = 0; i < sequenceSeed.length; i++) {                                                // 87  // 437\n        if (_.isFunction(sequenceSeed[i])) {                                                         // 88  // 438\n          sequenceSeed[i] = sequenceSeed[i]();                                                       // 89  // 439\n        }                                                                                            // 90  // 440\n      }                                                                                              // 91  // 441\n      self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);            // 92  // 442\n    }                                                                                                // 93  // 443\n    return sequence;                                                                                 // 94  // 444\n  }                                                                                                  // 95  // 445\n});                                                                                                  // 96  // 446\n                                                                                                     // 97  // 447\n///////////////////////////////////////////////////////////////////////////////////////////////////////     // 448\n                                                                                                            // 449\n}).call(this);                                                                                              // 450\n                                                                                                            // 451\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ddp-common'] = {\n  DDPCommon: DDPCommon\n};\n\n})();\n","servePath":"/packages/ddp-common.js","sourceMap":{"version":3,"sources":["/packages/ddp-common/packages/ddp-common.js"],"names":[],"mappingskH","file":"/packages/ddp-common.js","sourcesContent":["(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/ddp-common/namespace.js                                                                  //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n/**                                                                                                  // 1\n * @namespace DDPCommon                                                                              // 2\n * @summary Namespace for DDPCommon-related methods/classes. Shared between                          // 3\n * `ddp-client` and `ddp-server`, where the ddp-client is the implementation                         // 4\n * of a ddp client for both client AND server; and the ddp server is the                             // 5\n * implementation of the livedata server and stream server. Common                                   // 6\n * functionality shared between both can be shared under this namespace                              // 7\n */                                                                                                  // 8\nDDPCommon = {};                                                                                      // 9\n                                                                                                     // 10\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/ddp-common/heartbeat.js                                                                  //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n// Heartbeat options:                                                                                // 1\n//   heartbeatInterval: interval to send pings, in milliseconds.                                     // 2\n//   heartbeatTimeout: timeout to close the connection if a reply isn't                              // 3\n//     received, in milliseconds.                                                                    // 4\n//   sendPing: function to call to send a ping on the connection.                                    // 5\n//   onTimeout: function to call to close the connection.                                            // 6\n                                                                                                     // 7\nDDPCommon.Heartbeat = function (options) {                                                           // 8\n  var self = this;                                                                                   // 9\n                                                                                                     // 10\n  self.heartbeatInterval = options.heartbeatInterval;                                                // 11\n  self.heartbeatTimeout = options.heartbeatTimeout;                                                  // 12\n  self._sendPing = options.sendPing;                                                                 // 13\n  self._onTimeout = options.onTimeout;                                                               // 14\n  self._seenPacket = false;                                                                          // 15\n                                                                                                     // 16\n  self._heartbeatIntervalHandle = null;                                                              // 17\n  self._heartbeatTimeoutHandle = null;                                                               // 18\n};                                                                                                   // 19\n                                                                                                     // 20\n_.extend(DDPCommon.Heartbeat.prototype, {                                                            // 21\n  stop: function () {                                                                                // 22\n    var self = this;                                                                                 // 23\n    self._clearHeartbeatIntervalTimer();                                                             // 24\n    self._clearHeartbeatTimeoutTimer();                                                              // 25\n  },                                                                                                 // 26\n                                                                                                     // 27\n  start: function () {                                                                               // 28\n    var self = this;                                                                                 // 29\n    self.stop();                                                                                     // 30\n    self._startHeartbeatIntervalTimer();                                                             // 31\n  },                                                                                                 // 32\n                                                                                                     // 33\n  _startHeartbeatIntervalTimer: function () {                                                        // 34\n    var self = this;                                                                                 // 35\n    self._heartbeatIntervalHandle = Meteor.setInterval(                                              // 36\n      _.bind(self._heartbeatIntervalFired, self),                                                    // 37\n      self.heartbeatInterval                                                                         // 38\n    );                                                                                               // 39\n  },                                                                                                 // 40\n                                                                                                     // 41\n  _startHeartbeatTimeoutTimer: function () {                                                         // 42\n    var self = this;                                                                                 // 43\n    self._heartbeatTimeoutHandle = Meteor.setTimeout(                                                // 44\n      _.bind(self._heartbeatTimeoutFired, self),                                                     // 45\n      self.heartbeatTimeout                                                                          // 46\n    );                                                                                               // 47\n  },                                                                                                 // 48\n                                                                                                     // 49\n  _clearHeartbeatIntervalTimer: function () {                                                        // 50\n    var self = this;                                                                                 // 51\n    if (self._heartbeatIntervalHandle) {                                                             // 52\n      Meteor.clearInterval(self._heartbeatIntervalHandle);                                           // 53\n      self._heartbeatIntervalHandle = null;                                                          // 54\n    }                                                                                                // 55\n  },                                                                                                 // 56\n                                                                                                     // 57\n  _clearHeartbeatTimeoutTimer: function () {                                                         // 58\n    var self = this;                                                                                 // 59\n    if (self._heartbeatTimeoutHandle) {                                                              // 60\n      Meteor.clearTimeout(self._heartbeatTimeoutHandle);                                             // 61\n      self._heartbeatTimeoutHandle = null;                                                           // 62\n    }                                                                                                // 63\n  },                                                                                                 // 64\n                                                                                                     // 65\n  // The heartbeat interval timer is fired when we should send a ping.                               // 66\n  _heartbeatIntervalFired: function () {                                                             // 67\n    var self = this;                                                                                 // 68\n    // don't send ping if we've seen a packet since we last checked,                                 // 69\n    // *or* if we have already sent a ping and are awaiting a timeout.                               // 70\n    // That shouldn't happen, but it's possible if                                                   // 71\n    // `self.heartbeatInterval` is smaller than                                                      // 72\n    // `self.heartbeatTimeout`.                                                                      // 73\n    if (! self._seenPacket && ! self._heartbeatTimeoutHandle) {                                      // 74\n      self._sendPing();                                                                              // 75\n      // Set up timeout, in case a pong doesn't arrive in time.                                      // 76\n      self._startHeartbeatTimeoutTimer();                                                            // 77\n    }                                                                                                // 78\n    self._seenPacket = false;                                                                        // 79\n  },                                                                                                 // 80\n                                                                                                     // 81\n  // The heartbeat timeout timer is fired when we sent a ping, but we                                // 82\n  // timed out waiting for the pong.                                                                 // 83\n  _heartbeatTimeoutFired: function () {                                                              // 84\n    var self = this;                                                                                 // 85\n    self._heartbeatTimeoutHandle = null;                                                             // 86\n    self._onTimeout();                                                                               // 87\n  },                                                                                                 // 88\n                                                                                                     // 89\n  messageReceived: function () {                                                                     // 90\n    var self = this;                                                                                 // 91\n    // Tell periodic checkin that we have seen a packet, and thus it                                 // 92\n    // does not need to send a ping this cycle.                                                      // 93\n    self._seenPacket = true;                                                                         // 94\n    // If we were waiting for a pong, we got it.                                                     // 95\n    if (self._heartbeatTimeoutHandle) {                                                              // 96\n      self._clearHeartbeatTimeoutTimer();                                                            // 97\n    }                                                                                                // 98\n  }                                                                                                  // 99\n});                                                                                                  // 100\n                                                                                                     // 101\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/ddp-common/utils.js                                                                      //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\nDDPCommon.SUPPORTED_DDP_VERSIONS = [ '1', 'pre2', 'pre1' ];                                          // 1\n                                                                                                     // 2\nDDPCommon.parseDDP = function (stringMessage) {                                                      // 3\n  try {                                                                                              // 4\n    var msg = JSON.parse(stringMessage);                                                             // 5\n  } catch (e) {                                                                                      // 6\n    Meteor._debug(\"Discarding message with invalid JSON\", stringMessage);                            // 7\n    return null;                                                                                     // 8\n  }                                                                                                  // 9\n  // DDP messages must be objects.                                                                   // 10\n  if (msg === null || typeof msg !== 'object') {                                                     // 11\n    Meteor._debug(\"Discarding non-object DDP message\", stringMessage);                               // 12\n    return null;                                                                                     // 13\n  }                                                                                                  // 14\n                                                                                                     // 15\n  // massage msg to get it into \"abstract ddp\" rather than \"wire ddp\" format.                        // 16\n                                                                                                     // 17\n  // switch between \"cleared\" rep of unsetting fields and \"undefined\"                                // 18\n  // rep of same                                                                                     // 19\n  if (_.has(msg, 'cleared')) {                                                                       // 20\n    if (!_.has(msg, 'fields'))                                                                       // 21\n      msg.fields = {};                                                                               // 22\n    _.each(msg.cleared, function (clearKey) {                                                        // 23\n      msg.fields[clearKey] = undefined;                                                              // 24\n    });                                                                                              // 25\n    delete msg.cleared;                                                                              // 26\n  }                                                                                                  // 27\n                                                                                                     // 28\n  _.each(['fields', 'params', 'result'], function (field) {                                          // 29\n    if (_.has(msg, field))                                                                           // 30\n      msg[field] = EJSON._adjustTypesFromJSONValue(msg[field]);                                      // 31\n  });                                                                                                // 32\n                                                                                                     // 33\n  return msg;                                                                                        // 34\n};                                                                                                   // 35\n                                                                                                     // 36\nDDPCommon.stringifyDDP = function (msg) {                                                            // 37\n  var copy = EJSON.clone(msg);                                                                       // 38\n  // swizzle 'changed' messages from 'fields undefined' rep to 'fields                               // 39\n  // and cleared' rep                                                                                // 40\n  if (_.has(msg, 'fields')) {                                                                        // 41\n    var cleared = [];                                                                                // 42\n    _.each(msg.fields, function (value, key) {                                                       // 43\n      if (value === undefined) {                                                                     // 44\n        cleared.push(key);                                                                           // 45\n        delete copy.fields[key];                                                                     // 46\n      }                                                                                              // 47\n    });                                                                                              // 48\n    if (!_.isEmpty(cleared))                                                                         // 49\n      copy.cleared = cleared;                                                                        // 50\n    if (_.isEmpty(copy.fields))                                                                      // 51\n      delete copy.fields;                                                                            // 52\n  }                                                                                                  // 53\n  // adjust types to basic                                                                           // 54\n  _.each(['fields', 'params', 'result'], function (field) {                                          // 55\n    if (_.has(copy, field))                                                                          // 56\n      copy[field] = EJSON._adjustTypesToJSONValue(copy[field]);                                      // 57\n  });                                                                                                // 58\n  if (msg.id && typeof msg.id !== 'string') {                                                        // 59\n    throw new Error(\"Message id is not a string\");                                                   // 60\n  }                                                                                                  // 61\n  return JSON.stringify(copy);                                                                       // 62\n};                                                                                                   // 63\n                                                                                                     // 64\n                                                                                                     // 65\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/ddp-common/method_invocation.js                                                          //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n// Instance name is this because it is usually referred to as this inside a                          // 1\n// method definition                                                                                 // 2\n/**                                                                                                  // 3\n * @summary The state for a single invocation of a method, referenced by this                        // 4\n * inside a method definition.                                                                       // 5\n * @param {Object} options                                                                           // 6\n * @instanceName this                                                                                // 7\n */                                                                                                  // 8\nDDPCommon.MethodInvocation = function (options) {                                                    // 9\n  var self = this;                                                                                   // 10\n                                                                                                     // 11\n  // true if we're running not the actual method, but a stub (that is,                               // 12\n  // if we're on a client (which may be a browser, or in the future a                                // 13\n  // server connecting to another server) and presently running a                                    // 14\n  // simulation of a server-side method for latency compensation                                     // 15\n  // purposes). not currently true except in a client such as a browser,                             // 16\n  // since there's usually no point in running stubs unless you have a                               // 17\n  // zero-latency connection to the user.                                                            // 18\n                                                                                                     // 19\n  /**                                                                                                // 20\n   * @summary Access inside a method invocation.  Boolean value, true if this invocation is a stub.  // 21\n   * @locus Anywhere                                                                                 // 22\n   * @name  isSimulation                                                                             // 23\n   * @memberOf DDPCommon.MethodInvocation                                                            // 24\n   * @instance                                                                                       // 25\n   * @type {Boolean}                                                                                 // 26\n   */                                                                                                // 27\n  this.isSimulation = options.isSimulation;                                                          // 28\n                                                                                                     // 29\n  // call this function to allow other method invocations (from the                                  // 30\n  // same client) to continue running without waiting for this one to                                // 31\n  // complete.                                                                                       // 32\n  this._unblock = options.unblock || function () {};                                                 // 33\n  this._calledUnblock = false;                                                                       // 34\n                                                                                                     // 35\n  // current user id                                                                                 // 36\n                                                                                                     // 37\n  /**                                                                                                // 38\n   * @summary The id of the user that made this method call, or `null` if no user was logged in.     // 39\n   * @locus Anywhere                                                                                 // 40\n   * @name  userId                                                                                   // 41\n   * @memberOf DDPCommon.MethodInvocation                                                            // 42\n   * @instance                                                                                       // 43\n   */                                                                                                // 44\n  this.userId = options.userId;                                                                      // 45\n                                                                                                     // 46\n  // sets current user id in all appropriate server contexts and                                     // 47\n  // reruns subscriptions                                                                            // 48\n  this._setUserId = options.setUserId || function () {};                                             // 49\n                                                                                                     // 50\n  // On the server, the connection this method call came in on.                                      // 51\n                                                                                                     // 52\n  /**                                                                                                // 53\n   * @summary Access inside a method invocation. The [connection](#meteor_onconnection) that this method was received on. `null` if the method is not associated with a connection, eg. a server initiated method call.\n   * @locus Server                                                                                   // 55\n   * @name  connection                                                                               // 56\n   * @memberOf DDPCommon.MethodInvocation                                                            // 57\n   * @instance                                                                                       // 58\n   */                                                                                                // 59\n  this.connection = options.connection;                                                              // 60\n                                                                                                     // 61\n  // The seed for randomStream value generation                                                      // 62\n  this.randomSeed = options.randomSeed;                                                              // 63\n                                                                                                     // 64\n  // This is set by RandomStream.get; and holds the random stream state                              // 65\n  this.randomStream = null;                                                                          // 66\n};                                                                                                   // 67\n                                                                                                     // 68\n_.extend(DDPCommon.MethodInvocation.prototype, {                                                     // 69\n  /**                                                                                                // 70\n   * @summary Call inside a method invocation.  Allow subsequent method from this client to begin running in a new fiber.\n   * @locus Server                                                                                   // 72\n   * @memberOf DDPCommon.MethodInvocation                                                            // 73\n   * @instance                                                                                       // 74\n   */                                                                                                // 75\n  unblock: function () {                                                                             // 76\n    var self = this;                                                                                 // 77\n    self._calledUnblock = true;                                                                      // 78\n    self._unblock();                                                                                 // 79\n  },                                                                                                 // 80\n                                                                                                     // 81\n  /**                                                                                                // 82\n   * @summary Set the logged in user.                                                                // 83\n   * @locus Server                                                                                   // 84\n   * @memberOf DDPCommon.MethodInvocation                                                            // 85\n   * @instance                                                                                       // 86\n   * @param {String | null} userId The value that should be returned by `userId` on this connection.\n   */                                                                                                // 88\n  setUserId: function(userId) {                                                                      // 89\n    var self = this;                                                                                 // 90\n    if (self._calledUnblock)                                                                         // 91\n      throw new Error(\"Can't call setUserId in a method after calling unblock\");                     // 92\n    self.userId = userId;                                                                            // 93\n    self._setUserId(userId);                                                                         // 94\n  }                                                                                                  // 95\n});                                                                                                  // 96\n                                                                                                     // 97\n                                                                                                     // 98\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/ddp-common/random_stream.js                                                              //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n// RandomStream allows for generation of pseudo-random values, from a seed.                          // 1\n//                                                                                                   // 2\n// We use this for consistent 'random' numbers across the client and server.                         // 3\n// We want to generate probably-unique IDs on the client, and we ideally want                        // 4\n// the server to generate the same IDs when it executes the method.                                  // 5\n//                                                                                                   // 6\n// For generated values to be the same, we must seed ourselves the same way,                         // 7\n// and we must keep track of the current state of our pseudo-random generators.                      // 8\n// We call this state the scope. By default, we use the current DDP method                           // 9\n// invocation as our scope.  DDP now allows the client to specify a randomSeed.                      // 10\n// If a randomSeed is provided it will be used to seed our random sequences.                         // 11\n// In this way, client and server method calls will generate the same values.                        // 12\n//                                                                                                   // 13\n// We expose multiple named streams; each stream is independent                                      // 14\n// and is seeded differently (but predictably from the name).                                        // 15\n// By using multiple streams, we support reordering of requests,                                     // 16\n// as long as they occur on different streams.                                                       // 17\n//                                                                                                   // 18\n// @param options {Optional Object}                                                                  // 19\n//   seed: Array or value - Seed value(s) for the generator.                                         // 20\n//                          If an array, will be used as-is                                          // 21\n//                          If a value, will be converted to a single-value array                    // 22\n//                          If omitted, a random array will be used as the seed.                     // 23\nDDPCommon.RandomStream = function (options) {                                                        // 24\n  var self = this;                                                                                   // 25\n                                                                                                     // 26\n  this.seed = [].concat(options.seed || randomToken());                                              // 27\n                                                                                                     // 28\n  this.sequences = {};                                                                               // 29\n};                                                                                                   // 30\n                                                                                                     // 31\n// Returns a random string of sufficient length for a random seed.                                   // 32\n// This is a placeholder function; a similar function is planned                                     // 33\n// for Random itself; when that is added we should remove this function,                             // 34\n// and call Random's randomToken instead.                                                            // 35\nfunction randomToken() {                                                                             // 36\n  return Random.hexString(20);                                                                       // 37\n};                                                                                                   // 38\n                                                                                                     // 39\n// Returns the random stream with the specified name, in the specified scope.                        // 40\n// If scope is null (or otherwise falsey) then we will use Random, which will                        // 41\n// give us as random numbers as possible, but won't produce the same                                 // 42\n// values across client and server.                                                                  // 43\n// However, scope will normally be the current DDP method invocation, so                             // 44\n// we'll use the stream with the specified name, and we should get consistent                        // 45\n// values on the client and server sides of a method call.                                           // 46\nDDPCommon.RandomStream.get = function (scope, name) {                                                // 47\n  if (!name) {                                                                                       // 48\n    name = \"default\";                                                                                // 49\n  }                                                                                                  // 50\n  if (!scope) {                                                                                      // 51\n    // There was no scope passed in;                                                                 // 52\n    // the sequence won't actually be reproducible.                                                  // 53\n    return Random;                                                                                   // 54\n  }                                                                                                  // 55\n  var randomStream = scope.randomStream;                                                             // 56\n  if (!randomStream) {                                                                               // 57\n    scope.randomStream = randomStream = new DDPCommon.RandomStream({                                 // 58\n      seed: scope.randomSeed                                                                         // 59\n    });                                                                                              // 60\n  }                                                                                                  // 61\n  return randomStream._sequence(name);                                                               // 62\n};                                                                                                   // 63\n                                                                                                     // 64\n                                                                                                     // 65\n// Creates a randomSeed for passing to a method call.                                                // 66\n// Note that we take enclosing as an argument,                                                       // 67\n// though we expect it to be DDP._CurrentInvocation.get()                                            // 68\n// However, we often evaluate makeRpcSeed lazily, and thus the relevant                              // 69\n// invocation may not be the one currently in scope.                                                 // 70\n// If enclosing is null, we'll use Random and values won't be repeatable.                            // 71\nDDPCommon.makeRpcSeed = function (enclosing, methodName) {                                           // 72\n  var stream = DDPCommon.RandomStream.get(enclosing, '/rpc/' + methodName);                          // 73\n  return stream.hexString(20);                                                                       // 74\n};                                                                                                   // 75\n                                                                                                     // 76\n_.extend(DDPCommon.RandomStream.prototype, {                                                         // 77\n  // Get a random sequence with the specified name, creating it if does not exist.                   // 78\n  // New sequences are seeded with the seed concatenated with the name.                              // 79\n  // By passing a seed into Random.create, we use the Alea generator.                                // 80\n  _sequence: function (name) {                                                                       // 81\n    var self = this;                                                                                 // 82\n                                                                                                     // 83\n    var sequence = self.sequences[name] || null;                                                     // 84\n    if (sequence === null) {                                                                         // 85\n      var sequenceSeed = self.seed.concat(name);                                                     // 86\n      for (var i = 0; i < sequenceSeed.length; i++) {                                                // 87\n        if (_.isFunction(sequenceSeed[i])) {                                                         // 88\n          sequenceSeed[i] = sequenceSeed[i]();                                                       // 89\n        }                                                                                            // 90\n      }                                                                                              // 91\n      self.sequences[name] = sequence = Random.createWithSeeds.apply(null, sequenceSeed);            // 92\n    }                                                                                                // 93\n    return sequence;                                                                                 // 94\n  }                                                                                                  // 95\n});                                                                                                  // 96\n                                                                                                     // 97\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]