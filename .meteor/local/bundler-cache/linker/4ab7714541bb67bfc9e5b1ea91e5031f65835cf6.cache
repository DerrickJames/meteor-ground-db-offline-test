[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar Iron = Package['iron:core'].Iron;\n\n/* Package-scope variables */\nvar Controller;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                //\n// packages/iron_controller/packages/iron_controller.js                                           //\n//                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                  //\n(function () {                                                                                    // 1\n                                                                                                  // 2\n/////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                         //     // 4\n// packages/iron:controller/lib/controller.js                                              //     // 5\n//                                                                                         //     // 6\n/////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                           //     // 8\n/*****************************************************************************/            // 1   // 9\n/* Imports */                                                                              // 2   // 10\n/*****************************************************************************/            // 3   // 11\nvar debug = Iron.utils.debug('iron:controller');                                           // 4   // 12\nvar Layout = Iron.Layout;                                                                  // 5   // 13\nvar DynamicTemplate = Iron.DynamicTemplate;                                                // 6   // 14\n                                                                                           // 7   // 15\n/*****************************************************************************/            // 8   // 16\n/* Private */                                                                              // 9   // 17\n/*****************************************************************************/            // 10  // 18\nvar bindData = function (value, thisArg) {                                                 // 11  // 19\n  return function () {                                                                     // 12  // 20\n    return (typeof value === 'function') ? value.apply(thisArg, arguments) : value;        // 13  // 21\n  };                                                                                       // 14  // 22\n};                                                                                         // 15  // 23\n                                                                                           // 16  // 24\n/*****************************************************************************/            // 17  // 25\n/* Controller */                                                                           // 18  // 26\n/*****************************************************************************/            // 19  // 27\nController = function (options) {                                                          // 20  // 28\n  var self = this;                                                                         // 21  // 29\n  this.options = options || {};                                                            // 22  // 30\n  this._layout = this.options.layout || new Layout(this.options);                          // 23  // 31\n  this._isController = true;                                                               // 24  // 32\n  this._layout._setLookupHost(this);                                                       // 25  // 33\n                                                                                           // 26  // 34\n  // grab the event map from the Controller constructor which was                          // 27  // 35\n  // set if the user does MyController.events({...});                                      // 28  // 36\n  var eventMap = Controller._collectEventMaps.call(this.constructor);                      // 29  // 37\n  this._layout.events(eventMap, this);                                                     // 30  // 38\n                                                                                           // 31  // 39\n  this.init(options);                                                                      // 32  // 40\n};                                                                                         // 33  // 41\n                                                                                           // 34  // 42\n/**                                                                                        // 35  // 43\n * Set or get the layout's template and optionally its data context.                       // 36  // 44\n */                                                                                        // 37  // 45\nController.prototype.layout = function (template, options) {                               // 38  // 46\n  var self = this;                                                                         // 39  // 47\n                                                                                           // 40  // 48\n  this._layout.template(template);                                                         // 41  // 49\n                                                                                           // 42  // 50\n  // check whether options has a data property                                             // 43  // 51\n  if (options && (_.has(options, 'data')))                                                 // 44  // 52\n    this._layout.data(bindData(options.data, this));                                       // 45  // 53\n                                                                                           // 46  // 54\n  return {                                                                                 // 47  // 55\n    data: function (val) {                                                                 // 48  // 56\n      return self._layout.data(bindData(val, self));                                       // 49  // 57\n    }                                                                                      // 50  // 58\n  };                                                                                       // 51  // 59\n};                                                                                         // 52  // 60\n                                                                                           // 53  // 61\n/**                                                                                        // 54  // 62\n * Render a template into a region of the layout.                                          // 55  // 63\n */                                                                                        // 56  // 64\nController.prototype.render = function (template, options) {                               // 57  // 65\n  var self = this;                                                                         // 58  // 66\n                                                                                           // 59  // 67\n  if (options && (typeof options.data !== 'undefined'))                                    // 60  // 68\n    options.data = bindData(options.data, this);                                           // 61  // 69\n                                                                                           // 62  // 70\n  var tmpl = this._layout.render(template, options);                                       // 63  // 71\n                                                                                           // 64  // 72\n  // allow caller to do: this.render('MyTemplate').data(function () {...});                // 65  // 73\n  return {                                                                                 // 66  // 74\n    data: function (func) {                                                                // 67  // 75\n      return tmpl.data(bindData(func, self));                                              // 68  // 76\n    }                                                                                      // 69  // 77\n  };                                                                                       // 70  // 78\n};                                                                                         // 71  // 79\n                                                                                           // 72  // 80\n/**                                                                                        // 73  // 81\n * Begin recording rendered regions.                                                       // 74  // 82\n */                                                                                        // 75  // 83\nController.prototype.beginRendering = function (onComplete) {                              // 76  // 84\n  return this._layout.beginRendering(onComplete);                                          // 77  // 85\n};                                                                                         // 78  // 86\n                                                                                           // 79  // 87\n/*****************************************************************************/            // 80  // 88\n/* Controller Static Methods */                                                            // 81  // 89\n/*****************************************************************************/            // 82  // 90\n/**                                                                                        // 83  // 91\n * Inherit from Controller.                                                                // 84  // 92\n *                                                                                         // 85  // 93\n * Note: The inheritance function in Meteor._inherits is broken. Static                    // 86  // 94\n * properties on functions don't get copied.                                               // 87  // 95\n */                                                                                        // 88  // 96\nController.extend = function (props) {                                                     // 89  // 97\n  return Iron.utils.extend(this, props);                                                   // 90  // 98\n};                                                                                         // 91  // 99\n                                                                                           // 92  // 100\nController.events = function (events) {                                                    // 93  // 101\n  this._eventMap = events;                                                                 // 94  // 102\n  return this;                                                                             // 95  // 103\n};                                                                                         // 96  // 104\n                                                                                           // 97  // 105\n/**                                                                                        // 98  // 106\n * Returns a single event map merged from super to child.                                  // 99  // 107\n * Called from the constructor function like this:                                         // 100\n *                                                                                         // 101\n * this.constructor._collectEventMaps()                                                    // 102\n */                                                                                        // 103\n                                                                                           // 104\nvar mergeStaticInheritedObjectProperty = function (ctor, prop) {                           // 105\n  var merge = {};                                                                          // 106\n                                                                                           // 107\n  if (ctor.__super__)                                                                      // 108\n    _.extend(merge, mergeStaticInheritedObjectProperty(ctor.__super__.constructor, prop)); // 109\n                                                                                           // 110\n  return _.has(ctor, prop) ? _.extend(merge, ctor[prop]) : merge;                          // 111\n};                                                                                         // 112\n                                                                                           // 113\nController._collectEventMaps = function () {                                               // 114\n  return mergeStaticInheritedObjectProperty(this, '_eventMap');                            // 115\n};                                                                                         // 116\n                                                                                           // 117\n// NOTE: helpers are not inherited from one controller to another, for now.                // 118\nController._helpers = {};                                                                  // 119\nController.helpers = function (helpers) {                                                  // 120\n  _.extend(this._helpers, helpers);                                                        // 121\n  return this;                                                                             // 122\n};                                                                                         // 123\n                                                                                           // 124\n/*****************************************************************************/            // 125\n/* Global Helpers */                                                                       // 126\n/*****************************************************************************/            // 127\nif (typeof Template !== 'undefined') {                                                     // 128\n  /**                                                                                      // 129\n   * Returns the nearest controller for a template instance. You can call this             // 130\n   * function from inside a template helper.                                               // 131\n   *                                                                                       // 132\n   * Example:                                                                              // 133\n   * Template.MyPage.helpers({                                                             // 134\n   *   greeting: function () {                                                             // 135\n   *    var controller = Iron.controller();                                                // 136\n   *    return controller.state.get('greeting');                                           // 137\n   *   }                                                                                   // 138\n   * });                                                                                   // 139\n   */                                                                                      // 140\n  Iron.controller = function () {                                                          // 141\n    //XXX establishes a reactive dependency which causes helper to run                     // 142\n    return DynamicTemplate.findLookupHostWithProperty(Blaze.getView(), '_isController');   // 143\n  };                                                                                       // 144\n                                                                                           // 145\n  /**                                                                                      // 146\n   * Find a lookup host with a state key and return it reactively if we have               // 147\n   * it.                                                                                   // 148\n   */                                                                                      // 149\n  Template.registerHelper('get', function (key) {                                          // 150\n    var controller = Iron.controller();                                                    // 151\n    if (controller && controller.state)                                                    // 152\n      return controller.state.get(key);                                                    // 153\n  });                                                                                      // 154\n}                                                                                          // 155\n/*****************************************************************************/            // 156\n/* Namespacing */                                                                          // 157\n/*****************************************************************************/            // 158\nIron.Controller = Controller;                                                              // 159\n                                                                                           // 160\n/////////////////////////////////////////////////////////////////////////////////////////////     // 169\n                                                                                                  // 170\n}).call(this);                                                                                    // 171\n                                                                                                  // 172\n                                                                                                  // 173\n                                                                                                  // 174\n                                                                                                  // 175\n                                                                                                  // 176\n                                                                                                  // 177\n(function () {                                                                                    // 178\n                                                                                                  // 179\n/////////////////////////////////////////////////////////////////////////////////////////////     // 180\n//                                                                                         //     // 181\n// packages/iron:controller/lib/controller_server.js                                       //     // 182\n//                                                                                         //     // 183\n/////////////////////////////////////////////////////////////////////////////////////////////     // 184\n                                                                                           //     // 185\nController.prototype.init = function () {};                                                // 1   // 186\n                                                                                           // 2   // 187\nController.prototype.wait = function () {};                                                // 3   // 188\n                                                                                           // 4   // 189\nController.prototype.ready = function () {                                                 // 5   // 190\n  // for now there are no subscribe calls on the server. All data should                   // 6   // 191\n  // be ready synchronously which means this.ready() should always be true.                // 7   // 192\n  return true;                                                                             // 8   // 193\n};                                                                                         // 9   // 194\n                                                                                           // 10  // 195\n/////////////////////////////////////////////////////////////////////////////////////////////     // 196\n                                                                                                  // 197\n}).call(this);                                                                                    // 198\n                                                                                                  // 199\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['iron:controller'] = {};\n\n})();\n","servePath":"/packages/iron_controller.js","sourceMap":{"version":3,"sources":["/packages/iron_controller/packages/iron_controller.js"],"names":[],"mappingswG","file":"/packages/iron_controller.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                         //\n// packages/iron:controller/lib/controller.js                                              //\n//                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                           //\n/*****************************************************************************/            // 1\n/* Imports */                                                                              // 2\n/*****************************************************************************/            // 3\nvar debug = Iron.utils.debug('iron:controller');                                           // 4\nvar Layout = Iron.Layout;                                                                  // 5\nvar DynamicTemplate = Iron.DynamicTemplate;                                                // 6\n                                                                                           // 7\n/*****************************************************************************/            // 8\n/* Private */                                                                              // 9\n/*****************************************************************************/            // 10\nvar bindData = function (value, thisArg) {                                                 // 11\n  return function () {                                                                     // 12\n    return (typeof value === 'function') ? value.apply(thisArg, arguments) : value;        // 13\n  };                                                                                       // 14\n};                                                                                         // 15\n                                                                                           // 16\n/*****************************************************************************/            // 17\n/* Controller */                                                                           // 18\n/*****************************************************************************/            // 19\nController = function (options) {                                                          // 20\n  var self = this;                                                                         // 21\n  this.options = options || {};                                                            // 22\n  this._layout = this.options.layout || new Layout(this.options);                          // 23\n  this._isController = true;                                                               // 24\n  this._layout._setLookupHost(this);                                                       // 25\n                                                                                           // 26\n  // grab the event map from the Controller constructor which was                          // 27\n  // set if the user does MyController.events({...});                                      // 28\n  var eventMap = Controller._collectEventMaps.call(this.constructor);                      // 29\n  this._layout.events(eventMap, this);                                                     // 30\n                                                                                           // 31\n  this.init(options);                                                                      // 32\n};                                                                                         // 33\n                                                                                           // 34\n/**                                                                                        // 35\n * Set or get the layout's template and optionally its data context.                       // 36\n */                                                                                        // 37\nController.prototype.layout = function (template, options) {                               // 38\n  var self = this;                                                                         // 39\n                                                                                           // 40\n  this._layout.template(template);                                                         // 41\n                                                                                           // 42\n  // check whether options has a data property                                             // 43\n  if (options && (_.has(options, 'data')))                                                 // 44\n    this._layout.data(bindData(options.data, this));                                       // 45\n                                                                                           // 46\n  return {                                                                                 // 47\n    data: function (val) {                                                                 // 48\n      return self._layout.data(bindData(val, self));                                       // 49\n    }                                                                                      // 50\n  };                                                                                       // 51\n};                                                                                         // 52\n                                                                                           // 53\n/**                                                                                        // 54\n * Render a template into a region of the layout.                                          // 55\n */                                                                                        // 56\nController.prototype.render = function (template, options) {                               // 57\n  var self = this;                                                                         // 58\n                                                                                           // 59\n  if (options && (typeof options.data !== 'undefined'))                                    // 60\n    options.data = bindData(options.data, this);                                           // 61\n                                                                                           // 62\n  var tmpl = this._layout.render(template, options);                                       // 63\n                                                                                           // 64\n  // allow caller to do: this.render('MyTemplate').data(function () {...});                // 65\n  return {                                                                                 // 66\n    data: function (func) {                                                                // 67\n      return tmpl.data(bindData(func, self));                                              // 68\n    }                                                                                      // 69\n  };                                                                                       // 70\n};                                                                                         // 71\n                                                                                           // 72\n/**                                                                                        // 73\n * Begin recording rendered regions.                                                       // 74\n */                                                                                        // 75\nController.prototype.beginRendering = function (onComplete) {                              // 76\n  return this._layout.beginRendering(onComplete);                                          // 77\n};                                                                                         // 78\n                                                                                           // 79\n/*****************************************************************************/            // 80\n/* Controller Static Methods */                                                            // 81\n/*****************************************************************************/            // 82\n/**                                                                                        // 83\n * Inherit from Controller.                                                                // 84\n *                                                                                         // 85\n * Note: The inheritance function in Meteor._inherits is broken. Static                    // 86\n * properties on functions don't get copied.                                               // 87\n */                                                                                        // 88\nController.extend = function (props) {                                                     // 89\n  return Iron.utils.extend(this, props);                                                   // 90\n};                                                                                         // 91\n                                                                                           // 92\nController.events = function (events) {                                                    // 93\n  this._eventMap = events;                                                                 // 94\n  return this;                                                                             // 95\n};                                                                                         // 96\n                                                                                           // 97\n/**                                                                                        // 98\n * Returns a single event map merged from super to child.                                  // 99\n * Called from the constructor function like this:                                         // 100\n *                                                                                         // 101\n * this.constructor._collectEventMaps()                                                    // 102\n */                                                                                        // 103\n                                                                                           // 104\nvar mergeStaticInheritedObjectProperty = function (ctor, prop) {                           // 105\n  var merge = {};                                                                          // 106\n                                                                                           // 107\n  if (ctor.__super__)                                                                      // 108\n    _.extend(merge, mergeStaticInheritedObjectProperty(ctor.__super__.constructor, prop)); // 109\n                                                                                           // 110\n  return _.has(ctor, prop) ? _.extend(merge, ctor[prop]) : merge;                          // 111\n};                                                                                         // 112\n                                                                                           // 113\nController._collectEventMaps = function () {                                               // 114\n  return mergeStaticInheritedObjectProperty(this, '_eventMap');                            // 115\n};                                                                                         // 116\n                                                                                           // 117\n// NOTE: helpers are not inherited from one controller to another, for now.                // 118\nController._helpers = {};                                                                  // 119\nController.helpers = function (helpers) {                                                  // 120\n  _.extend(this._helpers, helpers);                                                        // 121\n  return this;                                                                             // 122\n};                                                                                         // 123\n                                                                                           // 124\n/*****************************************************************************/            // 125\n/* Global Helpers */                                                                       // 126\n/*****************************************************************************/            // 127\nif (typeof Template !== 'undefined') {                                                     // 128\n  /**                                                                                      // 129\n   * Returns the nearest controller for a template instance. You can call this             // 130\n   * function from inside a template helper.                                               // 131\n   *                                                                                       // 132\n   * Example:                                                                              // 133\n   * Template.MyPage.helpers({                                                             // 134\n   *   greeting: function () {                                                             // 135\n   *    var controller = Iron.controller();                                                // 136\n   *    return controller.state.get('greeting');                                           // 137\n   *   }                                                                                   // 138\n   * });                                                                                   // 139\n   */                                                                                      // 140\n  Iron.controller = function () {                                                          // 141\n    //XXX establishes a reactive dependency which causes helper to run                     // 142\n    return DynamicTemplate.findLookupHostWithProperty(Blaze.getView(), '_isController');   // 143\n  };                                                                                       // 144\n                                                                                           // 145\n  /**                                                                                      // 146\n   * Find a lookup host with a state key and return it reactively if we have               // 147\n   * it.                                                                                   // 148\n   */                                                                                      // 149\n  Template.registerHelper('get', function (key) {                                          // 150\n    var controller = Iron.controller();                                                    // 151\n    if (controller && controller.state)                                                    // 152\n      return controller.state.get(key);                                                    // 153\n  });                                                                                      // 154\n}                                                                                          // 155\n/*****************************************************************************/            // 156\n/* Namespacing */                                                                          // 157\n/*****************************************************************************/            // 158\nIron.Controller = Controller;                                                              // 159\n                                                                                           // 160\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                         //\n// packages/iron:controller/lib/controller_server.js                                       //\n//                                                                                         //\n/////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                           //\nController.prototype.init = function () {};                                                // 1\n                                                                                           // 2\nController.prototype.wait = function () {};                                                // 3\n                                                                                           // 4\nController.prototype.ready = function () {                                                 // 5\n  // for now there are no subscribe calls on the server. All data should                   // 6\n  // be ready synchronously which means this.ready() should always be true.                // 7\n  return true;                                                                             // 8\n};                                                                                         // 9\n                                                                                           // 10\n/////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]