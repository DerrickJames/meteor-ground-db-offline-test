[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Template = Package.templating.Template;\nvar EJSON = Package.ejson.EJSON;\nvar Meteor = Package.meteor.Meteor;\nvar Iron = Package['iron:core'].Iron;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar CurrentOptions, HTTP_METHODS, RouteController, Route, Router, route;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/iron_router/packages/iron_router.js                                                                      //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n(function () {                                                                                                       // 1\n                                                                                                                     // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                            //     // 4\n// packages/iron:router/lib/current_options.js                                                                //     // 5\n//                                                                                                            //     // 6\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                              //     // 8\n/**                                                                                                           // 1   // 9\n * Allows for dynamic scoping of options variables. Primarily intended to be                                  // 2   // 10\n * used in the RouteController.prototype.lookupOption method.                                                 // 3   // 11\n */                                                                                                           // 4   // 12\nCurrentOptions = new Meteor.EnvironmentVariable;                                                              // 5   // 13\n                                                                                                              // 6   // 14\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 15\n                                                                                                                     // 16\n}).call(this);                                                                                                       // 17\n                                                                                                                     // 18\n                                                                                                                     // 19\n                                                                                                                     // 20\n                                                                                                                     // 21\n                                                                                                                     // 22\n                                                                                                                     // 23\n(function () {                                                                                                       // 24\n                                                                                                                     // 25\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 26\n//                                                                                                            //     // 27\n// packages/iron:router/lib/http_methods.js                                                                   //     // 28\n//                                                                                                            //     // 29\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 30\n                                                                                                              //     // 31\nHTTP_METHODS = [                                                                                              // 1   // 32\n  'get',                                                                                                      // 2   // 33\n  'post',                                                                                                     // 3   // 34\n  'put',                                                                                                      // 4   // 35\n  'delete',                                                                                                   // 5   // 36\n  'patch'                                                                                                     // 6   // 37\n];                                                                                                            // 7   // 38\n                                                                                                              // 8   // 39\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 40\n                                                                                                                     // 41\n}).call(this);                                                                                                       // 42\n                                                                                                                     // 43\n                                                                                                                     // 44\n                                                                                                                     // 45\n                                                                                                                     // 46\n                                                                                                                     // 47\n                                                                                                                     // 48\n(function () {                                                                                                       // 49\n                                                                                                                     // 50\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 51\n//                                                                                                            //     // 52\n// packages/iron:router/lib/route_controller.js                                                               //     // 53\n//                                                                                                            //     // 54\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 55\n                                                                                                              //     // 56\n/*****************************************************************************/                               // 1   // 57\n/* Imports */                                                                                                 // 2   // 58\n/*****************************************************************************/                               // 3   // 59\nvar Controller = Iron.Controller;                                                                             // 4   // 60\nvar Url = Iron.Url;                                                                                           // 5   // 61\nvar MiddlewareStack = Iron.MiddlewareStack;                                                                   // 6   // 62\nvar assert = Iron.utils.assert;                                                                               // 7   // 63\n                                                                                                              // 8   // 64\n/*****************************************************************************/                               // 9   // 65\n/* RouteController */                                                                                         // 10  // 66\n/*****************************************************************************/                               // 11  // 67\nRouteController = Controller.extend({                                                                         // 12  // 68\n  constructor: function (options) {                                                                           // 13  // 69\n    RouteController.__super__.constructor.apply(this, arguments);                                             // 14  // 70\n    options = options || {};                                                                                  // 15  // 71\n    this.options = options;                                                                                   // 16  // 72\n    this._onStopCallbacks = [];                                                                               // 17  // 73\n    this.route = options.route;                                                                               // 18  // 74\n    this.params = [];                                                                                         // 19  // 75\n                                                                                                              // 20  // 76\n    // Sometimes the data property can be defined on route options,                                           // 21  // 77\n    // or even on the global router config. And people will expect the                                        // 22  // 78\n    // data function to be available on the controller instance if it                                         // 23  // 79\n    // is defined anywhere in the chain. This ensure that if we have                                          // 24  // 80\n    // a data function somewhere in the chain, you can call this.data().                                      // 25  // 81\n    var data = this.lookupOption('data');                                                                     // 26  // 82\n                                                                                                              // 27  // 83\n    if (typeof data === 'function')                                                                           // 28  // 84\n      this.data = _.bind(data, this);                                                                         // 29  // 85\n    else if (typeof data !== 'undefined')                                                                     // 30  // 86\n      this.data = function () { return data; };                                                               // 31  // 87\n                                                                                                              // 32  // 88\n    this.init(options);                                                                                       // 33  // 89\n  }                                                                                                           // 34  // 90\n});                                                                                                           // 35  // 91\n                                                                                                              // 36  // 92\n/**                                                                                                           // 37  // 93\n * Returns an option value following an \"options chain\" which is this path:                                   // 38  // 94\n *                                                                                                            // 39  // 95\n *   this.options                                                                                             // 40  // 96\n *   this (which includes the proto chain)                                                                    // 41  // 97\n *   this.route.options                                                                                       // 42  // 98\n *   dynamic variable                                                                                         // 43  // 99\n *   this.router.options                                                                                      // 44  // 100\n */                                                                                                           // 45  // 101\nRouteController.prototype.lookupOption = function (key) {                                                     // 46  // 102\n  // this.route.options                                                                                       // 47  // 103\n  // NOTE: we've debated whether route options should come before controller but                              // 48  // 104\n  // Tom has convinced me that it's easier for people to think about overriding                               // 49  // 105\n  // controller stuff at the route option level. However, this has the possibly                               // 50  // 106\n  // counterintuitive effect that if you define this.someprop = true on the                                   // 51  // 107\n  // controller instance, and you have someprop defined as an option on your                                  // 52  // 108\n  // Route, the route option will take precedence.                                                            // 53  // 109\n  if (this.route && this.route.options && _.has(this.route.options, key))                                     // 54  // 110\n    return this.route.options[key];                                                                           // 55  // 111\n                                                                                                              // 56  // 112\n  // this.options                                                                                             // 57  // 113\n  if (_.has(this.options, key))                                                                               // 58  // 114\n    return this.options[key];                                                                                 // 59  // 115\n                                                                                                              // 60  // 116\n  // \"this\" object or its proto chain                                                                         // 61  // 117\n  if (typeof this[key] !== 'undefined')                                                                       // 62  // 118\n    return this[key];                                                                                         // 63  // 119\n                                                                                                              // 64  // 120\n  // see if we have the CurrentOptions dynamic variable set.                                                  // 65  // 121\n  var opts = CurrentOptions.get();                                                                            // 66  // 122\n  if (opts && _.has(opts, key))                                                                               // 67  // 123\n    return opts[key];                                                                                         // 68  // 124\n                                                                                                              // 69  // 125\n  // this.router.options                                                                                      // 70  // 126\n  if (this.router && this.router.options && _.has(this.router.options, key))                                  // 71  // 127\n    return this.router.options[key];                                                                          // 72  // 128\n};                                                                                                            // 73  // 129\n                                                                                                              // 74  // 130\nRouteController.prototype.configureFromUrl = function (url, context, options) {                               // 75  // 131\n  assert(typeof url === 'string', 'url must be a string');                                                    // 76  // 132\n  context = context || {};                                                                                    // 77  // 133\n  this.request = context.request || {};                                                                       // 78  // 134\n  this.response = context.response || {};                                                                     // 79  // 135\n  this.url = context.url || url;                                                                              // 80  // 136\n  this.originalUrl = context.originalUrl || url;                                                              // 81  // 137\n  this.method = this.request.method;                                                                          // 82  // 138\n  if (this.route) {                                                                                           // 83  // 139\n    // pass options to that we can set reactive: false                                                        // 84  // 140\n    this.setParams(this.route.params(url), options);                                                          // 85  // 141\n  }                                                                                                           // 86  // 142\n};                                                                                                            // 87  // 143\n                                                                                                              // 88  // 144\n/**                                                                                                           // 89  // 145\n * Returns an array of hook functions for the given hook names. Hooks are                                     // 90  // 146\n * collected in this order:                                                                                   // 91  // 147\n *                                                                                                            // 92  // 148\n * router global hooks                                                                                        // 93  // 149\n * route option hooks                                                                                         // 94  // 150\n * prototype of the controller                                                                                // 95  // 151\n * this object for the controller                                                                             // 96  // 152\n *                                                                                                            // 97  // 153\n * For example, this.collectHooks('onBeforeAction', 'before')                                                 // 98  // 154\n * will return an array of hook functions where the key is either onBeforeAction                              // 99  // 155\n * or before.                                                                                                 // 100\n *                                                                                                            // 101\n * Hook values can also be strings in which case they are looked up in the                                    // 102\n * Iron.Router.hooks object.                                                                                  // 103\n *                                                                                                            // 104\n * TODO: Add an options last argument which can specify to only collect hooks                                 // 105\n * for a particular environment (client, server or both).                                                     // 106\n */                                                                                                           // 107\nRouteController.prototype._collectHooks = function (/* hook1, alias1, ... */) {                               // 108\n  var self = this;                                                                                            // 109\n  var hookNames = _.toArray(arguments);                                                                       // 110\n                                                                                                              // 111\n  var getHookValues = function (value) {                                                                      // 112\n    if (!value)                                                                                               // 113\n      return [];                                                                                              // 114\n    var lookupHook = self.router.lookupHook;                                                                  // 115\n    var hooks = _.isArray(value) ? value : [value];                                                           // 116\n    return _.map(hooks, function (h) { return lookupHook(h); });                                              // 117\n  };                                                                                                          // 118\n                                                                                                              // 119\n  var collectInheritedHooks = function (ctor, hookName) {                                                     // 120\n    var hooks = [];                                                                                           // 121\n                                                                                                              // 122\n    if (ctor.__super__)                                                                                       // 123\n      hooks = hooks.concat(collectInheritedHooks(ctor.__super__.constructor, hookName));                      // 124\n                                                                                                              // 125\n    return _.has(ctor.prototype, hookName) ?                                                                  // 126\n      hooks.concat(getHookValues(ctor.prototype[hookName])) : hooks;                                          // 127\n  };                                                                                                          // 128\n                                                                                                              // 129\n  var eachHook = function (cb) {                                                                              // 130\n    for (var i = 0; i < hookNames.length; i++) {                                                              // 131\n      cb(hookNames[i]);                                                                                       // 132\n    }                                                                                                         // 133\n  };                                                                                                          // 134\n                                                                                                              // 135\n  var routerHooks = [];                                                                                       // 136\n  eachHook(function (hook) {                                                                                  // 137\n    var name = self.route && self.route.getName();                                                            // 138\n    var hooks = self.router.getHooks(hook, name);                                                             // 139\n    routerHooks = routerHooks.concat(hooks);                                                                  // 140\n  });                                                                                                         // 141\n                                                                                                              // 142\n  var protoHooks = [];                                                                                        // 143\n  eachHook(function (hook) {                                                                                  // 144\n    var hooks = collectInheritedHooks(self.constructor, hook);                                                // 145\n    protoHooks = protoHooks.concat(hooks);                                                                    // 146\n  });                                                                                                         // 147\n                                                                                                              // 148\n  var thisHooks = [];                                                                                         // 149\n  eachHook(function (hook) {                                                                                  // 150\n    if (_.has(self, hook)) {                                                                                  // 151\n      var hooks = getHookValues(self[hook]);                                                                  // 152\n      thisHooks = thisHooks.concat(hooks);                                                                    // 153\n    }                                                                                                         // 154\n  });                                                                                                         // 155\n                                                                                                              // 156\n  var routeHooks = [];                                                                                        // 157\n  if (self.route) {                                                                                           // 158\n    eachHook(function (hook) {                                                                                // 159\n      var hooks = getHookValues(self.route.options[hook]);                                                    // 160\n      routeHooks = routeHooks.concat(hooks);                                                                  // 161\n    });                                                                                                       // 162\n  }                                                                                                           // 163\n                                                                                                              // 164\n  var allHooks = routerHooks                                                                                  // 165\n    .concat(routeHooks)                                                                                       // 166\n    .concat(protoHooks)                                                                                       // 167\n    .concat(thisHooks);                                                                                       // 168\n                                                                                                              // 169\n  return allHooks;                                                                                            // 170\n};                                                                                                            // 171\n                                                                                                              // 172\n/**                                                                                                           // 173\n * Runs each hook and returns the number of hooks that were run.                                              // 174\n */                                                                                                           // 175\nRouteController.prototype.runHooks = function (/* hook, alias1, ...*/ ) {                                     // 176\n  var hooks = this._collectHooks.apply(this, arguments);                                                      // 177\n  for (var i = 0, l = hooks.length; i < l; i++) {                                                             // 178\n    var h = hooks[i];                                                                                         // 179\n    h.call(this);                                                                                             // 180\n  }                                                                                                           // 181\n  return hooks.length;                                                                                        // 182\n};                                                                                                            // 183\n                                                                                                              // 184\nRouteController.prototype.getParams = function () {                                                           // 185\n  return this.params;                                                                                         // 186\n};                                                                                                            // 187\n                                                                                                              // 188\nRouteController.prototype.setParams = function (value) {                                                      // 189\n  this.params = value;                                                                                        // 190\n  return this;                                                                                                // 191\n};                                                                                                            // 192\n                                                                                                              // 193\nIron.RouteController = RouteController;                                                                       // 194\n                                                                                                              // 195\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 252\n                                                                                                                     // 253\n}).call(this);                                                                                                       // 254\n                                                                                                                     // 255\n                                                                                                                     // 256\n                                                                                                                     // 257\n                                                                                                                     // 258\n                                                                                                                     // 259\n                                                                                                                     // 260\n(function () {                                                                                                       // 261\n                                                                                                                     // 262\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 263\n//                                                                                                            //     // 264\n// packages/iron:router/lib/route_controller_client.js                                                        //     // 265\n//                                                                                                            //     // 266\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 267\n                                                                                                              //     // 268\n/*****************************************************************************/                               // 1   // 269\n/* Imports */                                                                                                 // 2   // 270\n/*****************************************************************************/                               // 3   // 271\nvar Controller = Iron.Controller;                                                                             // 4   // 272\nvar Url = Iron.Url;                                                                                           // 5   // 273\nvar MiddlewareStack = Iron.MiddlewareStack;                                                                   // 6   // 274\nvar debug = Iron.utils.debug('iron-router:RouteController');                                                  // 7   // 275\n                                                                                                              // 8   // 276\n/*****************************************************************************/                               // 9   // 277\n/* RouteController */                                                                                         // 10  // 278\n/*****************************************************************************/                               // 11  // 279\n/**                                                                                                           // 12  // 280\n * Client specific initialization.                                                                            // 13  // 281\n */                                                                                                           // 14  // 282\nRouteController.prototype.init = function (options) {                                                         // 15  // 283\n  RouteController.__super__.init.apply(this, arguments);                                                      // 16  // 284\n  this._computation = null;                                                                                   // 17  // 285\n  this._paramsDep = new Tracker.Dependency;                                                                   // 18  // 286\n  this.location = Iron.Location;                                                                              // 19  // 287\n};                                                                                                            // 20  // 288\n                                                                                                              // 21  // 289\nRouteController.prototype.getParams = function () {                                                           // 22  // 290\n  this._paramsDep.depend();                                                                                   // 23  // 291\n  return this.params;                                                                                         // 24  // 292\n};                                                                                                            // 25  // 293\n                                                                                                              // 26  // 294\nRouteController.prototype.setParams = function (value, options) {                                             // 27  // 295\n  var equals = function (a, b) {                                                                              // 28  // 296\n    if (!(a instanceof Array))                                                                                // 29  // 297\n      throw new Error(\"you called equals with a non array value in setParams\");                               // 30  // 298\n    if (!(b instanceof Array))                                                                                // 31  // 299\n      return false;                                                                                           // 32  // 300\n    if (a.length !== b.length)                                                                                // 33  // 301\n      return false;                                                                                           // 34  // 302\n    for (var i = 0; i < a.length; i++) {                                                                      // 35  // 303\n      if (!EJSON.equals(a[i], b[i], options))                                                                 // 36  // 304\n        return false;                                                                                         // 37  // 305\n    }                                                                                                         // 38  // 306\n                                                                                                              // 39  // 307\n    // now check all of the hasOwn properties of params                                                       // 40  // 308\n    var aKeys = _.keys(a);                                                                                    // 41  // 309\n    var bKeys = _.keys(b);                                                                                    // 42  // 310\n    var key;                                                                                                  // 43  // 311\n                                                                                                              // 44  // 312\n    if (aKeys.length !== bKeys.length)                                                                        // 45  // 313\n      return false;                                                                                           // 46  // 314\n                                                                                                              // 47  // 315\n    for (var i = 0; i < aKeys.length; i++) {                                                                  // 48  // 316\n      key = aKeys[i];                                                                                         // 49  // 317\n      if (!_.has(b, key))                                                                                     // 50  // 318\n        return false;                                                                                         // 51  // 319\n      if (!EJSON.equals(a[key], b[key]))                                                                      // 52  // 320\n        return false;                                                                                         // 53  // 321\n    }                                                                                                         // 54  // 322\n                                                                                                              // 55  // 323\n    return true;                                                                                              // 56  // 324\n  };                                                                                                          // 57  // 325\n                                                                                                              // 58  // 326\n  // this won't work because the array values are the same                                                    // 59  // 327\n  // most of the time.                                                                                        // 60  // 328\n  if (equals(this.params, value))                                                                             // 61  // 329\n    return;                                                                                                   // 62  // 330\n                                                                                                              // 63  // 331\n  this.params = value;                                                                                        // 64  // 332\n                                                                                                              // 65  // 333\n  options = options || {};                                                                                    // 66  // 334\n  if (options.reactive !== false)                                                                             // 67  // 335\n    this._paramsDep.changed();                                                                                // 68  // 336\n                                                                                                              // 69  // 337\n  return this;                                                                                                // 70  // 338\n};                                                                                                            // 71  // 339\n                                                                                                              // 72  // 340\n/**                                                                                                           // 73  // 341\n * Let this controller run a dispatch process. This function will be called                                   // 74  // 342\n * from the router. That way, any state associated with the dispatch can go on                                // 75  // 343\n * the controller instance.                                                                                   // 76  // 344\n */                                                                                                           // 77  // 345\nRouteController.prototype.dispatch = function (stack, url, done) {                                            // 78  // 346\n  if (this._computation && !this._computation.stopped)                                                        // 79  // 347\n    throw new Error(\"RouteController computation is already running. Stop it first.\");                        // 80  // 348\n                                                                                                              // 81  // 349\n  var self = this;                                                                                            // 82  // 350\n                                                                                                              // 83  // 351\n  // break the computation chain with any parent comps                                                        // 84  // 352\n  Deps.nonreactive(function () {                                                                              // 85  // 353\n    Deps.autorun(function (comp) {                                                                            // 86  // 354\n      self._computation = comp;                                                                               // 87  // 355\n      stack.dispatch(url, self, done);                                                                        // 88  // 356\n    });                                                                                                       // 89  // 357\n  });                                                                                                         // 90  // 358\n                                                                                                              // 91  // 359\n  return self;                                                                                                // 92  // 360\n};                                                                                                            // 93  // 361\n                                                                                                              // 94  // 362\n/**                                                                                                           // 95  // 363\n * Run a route. When the router runs its middleware stack, it can run regular                                 // 96  // 364\n * middleware functions or it can run a route. There should only one route                                    // 97  // 365\n * object per path as where there may be many middleware functions.                                           // 98  // 366\n *                                                                                                            // 99  // 367\n * For example:                                                                                               // 100\n *                                                                                                            // 101\n *   \"/some/path\" => [middleware1, middleware2, route, middleware3]                                           // 102\n *                                                                                                            // 103\n * When a route is dispatched, it tells the controller to _runRoute so that                                   // 104\n * the controller can controll the process. At this point we should already be                                // 105\n * in a dispatch so a computation should already exist.                                                       // 106\n */                                                                                                           // 107\nRouteController.prototype._runRoute = function (route, url, done) {                                           // 108\n  var self = this;                                                                                            // 109\n                                                                                                              // 110\n                                                                                                              // 111\n  // this will now be where you can put your subscriptions                                                    // 112\n  // instead of waitOn. If you use waitOn, it will also                                                       // 113\n  // add the result to the wait list, but will also use                                                       // 114\n  // the loading hook.                                                                                        // 115\n  //                                                                                                          // 116\n  // Similar to waitOn, we'll collect these just like hooks. See the comment                                  // 117\n  // below on the waitOnList.                                                                                 // 118\n  //                                                                                                          // 119\n  // If you don't want the subscription to affect the readiness of the waitlist                               // 120\n  // then just don't return the subscription handle from the function.                                        // 121\n  var subsList = this._collectHooks('subscriptions');                                                         // 122\n  _.each(subsList, function (subFunc) {                                                                       // 123\n    self.wait(subFunc.call(self));                                                                            // 124\n  });                                                                                                         // 125\n                                                                                                              // 126\n                                                                                                              // 127\n  // waitOn isn't really a 'hook' but we use the _collectHooks method here                                    // 128\n  // because I want an array of values collected in the same order that we                                    // 129\n  // collect regular hooks (router global, route option, controller proto,                                    // 130\n  // controller inst object. Then we need to map over the results to make                                     // 131\n  // sure the thisArg is set to the controller instance.                                                      // 132\n  var waitOnList = this._collectHooks('waitOn');                                                              // 133\n                                                                                                              // 134\n  _.each(waitOnList, function (waitOn) {                                                                      // 135\n    self.wait(waitOn.call(self));                                                                             // 136\n  });                                                                                                         // 137\n                                                                                                              // 138\n  // if we have a waitOn option, the loading hook will be                                                     // 139\n  // added at the end of the before hook stack, right before                                                  // 140\n  // the action function.                                                                                     // 141\n  var useLoadingHook = waitOnList.length > 0;                                                                 // 142\n                                                                                                              // 143\n  // start the rendering transaction so we record which regions were rendered                                 // 144\n  // into so we can clear the unused regions later. the callback function will                                // 145\n  // get called automatically on the next flush, OR if beginRendering is called                               // 146\n  // again before the afterFlush callback.                                                                    // 147\n  var previousLayout;                                                                                         // 148\n  var previousMainTemplate;                                                                                   // 149\n                                                                                                              // 150\n  var getLayout = function () {                                                                               // 151\n    return Deps.nonreactive(function () {                                                                     // 152\n      return self._layout.template();                                                                         // 153\n    });                                                                                                       // 154\n  };                                                                                                          // 155\n                                                                                                              // 156\n  var getMainTemplate = function () {                                                                         // 157\n    return Deps.nonreactive(function () {                                                                     // 158\n      var region = self._layout._regions.main;                                                                // 159\n      return region && region.template();                                                                     // 160\n    });                                                                                                       // 161\n  };                                                                                                          // 162\n                                                                                                              // 163\n  var prevLayout = getLayout();                                                                               // 164\n  var prevMainTemplate = getMainTemplate();                                                                   // 165\n                                                                                                              // 166\n  this.beginRendering(function onCompleteRenderingTransaction (usedRegions) {                                 // 167\n    if (self.isStopped)                                                                                       // 168\n      return;                                                                                                 // 169\n                                                                                                              // 170\n    var curLayout = getLayout();                                                                              // 171\n    var curMainTemplate = getMainTemplate();                                                                  // 172\n                                                                                                              // 173\n    // in the case where we're using the same layout and main template                                        // 174\n    // across route changes don't automatically clear the unused regions                                      // 175\n    // because we could have static content in them that we want to keep!                                     // 176\n    if (prevLayout === curLayout && prevMainTemplate == curMainTemplate)                                      // 177\n      return;                                                                                                 // 178\n                                                                                                              // 179\n    var allRegions = self._layout.regionKeys();                                                               // 180\n    var unusedRegions = _.difference(allRegions, usedRegions);                                                // 181\n    _.each(unusedRegions, function (r) { self._layout.clear(r); });                                           // 182\n  });                                                                                                         // 183\n                                                                                                              // 184\n  this.layout(this.lookupOption('layoutTemplate'), {                                                          // 185\n    data: this.lookupOption('data')                                                                           // 186\n  });                                                                                                         // 187\n                                                                                                              // 188\n  var stack = new MiddlewareStack;                                                                            // 189\n  var onRunStack = new MiddlewareStack;                                                                       // 190\n  var onRerunStack = new MiddlewareStack;                                                                     // 191\n                                                                                                              // 192\n  onRunStack.append(this._collectHooks('onRun', 'load'), {where: 'client'});                                  // 193\n  onRerunStack.append(this._collectHooks('onRerun'), {where: 'client'});                                      // 194\n                                                                                                              // 195\n  stack.append(                                                                                               // 196\n    function onRun (req, res, next) {                                                                         // 197\n      if (this._computation.firstRun && !RouteController._hasJustReloaded) {                                  // 198\n        if (onRunStack.length > 0) {                                                                          // 199\n          onRunStack.dispatch(req.url, this, next);                                                           // 200\n        } else {                                                                                              // 201\n          next();                                                                                             // 202\n        }                                                                                                     // 203\n      } else {                                                                                                // 204\n        next();                                                                                               // 205\n      }                                                                                                       // 206\n      RouteController._hasJustReloaded = false;                                                               // 207\n    },                                                                                                        // 208\n                                                                                                              // 209\n    function onRerun (req, res, next) {                                                                       // 210\n      if (!this._computation.firstRun) {                                                                      // 211\n        if (onRerunStack.length > 0) {                                                                        // 212\n          onRerunStack.dispatch(req.url, this, next);                                                         // 213\n        } else {                                                                                              // 214\n          next();                                                                                             // 215\n        }                                                                                                     // 216\n      } else {                                                                                                // 217\n        next();                                                                                               // 218\n      }                                                                                                       // 219\n    }                                                                                                         // 220\n  , {where: 'client'});                                                                                       // 221\n                                                                                                              // 222\n  // make sure the loading hook is the first one to run                                                       // 223\n  // before any of the other onBeforeAction hooks.                                                            // 224\n  if (useLoadingHook) {                                                                                       // 225\n    stack.push(_.bind(Iron.Router.hooks.loading, self));                                                      // 226\n  }                                                                                                           // 227\n                                                                                                              // 228\n  var beforeHooks = this._collectHooks('onBeforeAction', 'before');                                           // 229\n  stack.append(beforeHooks, {where: 'client'});                                                               // 230\n                                                                                                              // 231\n  // make sure the action stack has at least one handler on it that defaults                                  // 232\n  // to the 'action' method                                                                                   // 233\n  if (route._actionStack.length === 0)                                                                        // 234\n    route._actionStack.push(route._path, 'action', route.options);                                            // 235\n                                                                                                              // 236\n  stack = stack.concat(route._actionStack);                                                                   // 237\n                                                                                                              // 238\n  // the \"context\" is the current instance of the RouteController                                             // 239\n  this._rendered = false;                                                                                     // 240\n  stack.dispatch(url, this, done);                                                                            // 241\n  // we put this in an afterFlush to let a redirected route have a chance to                                  // 242\n  //   start and to stop this route.                                                                          // 243\n  Deps.afterFlush(function() {                                                                                // 244\n    Iron.utils.warn(self._rendered || self.isStopped,                                                         // 245\n      \"Route dispatch never rendered. Did you forget to call this.next() in an onBeforeAction?\");             // 246\n  });                                                                                                         // 247\n                                                                                                              // 248\n  // run the after hooks. Note, at this point we're out of the middleware                                     // 249\n  // stack way of doing things. So after actions don't call this.next(). They                                 // 250\n  // run just like a regular hook. In contrast, before hooks have to call                                     // 251\n  // this.next() to progress to the next handler, just like Connect                                           // 252\n  // middleware.                                                                                              // 253\n  this.runHooks('onAfterAction', 'after');                                                                    // 254\n};                                                                                                            // 255\n                                                                                                              // 256\n/**                                                                                                           // 257\n * The default action for the controller simply renders the main template.                                    // 258\n */                                                                                                           // 259\nRouteController.prototype.action = function () {                                                              // 260\n  this.render();                                                                                              // 261\n};                                                                                                            // 262\n                                                                                                              // 263\n/**                                                                                                           // 264\n * Returns the name of the main template for this controller. If no explicit                                  // 265\n * value is found we will guess the name of the template.                                                     // 266\n */                                                                                                           // 267\nRouteController.prototype.lookupTemplate = function () {                                                      // 268\n  return this.lookupOption('template') ||                                                                     // 269\n    (this.router && this.router.toTemplateName(this.route.getName()));                                        // 270\n};                                                                                                            // 271\n                                                                                                              // 272\n/**                                                                                                           // 273\n * The regionTemplates for the RouteController.                                                               // 274\n */                                                                                                           // 275\nRouteController.prototype.lookupRegionTemplates = function () {                                               // 276\n  return this.lookupOption('yieldRegions') ||                                                                 // 277\n    // XXX: deprecated                                                                                        // 278\n    this.lookupOption('regionTemplates') ||                                                                   // 279\n    this.lookupOption('yieldTemplates') || {};                                                                // 280\n};                                                                                                            // 281\n                                                                                                              // 282\n/**                                                                                                           // 283\n * Overrides Controller.prototype.render to automatically render the                                          // 284\n * controller's main template and region templates or just render a region                                    // 285\n * template if the arguments are provided.                                                                    // 286\n */                                                                                                           // 287\nRouteController.prototype.render = function (template, options) {                                             // 288\n  this._rendered = true;                                                                                      // 289\n  if (arguments.length === 0) {                                                                               // 290\n    var template = this.lookupTemplate();                                                                     // 291\n    var result = RouteController.__super__.render.call(this, template);                                       // 292\n    this.renderRegions();                                                                                     // 293\n    return result;                                                                                            // 294\n  } else {                                                                                                    // 295\n    return RouteController.__super__.render.call(this, template, options);                                    // 296\n  }                                                                                                           // 297\n};                                                                                                            // 298\n                                                                                                              // 299\n/**                                                                                                           // 300\n * Render all region templates into their respective regions in the layout.                                   // 301\n */                                                                                                           // 302\nRouteController.prototype.renderRegions = function () {                                                       // 303\n  var self = this;                                                                                            // 304\n  var regionTemplates = this.lookupRegionTemplates();                                                         // 305\n                                                                                                              // 306\n  debug('regionTemplates: ' + JSON.stringify(regionTemplates));                                               // 307\n                                                                                                              // 308\n                                                                                                              // 309\n  // regionTemplates =>                                                                                       // 310\n  //   {                                                                                                      // 311\n  //     \"MyTemplate\": {to: 'MyRegion'}                                                                       // 312\n  //   }                                                                                                      // 313\n  _.each(regionTemplates, function (opts, templateName) {                                                     // 314\n    self.render(templateName, opts);                                                                          // 315\n  });                                                                                                         // 316\n};                                                                                                            // 317\n                                                                                                              // 318\n/**                                                                                                           // 319\n * Stop the RouteController.                                                                                  // 320\n */                                                                                                           // 321\nRouteController.prototype.stop = function () {                                                                // 322\n  RouteController.__super__.stop.call(this);                                                                  // 323\n                                                                                                              // 324\n  if (this._computation)                                                                                      // 325\n    this._computation.stop();                                                                                 // 326\n  this.runHooks('onStop', 'unload');                                                                          // 327\n  this.isStopped = true;                                                                                      // 328\n};                                                                                                            // 329\n                                                                                                              // 330\n/**                                                                                                           // 331\n * Just proxies to the go method of router.                                                                   // 332\n *                                                                                                            // 333\n * It used to have more significance. Keeping because people are used to it.                                  // 334\n */                                                                                                           // 335\nRouteController.prototype.redirect = function () {                                                            // 336\n  return this.router.go.apply(this.router, arguments);                                                        // 337\n};                                                                                                            // 338\n                                                                                                              // 339\n/**                                                                                                           // 340\n * Calls Meteor.subscribe but extends the handle with a wait() method.                                        // 341\n *                                                                                                            // 342\n * The wait method adds the subscription handle to this controller's                                          // 343\n * wait list. This is equivalent to returning a subscription handle                                           // 344\n * from the waitOn function. However, using the waitOn function has the                                       // 345\n * benefit that it will be called before any other hooks. So if you want                                      // 346\n * to use the \"loading\" hooks for example, you'll want the wait list populated                                // 347\n * before the hook runs.                                                                                      // 348\n *                                                                                                            // 349\n * Example:                                                                                                   // 350\n *                                                                                                            // 351\n *   this.subscribe('item', this.params._id).wait();                                                          // 352\n *                                                                                                            // 353\n *   if (this.ready()) {                                                                                      // 354\n *     ...                                                                                                    // 355\n *   } else {                                                                                                 // 356\n *     ...                                                                                                    // 357\n *   }                                                                                                        // 358\n */                                                                                                           // 359\nRouteController.prototype.subscribe = function (/* same as Meteor.subscribe */) {                             // 360\n  var self = this;                                                                                            // 361\n  var handle = Meteor.subscribe.apply(this, arguments);                                                       // 362\n  return _.extend(handle, {                                                                                   // 363\n    wait: function () {                                                                                       // 364\n      self.wait(this);                                                                                        // 365\n    }                                                                                                         // 366\n  });                                                                                                         // 367\n};                                                                                                            // 368\n                                                                                                              // 369\nif (Package.reload) {                                                                                         // 370\n  // just register the fact that a migration _has_ happened                                                   // 371\n  Package.reload.Reload._onMigrate('iron-router', function() { return [true, true] });                        // 372\n                                                                                                              // 373\n  // then when we come back up, check if it is set                                                            // 374\n  var data = Package.reload.Reload._migrationData('iron-router');                                             // 375\n  RouteController._hasJustReloaded = data;                                                                    // 376\n}                                                                                                             // 377\n                                                                                                              // 378\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 647\n                                                                                                                     // 648\n}).call(this);                                                                                                       // 649\n                                                                                                                     // 650\n                                                                                                                     // 651\n                                                                                                                     // 652\n                                                                                                                     // 653\n                                                                                                                     // 654\n                                                                                                                     // 655\n(function () {                                                                                                       // 656\n                                                                                                                     // 657\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 658\n//                                                                                                            //     // 659\n// packages/iron:router/lib/route.js                                                                          //     // 660\n//                                                                                                            //     // 661\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 662\n                                                                                                              //     // 663\nvar Url = Iron.Url;                                                                                           // 1   // 664\nvar MiddlewareStack = Iron.MiddlewareStack;                                                                   // 2   // 665\nvar assert = Iron.utils.assert;                                                                               // 3   // 666\n                                                                                                              // 4   // 667\n/*****************************************************************************/                               // 5   // 668\n/* Both */                                                                                                    // 6   // 669\n/*****************************************************************************/                               // 7   // 670\nRoute = function (path, fn, options) {                                                                        // 8   // 671\n  var route = function (req, res, next) {                                                                     // 9   // 672\n    var controller = this;                                                                                    // 10  // 673\n    controller.request = req;                                                                                 // 11  // 674\n    controller.response = res;                                                                                // 12  // 675\n    route.dispatch(req.url, controller, next);                                                                // 13  // 676\n  }                                                                                                           // 14  // 677\n                                                                                                              // 15  // 678\n  if (typeof fn === 'object') {                                                                               // 16  // 679\n    options = fn;                                                                                             // 17  // 680\n    fn = options.action;                                                                                      // 18  // 681\n  }                                                                                                           // 19  // 682\n                                                                                                              // 20  // 683\n  options = options || {};                                                                                    // 21  // 684\n                                                                                                              // 22  // 685\n  if (typeof path === 'string' && path.charAt(0) !== '/') {                                                   // 23  // 686\n    path = options.path ? options.path : '/' + path                                                           // 24  // 687\n  }                                                                                                           // 25  // 688\n                                                                                                              // 26  // 689\n  // extend the route function with properties from this instance and its                                     // 27  // 690\n  // prototype.                                                                                               // 28  // 691\n  _.extend(route, this.constructor.prototype);                                                                // 29  // 692\n                                                                                                              // 30  // 693\n  // always good to have options                                                                              // 31  // 694\n  options = route.options = options || {};                                                                    // 32  // 695\n                                                                                                              // 33  // 696\n  // the main action function as well as any HTTP VERB action functions will go                               // 34  // 697\n  // onto this stack.                                                                                         // 35  // 698\n  route._actionStack = new MiddlewareStack;                                                                   // 36  // 699\n                                                                                                              // 37  // 700\n  // any before hooks will go onto this stack to make sure they get executed                                  // 38  // 701\n  // before the action stack.                                                                                 // 39  // 702\n  route._beforeStack = new MiddlewareStack;                                                                   // 40  // 703\n  route._beforeStack.append(route.options.onBeforeAction);                                                    // 41  // 704\n  route._beforeStack.append(route.options.before);                                                            // 42  // 705\n                                                                                                              // 43  // 706\n  // after hooks get run after the action stack                                                               // 44  // 707\n  route._afterStack = new MiddlewareStack;                                                                    // 45  // 708\n  route._afterStack.append(route.options.onAfterAction);                                                      // 46  // 709\n  route._afterStack.append(route.options.after);                                                              // 47  // 710\n                                                                                                              // 48  // 711\n                                                                                                              // 49  // 712\n  // track which methods this route uses                                                                      // 50  // 713\n  route._methods = {};                                                                                        // 51  // 714\n                                                                                                              // 52  // 715\n  if (typeof fn === 'string') {                                                                               // 53  // 716\n    route._actionStack.push(path, _.extend(options, {                                                         // 54  // 717\n      template: fn                                                                                            // 55  // 718\n    }));                                                                                                      // 56  // 719\n  } else if (typeof fn === 'function' || typeof fn === 'object') {                                            // 57  // 720\n    route._actionStack.push(path, fn, options);                                                               // 58  // 721\n  }                                                                                                           // 59  // 722\n                                                                                                              // 60  // 723\n  route._path = path;                                                                                         // 61  // 724\n  return route;                                                                                               // 62  // 725\n};                                                                                                            // 63  // 726\n                                                                                                              // 64  // 727\n/**                                                                                                           // 65  // 728\n * The name of the route is actually stored on the handler since a route is a                                 // 66  // 729\n * function that has an unassignable \"name\" property.                                                         // 67  // 730\n */                                                                                                           // 68  // 731\nRoute.prototype.getName = function () {                                                                       // 69  // 732\n  return this.handler && this.handler.name;                                                                   // 70  // 733\n};                                                                                                            // 71  // 734\n                                                                                                              // 72  // 735\n/**                                                                                                           // 73  // 736\n * Returns an appropriate RouteController constructor the this Route.                                         // 74  // 737\n *                                                                                                            // 75  // 738\n * There are three possibilities:                                                                             // 76  // 739\n *                                                                                                            // 77  // 740\n *  1. controller option provided as a string on the route                                                    // 78  // 741\n *  2. a controller in the global namespace with the converted name of the route                              // 79  // 742\n *  3. a default RouteController                                                                              // 80  // 743\n *                                                                                                            // 81  // 744\n */                                                                                                           // 82  // 745\nRoute.prototype.findControllerConstructor = function () {                                                     // 83  // 746\n  var self = this;                                                                                            // 84  // 747\n                                                                                                              // 85  // 748\n  var resolve = function (name, opts) {                                                                       // 86  // 749\n    opts = opts || {};                                                                                        // 87  // 750\n    var C = Iron.utils.resolve(name);                                                                         // 88  // 751\n    if (!C || !RouteController.prototype.isPrototypeOf(C.prototype)) {                                        // 89  // 752\n      if (opts.supressErrors !== true)                                                                        // 90  // 753\n        throw new Error(\"RouteController '\" + name + \"' is not defined.\");                                    // 91  // 754\n      else                                                                                                    // 92  // 755\n        return undefined;                                                                                     // 93  // 756\n    } else {                                                                                                  // 94  // 757\n      return C;                                                                                               // 95  // 758\n    }                                                                                                         // 96  // 759\n  };                                                                                                          // 97  // 760\n                                                                                                              // 98  // 761\n  var convert = function (name) {                                                                             // 99  // 762\n    return self.router.toControllerName(name);                                                                // 100\n  };                                                                                                          // 101\n                                                                                                              // 102\n  var result;                                                                                                 // 103\n  var name = this.getName();                                                                                  // 104\n                                                                                                              // 105\n  // the controller was set directly                                                                          // 106\n  if (typeof this.options.controller === 'function')                                                          // 107\n    return this.options.controller;                                                                           // 108\n                                                                                                              // 109\n  // was the controller specified precisely by name? then resolve to an actual                                // 110\n  // javascript constructor value                                                                             // 111\n  else if (typeof this.options.controller === 'string')                                                       // 112\n    return resolve(this.options.controller);                                                                  // 113\n                                                                                                              // 114\n  // is there a default route controller configured?                                                          // 115\n  else if (this.router && this.router.options.controller) {                                                   // 116\n    if (typeof this.router.options.controller === 'function')                                                 // 117\n      return this.router.options.controller;                                                                  // 118\n                                                                                                              // 119\n    else if (typeof this.router.options.controller === 'string')                                              // 120\n      return resolve(this.router.options.controller);                                                         // 121\n  }                                                                                                           // 122\n                                                                                                              // 123\n  // otherwise do we have a name? try to convert the name to a controller name                                // 124\n  // and resolve it to a value                                                                                // 125\n  else if (name && (result = resolve(convert(name), {supressErrors: true})))                                  // 126\n    return result;                                                                                            // 127\n                                                                                                              // 128\n  // otherwise just use an anonymous route controller                                                         // 129\n  else                                                                                                        // 130\n    return RouteController;                                                                                   // 131\n};                                                                                                            // 132\n                                                                                                              // 133\n                                                                                                              // 134\n/**                                                                                                           // 135\n * Create a new controller for the route.                                                                     // 136\n */                                                                                                           // 137\nRoute.prototype.createController = function (options) {                                                       // 138\n  options = options || {};                                                                                    // 139\n  var C = this.findControllerConstructor();                                                                   // 140\n  options.route = this;                                                                                       // 141\n  var instance = new C(options);                                                                              // 142\n  return instance;                                                                                            // 143\n};                                                                                                            // 144\n                                                                                                              // 145\nRoute.prototype.setControllerParams = function (controller, url) {                                            // 146\n};                                                                                                            // 147\n                                                                                                              // 148\n/**                                                                                                           // 149\n * Dispatch into the route's middleware stack.                                                                // 150\n */                                                                                                           // 151\nRoute.prototype.dispatch = function (url, context, done) {                                                    // 152\n  // call runRoute on the controller which will behave similarly to the previous                              // 153\n  // version of IR.                                                                                           // 154\n  assert(context._runRoute, \"context doesn't have a _runRoute method\");                                       // 155\n  return context._runRoute(this, url, done);                                                                  // 156\n};                                                                                                            // 157\n                                                                                                              // 158\n/**                                                                                                           // 159\n * Returns a relative path for the route.                                                                     // 160\n */                                                                                                           // 161\nRoute.prototype.path = function (params, options) {                                                           // 162\n  return this.handler.resolve(params, options);                                                               // 163\n};                                                                                                            // 164\n                                                                                                              // 165\n/**                                                                                                           // 166\n * Return a fully qualified url for the route, given a set of parmeters and                                   // 167\n * options like hash and query.                                                                               // 168\n */                                                                                                           // 169\nRoute.prototype.url = function (params, options) {                                                            // 170\n  var path = this.path(params, options);                                                                      // 171\n  var host = (options && options.host) || Meteor.absoluteUrl();                                               // 172\n                                                                                                              // 173\n  if (host.charAt(host.length-1) === '/');                                                                    // 174\n    host = host.slice(0, host.length-1);                                                                      // 175\n  return host + path;                                                                                         // 176\n};                                                                                                            // 177\n                                                                                                              // 178\n/**                                                                                                           // 179\n * Return a params object for the route given a path.                                                         // 180\n */                                                                                                           // 181\nRoute.prototype.params = function (path) {                                                                    // 182\n  return this.handler.params(path);                                                                           // 183\n};                                                                                                            // 184\n                                                                                                              // 185\n/**                                                                                                           // 186\n * Add convenience methods for each HTTP verb.                                                                // 187\n *                                                                                                            // 188\n * Example:                                                                                                   // 189\n *  var route = router.route('/item')                                                                         // 190\n *    .get(function () { })                                                                                   // 191\n *    .post(function () { })                                                                                  // 192\n *    .put(function () { })                                                                                   // 193\n */                                                                                                           // 194\n_.each(HTTP_METHODS, function (method) {                                                                      // 195\n  Route.prototype[method] = function (fn) {                                                                   // 196\n    // track the method being used for OPTIONS requests.                                                      // 197\n    this._methods[method] = true;                                                                             // 198\n                                                                                                              // 199\n    this._actionStack.push(this._path, fn, {                                                                  // 200\n      // give each method a unique name so it doesn't clash with the route's                                  // 201\n      // name in the action stack                                                                             // 202\n      name: this.getName() + '_' + method.toLowerCase(),                                                      // 203\n      method: method,                                                                                         // 204\n                                                                                                              // 205\n      // for now just make the handler where the same as the route, presumably a                              // 206\n      // server route.                                                                                        // 207\n      where: this.handler.where,                                                                              // 208\n      mount: false                                                                                            // 209\n    });                                                                                                       // 210\n                                                                                                              // 211\n    return this;                                                                                              // 212\n  };                                                                                                          // 213\n});                                                                                                           // 214\n                                                                                                              // 215\nIron.Route = Route;                                                                                           // 216\n                                                                                                              // 217\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 881\n                                                                                                                     // 882\n}).call(this);                                                                                                       // 883\n                                                                                                                     // 884\n                                                                                                                     // 885\n                                                                                                                     // 886\n                                                                                                                     // 887\n                                                                                                                     // 888\n                                                                                                                     // 889\n(function () {                                                                                                       // 890\n                                                                                                                     // 891\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 892\n//                                                                                                            //     // 893\n// packages/iron:router/lib/router.js                                                                         //     // 894\n//                                                                                                            //     // 895\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 896\n                                                                                                              //     // 897\n/*****************************************************************************/                               // 1   // 898\n/* Imports */                                                                                                 // 2   // 899\n/*****************************************************************************/                               // 3   // 900\nvar MiddlewareStack = Iron.MiddlewareStack;                                                                   // 4   // 901\nvar Url = Iron.Url;                                                                                           // 5   // 902\nvar Layout = Iron.Layout;                                                                                     // 6   // 903\nvar warn = Iron.utils.warn;                                                                                   // 7   // 904\nvar assert = Iron.utils.assert;                                                                               // 8   // 905\n                                                                                                              // 9   // 906\nRouter = function (options) {                                                                                 // 10  // 907\n  // keep the same api throughout which is:                                                                   // 11  // 908\n  // fn(url, context, done);                                                                                  // 12  // 909\n  function router (req, res, next) {                                                                          // 13  // 910\n    //XXX this assumes no other routers on the parent stack which we should probably fix                      // 14  // 911\n    router.dispatch(req.url, {                                                                                // 15  // 912\n      request: req,                                                                                           // 16  // 913\n      response: res                                                                                           // 17  // 914\n    }, next);                                                                                                 // 18  // 915\n  }                                                                                                           // 19  // 916\n                                                                                                              // 20  // 917\n  // the main router stack                                                                                    // 21  // 918\n  router._stack = new MiddlewareStack;                                                                        // 22  // 919\n                                                                                                              // 23  // 920\n  // for storing global hooks like before, after, etc.                                                        // 24  // 921\n  router._globalHooks = {};                                                                                   // 25  // 922\n                                                                                                              // 26  // 923\n  // backward compat and quicker lookup of Route handlers vs. regular function                                // 27  // 924\n  // handlers.                                                                                                // 28  // 925\n  router.routes = [];                                                                                         // 29  // 926\n                                                                                                              // 30  // 927\n  // to make sure we don't have more than one route per path                                                  // 31  // 928\n  router.routes._byPath = {};                                                                                 // 32  // 929\n                                                                                                              // 33  // 930\n  // always good to have options                                                                              // 34  // 931\n  this.configure.call(router, options);                                                                       // 35  // 932\n                                                                                                              // 36  // 933\n  // add proto properties to the router function                                                              // 37  // 934\n  _.extend(router, this.constructor.prototype);                                                               // 38  // 935\n                                                                                                              // 39  // 936\n  // let client and server side routing doing different things here                                           // 40  // 937\n  this.init.call(router, options);                                                                            // 41  // 938\n                                                                                                              // 42  // 939\n  Meteor.startup(function () {                                                                                // 43  // 940\n    Meteor.defer(function () {                                                                                // 44  // 941\n      if (router.options.autoStart !== false)                                                                 // 45  // 942\n        router.start();                                                                                       // 46  // 943\n    });                                                                                                       // 47  // 944\n  });                                                                                                         // 48  // 945\n                                                                                                              // 49  // 946\n  return router;                                                                                              // 50  // 947\n};                                                                                                            // 51  // 948\n                                                                                                              // 52  // 949\nRouter.prototype.init = function (options) {};                                                                // 53  // 950\n                                                                                                              // 54  // 951\nRouter.prototype.configure = function (options) {                                                             // 55  // 952\n  var self = this;                                                                                            // 56  // 953\n                                                                                                              // 57  // 954\n  options = options || {};                                                                                    // 58  // 955\n                                                                                                              // 59  // 956\n  var toArray = function (value) {                                                                            // 60  // 957\n    if (!value)                                                                                               // 61  // 958\n      return [];                                                                                              // 62  // 959\n                                                                                                              // 63  // 960\n    if (_.isArray(value))                                                                                     // 64  // 961\n      return value;                                                                                           // 65  // 962\n                                                                                                              // 66  // 963\n    return [value];                                                                                           // 67  // 964\n  };                                                                                                          // 68  // 965\n                                                                                                              // 69  // 966\n  // e.g. before: fn OR before: [fn1, fn2]                                                                    // 70  // 967\n  _.each(Iron.Router.HOOK_TYPES, function eachHookType (type) {                                               // 71  // 968\n    if (options[type]) {                                                                                      // 72  // 969\n      _.each(toArray(options[type]), function eachHook (hook) {                                               // 73  // 970\n        self.addHook(type, hook);                                                                             // 74  // 971\n      });                                                                                                     // 75  // 972\n                                                                                                              // 76  // 973\n      delete options[type];                                                                                   // 77  // 974\n    }                                                                                                         // 78  // 975\n  });                                                                                                         // 79  // 976\n                                                                                                              // 80  // 977\n  this.options = this.options || {};                                                                          // 81  // 978\n  _.extend(this.options, options);                                                                            // 82  // 979\n                                                                                                              // 83  // 980\n  return this;                                                                                                // 84  // 981\n};                                                                                                            // 85  // 982\n                                                                                                              // 86  // 983\n/**                                                                                                           // 87  // 984\n * Just to support legacy calling. Doesn't really serve much purpose.                                         // 88  // 985\n */                                                                                                           // 89  // 986\nRouter.prototype.map = function (fn) {                                                                        // 90  // 987\n  return fn.call(this);                                                                                       // 91  // 988\n};                                                                                                            // 92  // 989\n                                                                                                              // 93  // 990\n/*                                                                                                            // 94  // 991\n * XXX removing for now until this is thought about more carefully.                                           // 95  // 992\nRouter.prototype.use = function (path, fn, opts) {                                                            // 96  // 993\n  if (typeof path === 'function') {                                                                           // 97  // 994\n    opts = fn || {};                                                                                          // 98  // 995\n    opts.mount = true;                                                                                        // 99  // 996\n    opts.where = opts.where || 'server';                                                                      // 100\n    this._stack.push(path, opts);                                                                             // 101\n  } else {                                                                                                    // 102\n    opts = opts || {};                                                                                        // 103\n    opts.mount = true;                                                                                        // 104\n    opts.where = opts.where || 'server';                                                                      // 105\n    this._stack.push(path, fn, opts);                                                                         // 106\n  }                                                                                                           // 107\n                                                                                                              // 108\n  return this;                                                                                                // 109\n};                                                                                                            // 110\n*/                                                                                                            // 111\n                                                                                                              // 112\n//XXX seems like we could put a params method on the route directly and make it reactive                      // 113\nRouter.prototype.route = function (path, fn, opts) {                                                          // 114\n  var typeOf = function (val) { return Object.prototype.toString.call(val); };                                // 115\n  assert(typeOf(path) === '[object String]' || typeOf(path) === '[object RegExp]', \"Router.route requires a path that is a string or regular expression.\");\n                                                                                                              // 117\n  if (typeof fn === 'object') {                                                                               // 118\n    opts = fn;                                                                                                // 119\n    fn = opts.action;                                                                                         // 120\n  }                                                                                                           // 121\n                                                                                                              // 122\n  var route = new Route(path, fn, opts);                                                                      // 123\n                                                                                                              // 124\n  opts = opts || {};                                                                                          // 125\n                                                                                                              // 126\n  // don't mount the route                                                                                    // 127\n  opts.mount = false;                                                                                         // 128\n                                                                                                              // 129\n  // stack expects a function which is exactly what a new Route returns!                                      // 130\n  var handler = this._stack.push(path, route, opts);                                                          // 131\n                                                                                                              // 132\n  handler.route = route;                                                                                      // 133\n  route.handler = handler;                                                                                    // 134\n  route.router = this;                                                                                        // 135\n                                                                                                              // 136\n  assert(!this.routes._byPath[handler.path],                                                                  // 137\n    \"A route for the path \" + JSON.stringify(handler.path) + \" already exists by the name of \" + JSON.stringify(handler.name) + \".\");\n  this.routes._byPath[handler.path] = route;                                                                  // 139\n                                                                                                              // 140\n  this.routes.push(route);                                                                                    // 141\n                                                                                                              // 142\n  if (typeof handler.name === 'string')                                                                       // 143\n    this.routes[handler.name] = route;                                                                        // 144\n                                                                                                              // 145\n  return route;                                                                                               // 146\n};                                                                                                            // 147\n                                                                                                              // 148\n/**                                                                                                           // 149\n * Find the first route for the given url and options.                                                        // 150\n */                                                                                                           // 151\nRouter.prototype.findFirstRoute = function (url) {                                                            // 152\n  var isMatch;                                                                                                // 153\n  var routeHandler;                                                                                           // 154\n  for (var i = 0; i < this.routes.length; i++) {                                                              // 155\n    route = this.routes[i];                                                                                   // 156\n                                                                                                              // 157\n    // only matches if the url matches AND the                                                                // 158\n    // current environment matches.                                                                           // 159\n    isMatch = route.handler.test(url, {                                                                       // 160\n      where: Meteor.isServer ? 'server' : 'client'                                                            // 161\n    });                                                                                                       // 162\n                                                                                                              // 163\n    if (isMatch)                                                                                              // 164\n      return route;                                                                                           // 165\n  }                                                                                                           // 166\n                                                                                                              // 167\n  return null;                                                                                                // 168\n};                                                                                                            // 169\n                                                                                                              // 170\nRouter.prototype.path = function (routeName, params, options) {                                               // 171\n  var route = this.routes[routeName];                                                                         // 172\n  warn(route, \"You called Router.path for a route named \" + JSON.stringify(routeName) + \" but that route doesn't seem to exist. Are you sure you created it?\");\n  return route && route.path(params, options);                                                                // 174\n};                                                                                                            // 175\n                                                                                                              // 176\nRouter.prototype.url = function (routeName, params, options) {                                                // 177\n  var route = this.routes[routeName];                                                                         // 178\n  warn(route, \"You called Router.url for a route named \" + JSON.stringify(routeName) + \" but that route doesn't seem to exist. Are you sure you created it?\");\n  return route && route.url(params, options);                                                                 // 180\n};                                                                                                            // 181\n                                                                                                              // 182\n/**                                                                                                           // 183\n * Create a new controller for a dispatch.                                                                    // 184\n */                                                                                                           // 185\nRouter.prototype.createController = function (url, context) {                                                 // 186\n  // see if there's a route for this url and environment                                                      // 187\n  // it's possible that we find a route but it's a client                                                     // 188\n  // route so we don't instantiate its controller and instead                                                 // 189\n  // use an anonymous controller to run the route.                                                            // 190\n  var route = this.findFirstRoute(url);                                                                       // 191\n  var controller;                                                                                             // 192\n                                                                                                              // 193\n  context = context || {};                                                                                    // 194\n                                                                                                              // 195\n  if (route)                                                                                                  // 196\n    // let the route decide what controller to use                                                            // 197\n    controller = route.createController({layout: this._layout});                                              // 198\n  else                                                                                                        // 199\n    // create an anonymous controller                                                                         // 200\n    controller = new RouteController({layout: this._layout});                                                 // 201\n                                                                                                              // 202\n  controller.router = this;                                                                                   // 203\n  controller.configureFromUrl(url, context, {reactive: false});                                               // 204\n  return controller;                                                                                          // 205\n};                                                                                                            // 206\n                                                                                                              // 207\nRouter.prototype.setTemplateNameConverter = function (fn) {                                                   // 208\n  this._templateNameConverter = fn;                                                                           // 209\n  return this;                                                                                                // 210\n};                                                                                                            // 211\n                                                                                                              // 212\nRouter.prototype.setControllerNameConverter = function (fn) {                                                 // 213\n  this._controllerNameConverter = fn;                                                                         // 214\n  return this;                                                                                                // 215\n};                                                                                                            // 216\n                                                                                                              // 217\nRouter.prototype.toTemplateName = function (str) {                                                            // 218\n  if (this._templateNameConverter)                                                                            // 219\n    return this._templateNameConverter(str);                                                                  // 220\n  else                                                                                                        // 221\n    return Iron.utils.classCase(str);                                                                         // 222\n};                                                                                                            // 223\n                                                                                                              // 224\nRouter.prototype.toControllerName = function (str) {                                                          // 225\n  if (this._controllerNameConverter)                                                                          // 226\n    return this._controllerNameConverter(str);                                                                // 227\n  else                                                                                                        // 228\n    return Iron.utils.classCase(str) + 'Controller';                                                          // 229\n};                                                                                                            // 230\n                                                                                                              // 231\n/**                                                                                                           // 232\n *                                                                                                            // 233\n * Add a hook to all routes. The hooks will apply to all routes,                                              // 234\n * unless you name routes to include or exclude via `only` and `except` options                               // 235\n *                                                                                                            // 236\n * @param {String} [type] one of 'load', 'unload', 'before' or 'after'                                        // 237\n * @param {Object} [options] Options to controll the hooks [optional]                                         // 238\n * @param {Function} [hook] Callback to run                                                                   // 239\n * @return {IronRouter}                                                                                       // 240\n * @api public                                                                                                // 241\n *                                                                                                            // 242\n */                                                                                                           // 243\n                                                                                                              // 244\nRouter.prototype.addHook = function(type, hook, options) {                                                    // 245\n  var self = this;                                                                                            // 246\n                                                                                                              // 247\n  options = options || {};                                                                                    // 248\n                                                                                                              // 249\n  var toArray = function (input) {                                                                            // 250\n    if (!input)                                                                                               // 251\n      return [];                                                                                              // 252\n    else if (_.isArray(input))                                                                                // 253\n      return input;                                                                                           // 254\n    else                                                                                                      // 255\n      return [input];                                                                                         // 256\n  }                                                                                                           // 257\n                                                                                                              // 258\n  if (options.only)                                                                                           // 259\n    options.only = toArray(options.only);                                                                     // 260\n  if (options.except)                                                                                         // 261\n    options.except = toArray(options.except);                                                                 // 262\n                                                                                                              // 263\n  var hooks = this._globalHooks[type] = this._globalHooks[type] || [];                                        // 264\n                                                                                                              // 265\n  var hookWithOptions = function () {                                                                         // 266\n    var thisArg = this;                                                                                       // 267\n    var args = arguments;                                                                                     // 268\n    // this allows us to bind hooks to options that get looked up when you call                               // 269\n    // this.lookupOption from within the hook. And it looks better to keep                                    // 270\n    // plugin/hook related options close to their definitions instead of                                      // 271\n    // Router.configure. But we use a dynamic variable so we don't have to                                    // 272\n    // pass the options explicitly as an argument and plugin creators can                                     // 273\n    // just use this.lookupOption which will follow the proper lookup chain from                              // 274\n    // \"this\", local options, dynamic variable options, route, router, etc.                                   // 275\n    return CurrentOptions.withValue(options, function () {                                                    // 276\n      return self.lookupHook(hook).apply(thisArg, args);                                                      // 277\n    });                                                                                                       // 278\n  };                                                                                                          // 279\n                                                                                                              // 280\n  hooks.push({options: options, hook: hookWithOptions});                                                      // 281\n  return this;                                                                                                // 282\n};                                                                                                            // 283\n                                                                                                              // 284\n/**                                                                                                           // 285\n * If the argument is a function return it directly. If it's a string, see if                                 // 286\n * there is a function in the Iron.Router.hooks namespace. Throw an error if we                               // 287\n * can't find the hook.                                                                                       // 288\n */                                                                                                           // 289\nRouter.prototype.lookupHook = function (nameOrFn) {                                                           // 290\n  var fn = nameOrFn;                                                                                          // 291\n                                                                                                              // 292\n  // if we already have a func just return it                                                                 // 293\n  if (_.isFunction(fn))                                                                                       // 294\n    return fn;                                                                                                // 295\n                                                                                                              // 296\n  // look up one of the out-of-box hooks like                                                                 // 297\n  // 'loaded or 'dataNotFound' if the nameOrFn is a                                                           // 298\n  // string                                                                                                   // 299\n  if (_.isString(fn)) {                                                                                       // 300\n    if (_.isFunction(Iron.Router.hooks[fn]))                                                                  // 301\n      return Iron.Router.hooks[fn];                                                                           // 302\n  }                                                                                                           // 303\n                                                                                                              // 304\n  // we couldn't find it so throw an error                                                                    // 305\n  throw new Error(\"No hook found named: \" + nameOrFn);                                                        // 306\n};                                                                                                            // 307\n                                                                                                              // 308\n/**                                                                                                           // 309\n *                                                                                                            // 310\n * Fetch the list of global hooks that apply to the given route name.                                         // 311\n * Hooks are defined by the .addHook() function above.                                                        // 312\n *                                                                                                            // 313\n * @param {String} [type] one of IronRouter.HOOK_TYPES                                                        // 314\n * @param {String} [name] the name of the route we are interested in                                          // 315\n * @return {[Function]} [hooks] an array of hooks to run                                                      // 316\n * @api public                                                                                                // 317\n *                                                                                                            // 318\n */                                                                                                           // 319\n                                                                                                              // 320\nRouter.prototype.getHooks = function(type, name) {                                                            // 321\n  var self = this;                                                                                            // 322\n  var hooks = [];                                                                                             // 323\n                                                                                                              // 324\n  _.each(this._globalHooks[type], function(hook) {                                                            // 325\n    var options = hook.options;                                                                               // 326\n                                                                                                              // 327\n    if (options.except && _.include(options.except, name))                                                    // 328\n      return [];                                                                                              // 329\n                                                                                                              // 330\n    if (options.only && ! _.include(options.only, name))                                                      // 331\n      return [];                                                                                              // 332\n                                                                                                              // 333\n    hooks.push(hook.hook);                                                                                    // 334\n  });                                                                                                         // 335\n                                                                                                              // 336\n  return hooks;                                                                                               // 337\n};                                                                                                            // 338\n                                                                                                              // 339\nRouter.HOOK_TYPES = [                                                                                         // 340\n  'onRun',                                                                                                    // 341\n  'onRerun',                                                                                                  // 342\n  'onBeforeAction',                                                                                           // 343\n  'onAfterAction',                                                                                            // 344\n  'onStop',                                                                                                   // 345\n                                                                                                              // 346\n  // not technically a hook but we'll use it                                                                  // 347\n  // in a similar way. This will cause waitOn                                                                 // 348\n  // to be added as a method to the Router and then                                                           // 349\n  // it can be selectively applied to specific routes                                                         // 350\n  'waitOn',                                                                                                   // 351\n  'subscriptions',                                                                                            // 352\n                                                                                                              // 353\n  // legacy hook types but we'll let them slide                                                               // 354\n  'load', // onRun                                                                                            // 355\n  'before', // onBeforeAction                                                                                 // 356\n  'after', // onAfterAction                                                                                   // 357\n  'unload' // onStop                                                                                          // 358\n];                                                                                                            // 359\n                                                                                                              // 360\n/**                                                                                                           // 361\n * A namespace for hooks keyed by name.                                                                       // 362\n */                                                                                                           // 363\nRouter.hooks = {};                                                                                            // 364\n                                                                                                              // 365\n                                                                                                              // 366\n/**                                                                                                           // 367\n * A namespace for plugin functions keyed by name.                                                            // 368\n */                                                                                                           // 369\nRouter.plugins = {};                                                                                          // 370\n                                                                                                              // 371\n/**                                                                                                           // 372\n * Auto add helper mtehods for all the hooks.                                                                 // 373\n */                                                                                                           // 374\n                                                                                                              // 375\n_.each(Router.HOOK_TYPES, function (type) {                                                                   // 376\n  Router.prototype[type] = function (hook, options) {                                                         // 377\n    this.addHook(type, hook, options);                                                                        // 378\n  };                                                                                                          // 379\n});                                                                                                           // 380\n                                                                                                              // 381\n/**                                                                                                           // 382\n * Add a plugin to the router instance.                                                                       // 383\n */                                                                                                           // 384\nRouter.prototype.plugin = function (nameOrFn, options) {                                                      // 385\n  var func;                                                                                                   // 386\n                                                                                                              // 387\n  if (typeof nameOrFn === 'function')                                                                         // 388\n    func = nameOrFn;                                                                                          // 389\n  else if (typeof nameOrFn === 'string')                                                                      // 390\n    func = Iron.Router.plugins[nameOrFn];                                                                     // 391\n                                                                                                              // 392\n  if (!func)                                                                                                  // 393\n    throw new Error(\"No plugin found named \" + JSON.stringify(nameOrFn));                                     // 394\n                                                                                                              // 395\n  // fn(router, options)                                                                                      // 396\n  func.call(this, this, options);                                                                             // 397\n                                                                                                              // 398\n  return this;                                                                                                // 399\n};                                                                                                            // 400\n                                                                                                              // 401\nIron.Router = Router;                                                                                         // 402\n                                                                                                              // 403\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1301\n                                                                                                                     // 1302\n}).call(this);                                                                                                       // 1303\n                                                                                                                     // 1304\n                                                                                                                     // 1305\n                                                                                                                     // 1306\n                                                                                                                     // 1307\n                                                                                                                     // 1308\n                                                                                                                     // 1309\n(function () {                                                                                                       // 1310\n                                                                                                                     // 1311\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1312\n//                                                                                                            //     // 1313\n// packages/iron:router/lib/hooks.js                                                                          //     // 1314\n//                                                                                                            //     // 1315\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1316\n                                                                                                              //     // 1317\nif (typeof Template !== 'undefined') {                                                                        // 1   // 1318\n  /**                                                                                                         // 2   // 1319\n   * The default anonymous loading template.                                                                  // 3   // 1320\n   */                                                                                                         // 4   // 1321\n  var defaultLoadingTemplate = new Template('DefaultLoadingTemplate', function () {                           // 5   // 1322\n    return 'Loading...';                                                                                      // 6   // 1323\n  });                                                                                                         // 7   // 1324\n                                                                                                              // 8   // 1325\n  /**                                                                                                         // 9   // 1326\n   * The default anonymous data not found template.                                                           // 10  // 1327\n   */                                                                                                         // 11  // 1328\n  var defaultDataNotFoundTemplate = new Template('DefaultDataNotFoundTemplate', function () {                 // 12  // 1329\n    return 'Data not found...';                                                                               // 13  // 1330\n  });                                                                                                         // 14  // 1331\n}                                                                                                             // 15  // 1332\n                                                                                                              // 16  // 1333\n/**                                                                                                           // 17  // 1334\n * Automatically render a loading template into the main region if the                                        // 18  // 1335\n * controller is not ready (i.e. this.ready() is false). If no loadingTemplate                                // 19  // 1336\n * is defined use some default text.                                                                          // 20  // 1337\n */                                                                                                           // 21  // 1338\n                                                                                                              // 22  // 1339\nRouter.hooks.loading = function () {                                                                          // 23  // 1340\n  // if we're ready just pass through                                                                         // 24  // 1341\n  if (this.ready()) {                                                                                         // 25  // 1342\n    this.next();                                                                                              // 26  // 1343\n    return;                                                                                                   // 27  // 1344\n  }                                                                                                           // 28  // 1345\n                                                                                                              // 29  // 1346\n  var template = this.lookupOption('loadingTemplate');                                                        // 30  // 1347\n  this.render(template || defaultLoadingTemplate);                                                            // 31  // 1348\n  this.renderRegions();                                                                                       // 32  // 1349\n};                                                                                                            // 33  // 1350\n                                                                                                              // 34  // 1351\n/**                                                                                                           // 35  // 1352\n * Render a \"data not found\" template if a global data function returns a falsey                              // 36  // 1353\n * value                                                                                                      // 37  // 1354\n */                                                                                                           // 38  // 1355\nRouter.hooks.dataNotFound = function () {                                                                     // 39  // 1356\n  if (!this.ready()) {                                                                                        // 40  // 1357\n    this.next();                                                                                              // 41  // 1358\n    return;                                                                                                   // 42  // 1359\n  }                                                                                                           // 43  // 1360\n                                                                                                              // 44  // 1361\n  var data = this.lookupOption('data');                                                                       // 45  // 1362\n  var dataValue;                                                                                              // 46  // 1363\n  var template = this.lookupOption('notFoundTemplate');                                                       // 47  // 1364\n                                                                                                              // 48  // 1365\n  if (typeof data === 'function') {                                                                           // 49  // 1366\n    if (!(dataValue = data.call(this))) {                                                                     // 50  // 1367\n      this.render(template || defaultDataNotFoundTemplate);                                                   // 51  // 1368\n      this.renderRegions();                                                                                   // 52  // 1369\n      return;                                                                                                 // 53  // 1370\n    }                                                                                                         // 54  // 1371\n  }                                                                                                           // 55  // 1372\n                                                                                                              // 56  // 1373\n  // okay never mind just pass along now                                                                      // 57  // 1374\n  this.next();                                                                                                // 58  // 1375\n};                                                                                                            // 59  // 1376\n                                                                                                              // 60  // 1377\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1378\n                                                                                                                     // 1379\n}).call(this);                                                                                                       // 1380\n                                                                                                                     // 1381\n                                                                                                                     // 1382\n                                                                                                                     // 1383\n                                                                                                                     // 1384\n                                                                                                                     // 1385\n                                                                                                                     // 1386\n(function () {                                                                                                       // 1387\n                                                                                                                     // 1388\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1389\n//                                                                                                            //     // 1390\n// packages/iron:router/lib/helpers.js                                                                        //     // 1391\n//                                                                                                            //     // 1392\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1393\n                                                                                                              //     // 1394\n/*****************************************************************************/                               // 1   // 1395\n/* Imports */                                                                                                 // 2   // 1396\n/*****************************************************************************/                               // 3   // 1397\nvar warn = Iron.utils.warn;                                                                                   // 4   // 1398\nvar DynamicTemplate = Iron.DynamicTemplate;                                                                   // 5   // 1399\nvar debug = Iron.utils.debug('iron:router <helpers>');                                                        // 6   // 1400\n                                                                                                              // 7   // 1401\n/*****************************************************************************/                               // 8   // 1402\n/* UI Helpers */                                                                                              // 9   // 1403\n/*****************************************************************************/                               // 10  // 1404\n                                                                                                              // 11  // 1405\n/**                                                                                                           // 12  // 1406\n * Render the Router to a specific location on the page instead of the                                        // 13  // 1407\n * document.body.                                                                                             // 14  // 1408\n */                                                                                                           // 15  // 1409\nUI.registerHelper('Router', new Blaze.Template('Router', function () {                                        // 16  // 1410\n  return Router.createView();                                                                                 // 17  // 1411\n}));                                                                                                          // 18  // 1412\n                                                                                                              // 19  // 1413\n/**                                                                                                           // 20  // 1414\n * Returns a relative path given a route name, data context and optional query                                // 21  // 1415\n * and hash parameters.                                                                                       // 22  // 1416\n */                                                                                                           // 23  // 1417\nUI.registerHelper('pathFor', function (options) {                                                             // 24  // 1418\n  var routeName;                                                                                              // 25  // 1419\n                                                                                                              // 26  // 1420\n  if (arguments.length > 1) {                                                                                 // 27  // 1421\n    routeName = arguments[0];                                                                                 // 28  // 1422\n    options = arguments[1] || {};                                                                             // 29  // 1423\n  }                                                                                                           // 30  // 1424\n                                                                                                              // 31  // 1425\n  var opts = options && options.hash;                                                                         // 32  // 1426\n                                                                                                              // 33  // 1427\n  opts = opts || {};                                                                                          // 34  // 1428\n                                                                                                              // 35  // 1429\n  var path = '';                                                                                              // 36  // 1430\n  var query = opts.query;                                                                                     // 37  // 1431\n  var hash = opts.hash;                                                                                       // 38  // 1432\n  var routeName = routeName || opts.route;                                                                    // 39  // 1433\n  var data = _.extend({}, opts.data || this);                                                                 // 40  // 1434\n                                                                                                              // 41  // 1435\n  var route = Router.routes[routeName];                                                                       // 42  // 1436\n  warn(route, \"pathFor couldn't find a route named \" + JSON.stringify(routeName));                            // 43  // 1437\n                                                                                                              // 44  // 1438\n  if (route) {                                                                                                // 45  // 1439\n    _.each(route.handler.compiledUrl.keys, function (keyConfig) {                                             // 46  // 1440\n      var key = keyConfig.name;                                                                               // 47  // 1441\n      if (_.has(opts, key)) {                                                                                 // 48  // 1442\n        data[key] = EJSON.clone(opts[key]);                                                                   // 49  // 1443\n                                                                                                              // 50  // 1444\n        // so the option doesn't end up on the element as an attribute                                        // 51  // 1445\n        delete opts[key];                                                                                     // 52  // 1446\n      }                                                                                                       // 53  // 1447\n    });                                                                                                       // 54  // 1448\n                                                                                                              // 55  // 1449\n    path = route.path(data, {query: query, hash: hash});                                                      // 56  // 1450\n  }                                                                                                           // 57  // 1451\n                                                                                                              // 58  // 1452\n  return path;                                                                                                // 59  // 1453\n});                                                                                                           // 60  // 1454\n                                                                                                              // 61  // 1455\n/**                                                                                                           // 62  // 1456\n * Returns a relative path given a route name, data context and optional query                                // 63  // 1457\n * and hash parameters.                                                                                       // 64  // 1458\n */                                                                                                           // 65  // 1459\nUI.registerHelper('urlFor', function (options) {                                                              // 66  // 1460\n  var routeName;                                                                                              // 67  // 1461\n                                                                                                              // 68  // 1462\n  if (arguments.length > 1) {                                                                                 // 69  // 1463\n    routeName = arguments[0];                                                                                 // 70  // 1464\n    options = arguments[1] || {};                                                                             // 71  // 1465\n  }                                                                                                           // 72  // 1466\n                                                                                                              // 73  // 1467\n  var opts = options && options.hash;                                                                         // 74  // 1468\n                                                                                                              // 75  // 1469\n  opts = opts || {};                                                                                          // 76  // 1470\n  var url = '';                                                                                               // 77  // 1471\n  var query = opts.query;                                                                                     // 78  // 1472\n  var hash = opts.hash;                                                                                       // 79  // 1473\n  var routeName = routeName || opts.route;                                                                    // 80  // 1474\n  var data = _.extend({}, opts.data || this);                                                                 // 81  // 1475\n                                                                                                              // 82  // 1476\n  var route = Router.routes[routeName];                                                                       // 83  // 1477\n  warn(route, \"urlFor couldn't find a route named \" + JSON.stringify(routeName));                             // 84  // 1478\n                                                                                                              // 85  // 1479\n  if (route) {                                                                                                // 86  // 1480\n    _.each(route.handler.compiledUrl.keys, function (keyConfig) {                                             // 87  // 1481\n      var key = keyConfig.name;                                                                               // 88  // 1482\n      if (_.has(opts, key)) {                                                                                 // 89  // 1483\n        data[key] = EJSON.clone(opts[key]);                                                                   // 90  // 1484\n                                                                                                              // 91  // 1485\n        // so the option doesn't end up on the element as an attribute                                        // 92  // 1486\n        delete opts[key];                                                                                     // 93  // 1487\n      }                                                                                                       // 94  // 1488\n    });                                                                                                       // 95  // 1489\n                                                                                                              // 96  // 1490\n    url = route.url(data, {query: query, hash: hash});                                                        // 97  // 1491\n  }                                                                                                           // 98  // 1492\n                                                                                                              // 99  // 1493\n  return url;                                                                                                 // 100\n});                                                                                                           // 101\n                                                                                                              // 102\n/**                                                                                                           // 103\n * Create a link with optional content block.                                                                 // 104\n *                                                                                                            // 105\n * Example:                                                                                                   // 106\n *   {{#linkTo route=\"one\" query=\"query\" hash=\"hash\" class=\"my-cls\"}}                                         // 107\n *    <div>My Custom Link Content</div>                                                                       // 108\n *   {{/linkTo}}                                                                                              // 109\n */                                                                                                           // 110\nUI.registerHelper('linkTo', new Blaze.Template('linkTo', function () {                                        // 111\n  var self = this;                                                                                            // 112\n  var opts = DynamicTemplate.getInclusionArguments(this);                                                     // 113\n                                                                                                              // 114\n  if (typeof opts !== 'object')                                                                               // 115\n    throw new Error(\"linkTo options must be key value pairs such as {{#linkTo route='my.route.name'}}. You passed: \" + JSON.stringify(opts));\n                                                                                                              // 117\n  opts = opts || {};                                                                                          // 118\n  var path = '';                                                                                              // 119\n  var query = opts.query;                                                                                     // 120\n  var hash = opts.hash;                                                                                       // 121\n  var routeName = opts.route;                                                                                 // 122\n  var data = _.extend({}, opts.data || DynamicTemplate.getParentDataContext(this));                           // 123\n  var route = Router.routes[routeName];                                                                       // 124\n  var paramKeys;                                                                                              // 125\n                                                                                                              // 126\n  warn(route, \"linkTo couldn't find a route named \" + JSON.stringify(routeName));                             // 127\n                                                                                                              // 128\n  if (route) {                                                                                                // 129\n    _.each(route.handler.compiledUrl.keys, function (keyConfig) {                                             // 130\n      var key = keyConfig.name;                                                                               // 131\n      if (_.has(opts, key)) {                                                                                 // 132\n        data[key] = EJSON.clone(opts[key]);                                                                   // 133\n                                                                                                              // 134\n        // so the option doesn't end up on the element as an attribute                                        // 135\n        delete opts[key];                                                                                     // 136\n      }                                                                                                       // 137\n    });                                                                                                       // 138\n                                                                                                              // 139\n    path = route.path(data, {query: query, hash: hash});                                                      // 140\n  }                                                                                                           // 141\n                                                                                                              // 142\n  // anything that isn't one of our keywords we'll assume is an attributed                                    // 143\n  // intended for the <a> tag                                                                                 // 144\n  var attrs = _.omit(opts, 'route', 'query', 'hash', 'data');                                                 // 145\n  attrs.href = path;                                                                                          // 146\n                                                                                                              // 147\n  return Blaze.With(function () {                                                                             // 148\n    return DynamicTemplate.getParentDataContext(self);                                                        // 149\n  }, function () {                                                                                            // 150\n    return HTML.A(attrs, self.templateContentBlock);                                                          // 151\n  });                                                                                                         // 152\n}));                                                                                                          // 153\n                                                                                                              // 154\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1549\n                                                                                                                     // 1550\n}).call(this);                                                                                                       // 1551\n                                                                                                                     // 1552\n                                                                                                                     // 1553\n                                                                                                                     // 1554\n                                                                                                                     // 1555\n                                                                                                                     // 1556\n                                                                                                                     // 1557\n(function () {                                                                                                       // 1558\n                                                                                                                     // 1559\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1560\n//                                                                                                            //     // 1561\n// packages/iron:router/lib/router_client.js                                                                  //     // 1562\n//                                                                                                            //     // 1563\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1564\n                                                                                                              //     // 1565\nvar MiddlewareStack = Iron.MiddlewareStack;                                                                   // 1   // 1566\nvar Url = Iron.Url;                                                                                           // 2   // 1567\nvar Layout = Iron.Layout;                                                                                     // 3   // 1568\nvar assert = Iron.utils.assert;                                                                               // 4   // 1569\nvar DEFAULT_NOT_FOUND_TEMPLATE = '__IronRouterNotFound__';                                                    // 5   // 1570\nvar NO_ROUTES_TEMPLATE = '__IronRouterNoRoutes__';                                                            // 6   // 1571\n                                                                                                              // 7   // 1572\n/**                                                                                                           // 8   // 1573\n * Client specific initialization.                                                                            // 9   // 1574\n */                                                                                                           // 10  // 1575\nRouter.prototype.init = function (options) {                                                                  // 11  // 1576\n  var self = this;                                                                                            // 12  // 1577\n                                                                                                              // 13  // 1578\n  // the current RouteController from a dispatch                                                              // 14  // 1579\n  self._currentController = null;                                                                             // 15  // 1580\n                                                                                                              // 16  // 1581\n  // the current route                                                                                        // 17  // 1582\n  self._currentRoute = null;                                                                                  // 18  // 1583\n                                                                                                              // 19  // 1584\n  // the current() dep                                                                                        // 20  // 1585\n  self._currentDep = new Deps.Dependency;                                                                     // 21  // 1586\n                                                                                                              // 22  // 1587\n  // the location computation                                                                                 // 23  // 1588\n  self._locationComputation = null;                                                                           // 24  // 1589\n                                                                                                              // 25  // 1590\n  // the ui layout for the router                                                                             // 26  // 1591\n  self._layout = new Layout({template: self.options.layoutTemplate});                                         // 27  // 1592\n                                                                                                              // 28  // 1593\n  Meteor.startup(function () {                                                                                // 29  // 1594\n    setTimeout(function maybeAutoInsertRouter () {                                                            // 30  // 1595\n      if (self.options.autoRender !== false)                                                                  // 31  // 1596\n        self.insert({el: document.body});                                                                     // 32  // 1597\n    });                                                                                                       // 33  // 1598\n  });                                                                                                         // 34  // 1599\n};                                                                                                            // 35  // 1600\n                                                                                                              // 36  // 1601\n/**                                                                                                           // 37  // 1602\n * Programmatically insert the router into document.body or a particular                                      // 38  // 1603\n * element with {el: 'selector'}                                                                              // 39  // 1604\n */                                                                                                           // 40  // 1605\nRouter.prototype.insert = function (options) {                                                                // 41  // 1606\n  this._layout.insert(options);                                                                               // 42  // 1607\n  return this;                                                                                                // 43  // 1608\n};                                                                                                            // 44  // 1609\n                                                                                                              // 45  // 1610\n/**                                                                                                           // 46  // 1611\n * Returns a layout view that can be used in a UI helper to render the router                                 // 47  // 1612\n * to a particular place.                                                                                     // 48  // 1613\n */                                                                                                           // 49  // 1614\nRouter.prototype.createView = function () {                                                                   // 50  // 1615\n  return this._layout.create();                                                                               // 51  // 1616\n};                                                                                                            // 52  // 1617\n                                                                                                              // 53  // 1618\nRouter.prototype.lookupNotFoundTemplate = function () {                                                       // 54  // 1619\n  if (this.options.notFoundTemplate)                                                                          // 55  // 1620\n    return this.options.notFoundTemplate;                                                                     // 56  // 1621\n                                                                                                              // 57  // 1622\n  return (this.routes.length === 0) ? NO_ROUTES_TEMPLATE : DEFAULT_NOT_FOUND_TEMPLATE;                        // 58  // 1623\n};                                                                                                            // 59  // 1624\n                                                                                                              // 60  // 1625\nRouter.prototype.lookupLayoutTemplate = function () {                                                         // 61  // 1626\n  return this.options.layoutTemplate;                                                                         // 62  // 1627\n};                                                                                                            // 63  // 1628\n                                                                                                              // 64  // 1629\nRouter.prototype.dispatch = function (url, context, done) {                                                   // 65  // 1630\n  var self = this;                                                                                            // 66  // 1631\n                                                                                                              // 67  // 1632\n  assert(typeof url === 'string', \"expected url string in router dispatch\");                                  // 68  // 1633\n                                                                                                              // 69  // 1634\n  var controller = this._currentController;                                                                   // 70  // 1635\n  var route = this.findFirstRoute(url);                                                                       // 71  // 1636\n  var prevRoute = this._currentRoute;                                                                         // 72  // 1637\n                                                                                                              // 73  // 1638\n  this._currentRoute = route;                                                                                 // 74  // 1639\n                                                                                                              // 75  // 1640\n                                                                                                              // 76  // 1641\n  // even if we already have an existing controller we'll stop it                                             // 77  // 1642\n  // and start it again. But since the actual controller instance                                             // 78  // 1643\n  // hasn't changed, the helpers won't need to rerun.                                                         // 79  // 1644\n  if (this._currentController)                                                                                // 80  // 1645\n    this._currentController.stop();                                                                           // 81  // 1646\n                                                                                                              // 82  // 1647\n  //XXX Instead of this, let's consider making all RouteControllers                                           // 83  // 1648\n  //    singletons that get configured at dispatch. Will revisit this                                         // 84  // 1649\n  //    after v1.0.                                                                                           // 85  // 1650\n  if (controller && route && prevRoute === route) {                                                           // 86  // 1651\n    // this will change the parameters dep so anywhere you call                                               // 87  // 1652\n    // this.getParams will rerun if the parameters have changed                                               // 88  // 1653\n    controller.configureFromUrl(url, context);                                                                // 89  // 1654\n  } else {                                                                                                    // 90  // 1655\n    // Looks like we're on a new route so we'll create a new                                                  // 91  // 1656\n    // controller from scratch.                                                                               // 92  // 1657\n    controller = this.createController(url, context);                                                         // 93  // 1658\n  }                                                                                                           // 94  // 1659\n                                                                                                              // 95  // 1660\n  this._currentController = controller;                                                                       // 96  // 1661\n                                                                                                              // 97  // 1662\n  controller.dispatch(self._stack, url, function onRouterDispatchCompleted (err) {                            // 98  // 1663\n    if (err)                                                                                                  // 99  // 1664\n      throw err;                                                                                              // 100\n    else {                                                                                                    // 101\n      if (!controller.isHandled()) {                                                                          // 102\n        // if we aren't at the initial state, we haven't yet given the server                                 // 103\n        //   a true chance to handle this URL. We'll try.                                                     // 104\n        //   if the server CAN'T handle the router, we'll be back,                                            // 105\n        //   but as the very first route handled on the client,                                               // 106\n        //   and so initial will be true.                                                                     // 107\n        var state = Deps.nonreactive(function () { return controller.location.get().options.historyState; }); // 108\n                                                                                                              // 109\n        if (state && state.initial === true) {                                                                // 110\n          // looks like there's no handlers so let's give a default                                           // 111\n          // not found message! Use the layout defined in global config                                       // 112\n          // if we have one.                                                                                  // 113\n          //                                                                                                  // 114\n          // NOTE: this => controller                                                                         // 115\n          this.layout(this.lookupOption('layoutTemplate'), {data: {url: this.url}});                          // 116\n                                                                                                              // 117\n          var notFoundTemplate = this.lookupOption('notFoundTemplate');                                       // 118\n                                                                                                              // 119\n          if (!notFoundTemplate)                                                                              // 120\n            notFoundTemplate = (self.routes.length === 0) ? NO_ROUTES_TEMPLATE : DEFAULT_NOT_FOUND_TEMPLATE;  // 121\n          this.render(notFoundTemplate, {data: {url: this.url}});                                             // 122\n          this.renderRegions();                                                                               // 123\n                                                                                                              // 124\n          // kind of janky but will work for now. this makes sure                                             // 125\n          // that any downstream functions see that this route has been                                       // 126\n          // handled so we don't get into an infinite loop with the                                           // 127\n          // server.                                                                                          // 128\n          controller.isHandled = function () { return true; };                                                // 129\n        }                                                                                                     // 130\n                                                                                                              // 131\n        return done && done.call(controller);                                                                 // 132\n      }                                                                                                       // 133\n    }                                                                                                         // 134\n  });                                                                                                         // 135\n                                                                                                              // 136\n  // Note: even if the controller didn't actually change I change the                                         // 137\n  // currentDep since if we did a dispatch, the url changed and that                                          // 138\n  // means either we have a new controller OR the parameters for an                                           // 139\n  // existing controller have changed.                                                                        // 140\n  if (this._currentController == controller)                                                                  // 141\n    this._currentDep.changed();                                                                               // 142\n                                                                                                              // 143\n  return controller;                                                                                          // 144\n};                                                                                                            // 145\n                                                                                                              // 146\n/**                                                                                                           // 147\n * The current controller object.                                                                             // 148\n */                                                                                                           // 149\nRouter.prototype.current = function () {                                                                      // 150\n  this._currentDep.depend();                                                                                  // 151\n  return this._currentController;                                                                             // 152\n};                                                                                                            // 153\n                                                                                                              // 154\n/*                                                                                                            // 155\n * Scroll to a specific location on the page.                                                                 // 156\n * Overridable by applications that want to customize this behavior.                                          // 157\n */                                                                                                           // 158\nRouter.prototype._scrollToHash = function (hashValue) {                                                       // 159\n  try {                                                                                                       // 160\n    var $target = $(hashValue);                                                                               // 161\n    $('html, body').scrollTop($target.offset().top);                                                          // 162\n  } catch (e) {                                                                                               // 163\n    // in case the hashValue is bogus just bail out                                                           // 164\n  }                                                                                                           // 165\n};                                                                                                            // 166\n                                                                                                              // 167\n/**                                                                                                           // 168\n * Start reacting to location changes.                                                                        // 169\n */                                                                                                           // 170\nRouter.prototype.start = function () {                                                                        // 171\n  var self = this;                                                                                            // 172\n  var prevLocation;                                                                                           // 173\n                                                                                                              // 174\n  self._locationComputation = Deps.autorun(function onLocationChange (c) {                                    // 175\n    var controller;                                                                                           // 176\n    var loc = Iron.Location.get();                                                                            // 177\n    var hash, pathname, search;                                                                               // 178\n    var current = self._currentController;                                                                    // 179\n                                                                                                              // 180\n    if (!current || (prevLocation && prevLocation.path !== loc.path)) {                                       // 181\n      controller = self.dispatch(loc.href, null, function onRouterStartDispatchCompleted (error) {            // 182\n        // if we're going to the server cancel the url change                                                 // 183\n        if (!this.isHandled()) {                                                                              // 184\n          loc.cancelUrlChange();                                                                              // 185\n          window.location = loc.path;                                                                         // 186\n        }                                                                                                     // 187\n      });                                                                                                     // 188\n    } else {                                                                                                  // 189\n      self._scrollToHash(loc.hash);                                                                           // 190\n      // either the query or hash has changed so configure the current                                        // 191\n      // controller again.                                                                                    // 192\n      current.configureFromUrl(loc.href);                                                                     // 193\n    }                                                                                                         // 194\n                                                                                                              // 195\n    prevLocation = loc;                                                                                       // 196\n  });                                                                                                         // 197\n};                                                                                                            // 198\n                                                                                                              // 199\n/**                                                                                                           // 200\n * Stop all computations and put us in a not started state.                                                   // 201\n */                                                                                                           // 202\nRouter.prototype.stop = function () {                                                                         // 203\n  if (!this._isStarted)                                                                                       // 204\n    return;                                                                                                   // 205\n                                                                                                              // 206\n  if (this._locationComputation)                                                                              // 207\n    this._locationComputation.stop();                                                                         // 208\n                                                                                                              // 209\n  if (this._currentController)                                                                                // 210\n    this._currentController.stop();                                                                           // 211\n                                                                                                              // 212\n  this._isStarted = false;                                                                                    // 213\n};                                                                                                            // 214\n                                                                                                              // 215\n/**                                                                                                           // 216\n * Go to a given path or route name, optinally pass parameters and options.                                   // 217\n *                                                                                                            // 218\n * Example:                                                                                                   // 219\n * router.go('itemsShowRoute', {_id: 5}, {hash: 'frag', query: 'string});                                     // 220\n */                                                                                                           // 221\nRouter.prototype.go = function (routeNameOrPath, params, options) {                                           // 222\n  var self = this;                                                                                            // 223\n  var isPath = /^\\/|http/;                                                                                    // 224\n  var path;                                                                                                   // 225\n                                                                                                              // 226\n  options = options || {};                                                                                    // 227\n                                                                                                              // 228\n  if (isPath.test(routeNameOrPath)) {                                                                         // 229\n    // it's a path!                                                                                           // 230\n    path = routeNameOrPath;                                                                                   // 231\n  } else {                                                                                                    // 232\n    // it's a route name!                                                                                     // 233\n    var route = self.routes[routeNameOrPath];                                                                 // 234\n    assert(route, \"No route found named \" + JSON.stringify(routeNameOrPath));                                 // 235\n    path = route.path(params, _.extend(options, {throwOnMissingParams: true}));                               // 236\n  }                                                                                                           // 237\n                                                                                                              // 238\n  // let Iron Location handle it and we'll pick up the change in                                              // 239\n  // Iron.Location.get() computation.                                                                         // 240\n  Iron.Location.go(path, options);                                                                            // 241\n};                                                                                                            // 242\n                                                                                                              // 243\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1809\n                                                                                                                     // 1810\n}).call(this);                                                                                                       // 1811\n                                                                                                                     // 1812\n                                                                                                                     // 1813\n                                                                                                                     // 1814\n                                                                                                                     // 1815\n                                                                                                                     // 1816\n                                                                                                                     // 1817\n(function () {                                                                                                       // 1818\n                                                                                                                     // 1819\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1820\n//                                                                                                            //     // 1821\n// packages/iron:router/lib/plugins.js                                                                        //     // 1822\n//                                                                                                            //     // 1823\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1824\n                                                                                                              //     // 1825\n/**                                                                                                           // 1   // 1826\n * Simple plugin wrapper around the loading hook.                                                             // 2   // 1827\n */                                                                                                           // 3   // 1828\nRouter.plugins.loading = function (router, options) {                                                         // 4   // 1829\n  router.onBeforeAction('loading', options);                                                                  // 5   // 1830\n};                                                                                                            // 6   // 1831\n                                                                                                              // 7   // 1832\n/**                                                                                                           // 8   // 1833\n * Simple plugin wrapper around the dataNotFound hook.                                                        // 9   // 1834\n */                                                                                                           // 10  // 1835\nRouter.plugins.dataNotFound = function (router, options) {                                                    // 11  // 1836\n  router.onBeforeAction('dataNotFound', options);                                                             // 12  // 1837\n};                                                                                                            // 13  // 1838\n                                                                                                              // 14  // 1839\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1840\n                                                                                                                     // 1841\n}).call(this);                                                                                                       // 1842\n                                                                                                                     // 1843\n                                                                                                                     // 1844\n                                                                                                                     // 1845\n                                                                                                                     // 1846\n                                                                                                                     // 1847\n                                                                                                                     // 1848\n(function () {                                                                                                       // 1849\n                                                                                                                     // 1850\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1851\n//                                                                                                            //     // 1852\n// packages/iron:router/lib/global_router.js                                                                  //     // 1853\n//                                                                                                            //     // 1854\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1855\n                                                                                                              //     // 1856\nRouter = new Iron.Router;                                                                                     // 1   // 1857\n                                                                                                              // 2   // 1858\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1859\n                                                                                                                     // 1860\n}).call(this);                                                                                                       // 1861\n                                                                                                                     // 1862\n                                                                                                                     // 1863\n                                                                                                                     // 1864\n                                                                                                                     // 1865\n                                                                                                                     // 1866\n                                                                                                                     // 1867\n(function () {                                                                                                       // 1868\n                                                                                                                     // 1869\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1870\n//                                                                                                            //     // 1871\n// packages/iron:router/lib/template.templates.js                                                             //     // 1872\n//                                                                                                            //     // 1873\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1874\n                                                                                                              //     // 1875\n                                                                                                              // 1   // 1876\nTemplate.__checkName(\"__IronRouterNotFound__\");                                                               // 2   // 1877\nTemplate[\"__IronRouterNotFound__\"] = new Template(\"Template.__IronRouterNotFound__\", (function() {            // 3   // 1878\n  var view = this;                                                                                            // 4   // 1879\n  return HTML.DIV({                                                                                           // 5   // 1880\n    style: \"width: 600px; margin: 0 auto; padding: 20px;\"                                                     // 6   // 1881\n  }, \"\\n    \", HTML.DIV({                                                                                     // 7   // 1882\n    style: \"font-size: 18pt; color: #999;\"                                                                    // 8   // 1883\n  }, \"\\n      Oops, looks like there's no route on the client or the server for url: \\\"\", Blaze.View(\"lookup:url\", function() {\n    return Spacebars.mustache(view.lookup(\"url\"));                                                            // 10  // 1885\n  }), '.\"\\n    '), \"\\n  \");                                                                                   // 11  // 1886\n}));                                                                                                          // 12  // 1887\n                                                                                                              // 13  // 1888\nTemplate.__checkName(\"__IronRouterNoRoutes__\");                                                               // 14  // 1889\nTemplate[\"__IronRouterNoRoutes__\"] = new Template(\"Template.__IronRouterNoRoutes__\", (function() {            // 15  // 1890\n  var view = this;                                                                                            // 16  // 1891\n  return HTML.Raw('<div style=\"font-family: helvetica; color: #777; max-width: 600px; margin: 20px auto;\">\\n      <h1 style=\"text-align: center; margin: 0; font-size: 48pt;\">\\n        iron:router\\n      </h1>\\n      <p style=\"text-align: center; font-size: 1.3em;\">\\n        Organize your Meteor application.\\n      </p>\\n      <div style=\"margin: 50px 0px;\">\\n        <pre style=\"background: #f2f2f2; margin: 0; padding: 10px;\">\\nRouter.route(\\'/\\', function () {\\n  this.render(\\'Home\\', {\\n    data: function () { return Items.findOne({_id: this.params._id}); }\\n  });\\n});\\n        </pre>\\n      </div>\\n      <div style=\"margin: 50px 0px;\">\\n        Check it out on Github:<br>\\n        <a href=\"https://github.com/eventedmind/iron-router\" target=\"_blank\">https://github.com/eventedmind/iron-router</a>\\n        <br>\\n        <br>\\n        And check out the new Guide:<br>\\n        <a href=\"https://iron-meteor.github.io/iron-router\" target=\"_blank\">\\n          https://iron-meteor.github.io/iron-router\\n        </a>\\n      </div>\\n    </div>');\n}));                                                                                                          // 18  // 1893\n                                                                                                              // 19  // 1894\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1895\n                                                                                                                     // 1896\n}).call(this);                                                                                                       // 1897\n                                                                                                                     // 1898\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['iron:router'] = {\n  Router: Router,\n  RouteController: RouteController\n};\n\n})();\n","servePath":"/packages/iron_router.js","sourceMap":{"version":3,"sources":["/packages/iron_router/packages/iron_router.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4H","file":"/packages/iron_router.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/iron:router/lib/current_options.js                                                                //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n/**                                                                                                           // 1\n * Allows for dynamic scoping of options variables. Primarily intended to be                                  // 2\n * used in the RouteController.prototype.lookupOption method.                                                 // 3\n */                                                                                                           // 4\nCurrentOptions = new Meteor.EnvironmentVariable;                                                              // 5\n                                                                                                              // 6\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/iron:router/lib/http_methods.js                                                                   //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nHTTP_METHODS = [                                                                                              // 1\n  'get',                                                                                                      // 2\n  'post',                                                                                                     // 3\n  'put',                                                                                                      // 4\n  'delete',                                                                                                   // 5\n  'patch'                                                                                                     // 6\n];                                                                                                            // 7\n                                                                                                              // 8\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/iron:router/lib/route_controller.js                                                               //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n/*****************************************************************************/                               // 1\n/* Imports */                                                                                                 // 2\n/*****************************************************************************/                               // 3\nvar Controller = Iron.Controller;                                                                             // 4\nvar Url = Iron.Url;                                                                                           // 5\nvar MiddlewareStack = Iron.MiddlewareStack;                                                                   // 6\nvar assert = Iron.utils.assert;                                                                               // 7\n                                                                                                              // 8\n/*****************************************************************************/                               // 9\n/* RouteController */                                                                                         // 10\n/*****************************************************************************/                               // 11\nRouteController = Controller.extend({                                                                         // 12\n  constructor: function (options) {                                                                           // 13\n    RouteController.__super__.constructor.apply(this, arguments);                                             // 14\n    options = options || {};                                                                                  // 15\n    this.options = options;                                                                                   // 16\n    this._onStopCallbacks = [];                                                                               // 17\n    this.route = options.route;                                                                               // 18\n    this.params = [];                                                                                         // 19\n                                                                                                              // 20\n    // Sometimes the data property can be defined on route options,                                           // 21\n    // or even on the global router config. And people will expect the                                        // 22\n    // data function to be available on the controller instance if it                                         // 23\n    // is defined anywhere in the chain. This ensure that if we have                                          // 24\n    // a data function somewhere in the chain, you can call this.data().                                      // 25\n    var data = this.lookupOption('data');                                                                     // 26\n                                                                                                              // 27\n    if (typeof data === 'function')                                                                           // 28\n      this.data = _.bind(data, this);                                                                         // 29\n    else if (typeof data !== 'undefined')                                                                     // 30\n      this.data = function () { return data; };                                                               // 31\n                                                                                                              // 32\n    this.init(options);                                                                                       // 33\n  }                                                                                                           // 34\n});                                                                                                           // 35\n                                                                                                              // 36\n/**                                                                                                           // 37\n * Returns an option value following an \"options chain\" which is this path:                                   // 38\n *                                                                                                            // 39\n *   this.options                                                                                             // 40\n *   this (which includes the proto chain)                                                                    // 41\n *   this.route.options                                                                                       // 42\n *   dynamic variable                                                                                         // 43\n *   this.router.options                                                                                      // 44\n */                                                                                                           // 45\nRouteController.prototype.lookupOption = function (key) {                                                     // 46\n  // this.route.options                                                                                       // 47\n  // NOTE: we've debated whether route options should come before controller but                              // 48\n  // Tom has convinced me that it's easier for people to think about overriding                               // 49\n  // controller stuff at the route option level. However, this has the possibly                               // 50\n  // counterintuitive effect that if you define this.someprop = true on the                                   // 51\n  // controller instance, and you have someprop defined as an option on your                                  // 52\n  // Route, the route option will take precedence.                                                            // 53\n  if (this.route && this.route.options && _.has(this.route.options, key))                                     // 54\n    return this.route.options[key];                                                                           // 55\n                                                                                                              // 56\n  // this.options                                                                                             // 57\n  if (_.has(this.options, key))                                                                               // 58\n    return this.options[key];                                                                                 // 59\n                                                                                                              // 60\n  // \"this\" object or its proto chain                                                                         // 61\n  if (typeof this[key] !== 'undefined')                                                                       // 62\n    return this[key];                                                                                         // 63\n                                                                                                              // 64\n  // see if we have the CurrentOptions dynamic variable set.                                                  // 65\n  var opts = CurrentOptions.get();                                                                            // 66\n  if (opts && _.has(opts, key))                                                                               // 67\n    return opts[key];                                                                                         // 68\n                                                                                                              // 69\n  // this.router.options                                                                                      // 70\n  if (this.router && this.router.options && _.has(this.router.options, key))                                  // 71\n    return this.router.options[key];                                                                          // 72\n};                                                                                                            // 73\n                                                                                                              // 74\nRouteController.prototype.configureFromUrl = function (url, context, options) {                               // 75\n  assert(typeof url === 'string', 'url must be a string');                                                    // 76\n  context = context || {};                                                                                    // 77\n  this.request = context.request || {};                                                                       // 78\n  this.response = context.response || {};                                                                     // 79\n  this.url = context.url || url;                                                                              // 80\n  this.originalUrl = context.originalUrl || url;                                                              // 81\n  this.method = this.request.method;                                                                          // 82\n  if (this.route) {                                                                                           // 83\n    // pass options to that we can set reactive: false                                                        // 84\n    this.setParams(this.route.params(url), options);                                                          // 85\n  }                                                                                                           // 86\n};                                                                                                            // 87\n                                                                                                              // 88\n/**                                                                                                           // 89\n * Returns an array of hook functions for the given hook names. Hooks are                                     // 90\n * collected in this order:                                                                                   // 91\n *                                                                                                            // 92\n * router global hooks                                                                                        // 93\n * route option hooks                                                                                         // 94\n * prototype of the controller                                                                                // 95\n * this object for the controller                                                                             // 96\n *                                                                                                            // 97\n * For example, this.collectHooks('onBeforeAction', 'before')                                                 // 98\n * will return an array of hook functions where the key is either onBeforeAction                              // 99\n * or before.                                                                                                 // 100\n *                                                                                                            // 101\n * Hook values can also be strings in which case they are looked up in the                                    // 102\n * Iron.Router.hooks object.                                                                                  // 103\n *                                                                                                            // 104\n * TODO: Add an options last argument which can specify to only collect hooks                                 // 105\n * for a particular environment (client, server or both).                                                     // 106\n */                                                                                                           // 107\nRouteController.prototype._collectHooks = function (/* hook1, alias1, ... */) {                               // 108\n  var self = this;                                                                                            // 109\n  var hookNames = _.toArray(arguments);                                                                       // 110\n                                                                                                              // 111\n  var getHookValues = function (value) {                                                                      // 112\n    if (!value)                                                                                               // 113\n      return [];                                                                                              // 114\n    var lookupHook = self.router.lookupHook;                                                                  // 115\n    var hooks = _.isArray(value) ? value : [value];                                                           // 116\n    return _.map(hooks, function (h) { return lookupHook(h); });                                              // 117\n  };                                                                                                          // 118\n                                                                                                              // 119\n  var collectInheritedHooks = function (ctor, hookName) {                                                     // 120\n    var hooks = [];                                                                                           // 121\n                                                                                                              // 122\n    if (ctor.__super__)                                                                                       // 123\n      hooks = hooks.concat(collectInheritedHooks(ctor.__super__.constructor, hookName));                      // 124\n                                                                                                              // 125\n    return _.has(ctor.prototype, hookName) ?                                                                  // 126\n      hooks.concat(getHookValues(ctor.prototype[hookName])) : hooks;                                          // 127\n  };                                                                                                          // 128\n                                                                                                              // 129\n  var eachHook = function (cb) {                                                                              // 130\n    for (var i = 0; i < hookNames.length; i++) {                                                              // 131\n      cb(hookNames[i]);                                                                                       // 132\n    }                                                                                                         // 133\n  };                                                                                                          // 134\n                                                                                                              // 135\n  var routerHooks = [];                                                                                       // 136\n  eachHook(function (hook) {                                                                                  // 137\n    var name = self.route && self.route.getName();                                                            // 138\n    var hooks = self.router.getHooks(hook, name);                                                             // 139\n    routerHooks = routerHooks.concat(hooks);                                                                  // 140\n  });                                                                                                         // 141\n                                                                                                              // 142\n  var protoHooks = [];                                                                                        // 143\n  eachHook(function (hook) {                                                                                  // 144\n    var hooks = collectInheritedHooks(self.constructor, hook);                                                // 145\n    protoHooks = protoHooks.concat(hooks);                                                                    // 146\n  });                                                                                                         // 147\n                                                                                                              // 148\n  var thisHooks = [];                                                                                         // 149\n  eachHook(function (hook) {                                                                                  // 150\n    if (_.has(self, hook)) {                                                                                  // 151\n      var hooks = getHookValues(self[hook]);                                                                  // 152\n      thisHooks = thisHooks.concat(hooks);                                                                    // 153\n    }                                                                                                         // 154\n  });                                                                                                         // 155\n                                                                                                              // 156\n  var routeHooks = [];                                                                                        // 157\n  if (self.route) {                                                                                           // 158\n    eachHook(function (hook) {                                                                                // 159\n      var hooks = getHookValues(self.route.options[hook]);                                                    // 160\n      routeHooks = routeHooks.concat(hooks);                                                                  // 161\n    });                                                                                                       // 162\n  }                                                                                                           // 163\n                                                                                                              // 164\n  var allHooks = routerHooks                                                                                  // 165\n    .concat(routeHooks)                                                                                       // 166\n    .concat(protoHooks)                                                                                       // 167\n    .concat(thisHooks);                                                                                       // 168\n                                                                                                              // 169\n  return allHooks;                                                                                            // 170\n};                                                                                                            // 171\n                                                                                                              // 172\n/**                                                                                                           // 173\n * Runs each hook and returns the number of hooks that were run.                                              // 174\n */                                                                                                           // 175\nRouteController.prototype.runHooks = function (/* hook, alias1, ...*/ ) {                                     // 176\n  var hooks = this._collectHooks.apply(this, arguments);                                                      // 177\n  for (var i = 0, l = hooks.length; i < l; i++) {                                                             // 178\n    var h = hooks[i];                                                                                         // 179\n    h.call(this);                                                                                             // 180\n  }                                                                                                           // 181\n  return hooks.length;                                                                                        // 182\n};                                                                                                            // 183\n                                                                                                              // 184\nRouteController.prototype.getParams = function () {                                                           // 185\n  return this.params;                                                                                         // 186\n};                                                                                                            // 187\n                                                                                                              // 188\nRouteController.prototype.setParams = function (value) {                                                      // 189\n  this.params = value;                                                                                        // 190\n  return this;                                                                                                // 191\n};                                                                                                            // 192\n                                                                                                              // 193\nIron.RouteController = RouteController;                                                                       // 194\n                                                                                                              // 195\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/iron:router/lib/route_controller_client.js                                                        //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n/*****************************************************************************/                               // 1\n/* Imports */                                                                                                 // 2\n/*****************************************************************************/                               // 3\nvar Controller = Iron.Controller;                                                                             // 4\nvar Url = Iron.Url;                                                                                           // 5\nvar MiddlewareStack = Iron.MiddlewareStack;                                                                   // 6\nvar debug = Iron.utils.debug('iron-router:RouteController');                                                  // 7\n                                                                                                              // 8\n/*****************************************************************************/                               // 9\n/* RouteController */                                                                                         // 10\n/*****************************************************************************/                               // 11\n/**                                                                                                           // 12\n * Client specific initialization.                                                                            // 13\n */                                                                                                           // 14\nRouteController.prototype.init = function (options) {                                                         // 15\n  RouteController.__super__.init.apply(this, arguments);                                                      // 16\n  this._computation = null;                                                                                   // 17\n  this._paramsDep = new Tracker.Dependency;                                                                   // 18\n  this.location = Iron.Location;                                                                              // 19\n};                                                                                                            // 20\n                                                                                                              // 21\nRouteController.prototype.getParams = function () {                                                           // 22\n  this._paramsDep.depend();                                                                                   // 23\n  return this.params;                                                                                         // 24\n};                                                                                                            // 25\n                                                                                                              // 26\nRouteController.prototype.setParams = function (value, options) {                                             // 27\n  var equals = function (a, b) {                                                                              // 28\n    if (!(a instanceof Array))                                                                                // 29\n      throw new Error(\"you called equals with a non array value in setParams\");                               // 30\n    if (!(b instanceof Array))                                                                                // 31\n      return false;                                                                                           // 32\n    if (a.length !== b.length)                                                                                // 33\n      return false;                                                                                           // 34\n    for (var i = 0; i < a.length; i++) {                                                                      // 35\n      if (!EJSON.equals(a[i], b[i], options))                                                                 // 36\n        return false;                                                                                         // 37\n    }                                                                                                         // 38\n                                                                                                              // 39\n    // now check all of the hasOwn properties of params                                                       // 40\n    var aKeys = _.keys(a);                                                                                    // 41\n    var bKeys = _.keys(b);                                                                                    // 42\n    var key;                                                                                                  // 43\n                                                                                                              // 44\n    if (aKeys.length !== bKeys.length)                                                                        // 45\n      return false;                                                                                           // 46\n                                                                                                              // 47\n    for (var i = 0; i < aKeys.length; i++) {                                                                  // 48\n      key = aKeys[i];                                                                                         // 49\n      if (!_.has(b, key))                                                                                     // 50\n        return false;                                                                                         // 51\n      if (!EJSON.equals(a[key], b[key]))                                                                      // 52\n        return false;                                                                                         // 53\n    }                                                                                                         // 54\n                                                                                                              // 55\n    return true;                                                                                              // 56\n  };                                                                                                          // 57\n                                                                                                              // 58\n  // this won't work because the array values are the same                                                    // 59\n  // most of the time.                                                                                        // 60\n  if (equals(this.params, value))                                                                             // 61\n    return;                                                                                                   // 62\n                                                                                                              // 63\n  this.params = value;                                                                                        // 64\n                                                                                                              // 65\n  options = options || {};                                                                                    // 66\n  if (options.reactive !== false)                                                                             // 67\n    this._paramsDep.changed();                                                                                // 68\n                                                                                                              // 69\n  return this;                                                                                                // 70\n};                                                                                                            // 71\n                                                                                                              // 72\n/**                                                                                                           // 73\n * Let this controller run a dispatch process. This function will be called                                   // 74\n * from the router. That way, any state associated with the dispatch can go on                                // 75\n * the controller instance.                                                                                   // 76\n */                                                                                                           // 77\nRouteController.prototype.dispatch = function (stack, url, done) {                                            // 78\n  if (this._computation && !this._computation.stopped)                                                        // 79\n    throw new Error(\"RouteController computation is already running. Stop it first.\");                        // 80\n                                                                                                              // 81\n  var self = this;                                                                                            // 82\n                                                                                                              // 83\n  // break the computation chain with any parent comps                                                        // 84\n  Deps.nonreactive(function () {                                                                              // 85\n    Deps.autorun(function (comp) {                                                                            // 86\n      self._computation = comp;                                                                               // 87\n      stack.dispatch(url, self, done);                                                                        // 88\n    });                                                                                                       // 89\n  });                                                                                                         // 90\n                                                                                                              // 91\n  return self;                                                                                                // 92\n};                                                                                                            // 93\n                                                                                                              // 94\n/**                                                                                                           // 95\n * Run a route. When the router runs its middleware stack, it can run regular                                 // 96\n * middleware functions or it can run a route. There should only one route                                    // 97\n * object per path as where there may be many middleware functions.                                           // 98\n *                                                                                                            // 99\n * For example:                                                                                               // 100\n *                                                                                                            // 101\n *   \"/some/path\" => [middleware1, middleware2, route, middleware3]                                           // 102\n *                                                                                                            // 103\n * When a route is dispatched, it tells the controller to _runRoute so that                                   // 104\n * the controller can controll the process. At this point we should already be                                // 105\n * in a dispatch so a computation should already exist.                                                       // 106\n */                                                                                                           // 107\nRouteController.prototype._runRoute = function (route, url, done) {                                           // 108\n  var self = this;                                                                                            // 109\n                                                                                                              // 110\n                                                                                                              // 111\n  // this will now be where you can put your subscriptions                                                    // 112\n  // instead of waitOn. If you use waitOn, it will also                                                       // 113\n  // add the result to the wait list, but will also use                                                       // 114\n  // the loading hook.                                                                                        // 115\n  //                                                                                                          // 116\n  // Similar to waitOn, we'll collect these just like hooks. See the comment                                  // 117\n  // below on the waitOnList.                                                                                 // 118\n  //                                                                                                          // 119\n  // If you don't want the subscription to affect the readiness of the waitlist                               // 120\n  // then just don't return the subscription handle from the function.                                        // 121\n  var subsList = this._collectHooks('subscriptions');                                                         // 122\n  _.each(subsList, function (subFunc) {                                                                       // 123\n    self.wait(subFunc.call(self));                                                                            // 124\n  });                                                                                                         // 125\n                                                                                                              // 126\n                                                                                                              // 127\n  // waitOn isn't really a 'hook' but we use the _collectHooks method here                                    // 128\n  // because I want an array of values collected in the same order that we                                    // 129\n  // collect regular hooks (router global, route option, controller proto,                                    // 130\n  // controller inst object. Then we need to map over the results to make                                     // 131\n  // sure the thisArg is set to the controller instance.                                                      // 132\n  var waitOnList = this._collectHooks('waitOn');                                                              // 133\n                                                                                                              // 134\n  _.each(waitOnList, function (waitOn) {                                                                      // 135\n    self.wait(waitOn.call(self));                                                                             // 136\n  });                                                                                                         // 137\n                                                                                                              // 138\n  // if we have a waitOn option, the loading hook will be                                                     // 139\n  // added at the end of the before hook stack, right before                                                  // 140\n  // the action function.                                                                                     // 141\n  var useLoadingHook = waitOnList.length > 0;                                                                 // 142\n                                                                                                              // 143\n  // start the rendering transaction so we record which regions were rendered                                 // 144\n  // into so we can clear the unused regions later. the callback function will                                // 145\n  // get called automatically on the next flush, OR if beginRendering is called                               // 146\n  // again before the afterFlush callback.                                                                    // 147\n  var previousLayout;                                                                                         // 148\n  var previousMainTemplate;                                                                                   // 149\n                                                                                                              // 150\n  var getLayout = function () {                                                                               // 151\n    return Deps.nonreactive(function () {                                                                     // 152\n      return self._layout.template();                                                                         // 153\n    });                                                                                                       // 154\n  };                                                                                                          // 155\n                                                                                                              // 156\n  var getMainTemplate = function () {                                                                         // 157\n    return Deps.nonreactive(function () {                                                                     // 158\n      var region = self._layout._regions.main;                                                                // 159\n      return region && region.template();                                                                     // 160\n    });                                                                                                       // 161\n  };                                                                                                          // 162\n                                                                                                              // 163\n  var prevLayout = getLayout();                                                                               // 164\n  var prevMainTemplate = getMainTemplate();                                                                   // 165\n                                                                                                              // 166\n  this.beginRendering(function onCompleteRenderingTransaction (usedRegions) {                                 // 167\n    if (self.isStopped)                                                                                       // 168\n      return;                                                                                                 // 169\n                                                                                                              // 170\n    var curLayout = getLayout();                                                                              // 171\n    var curMainTemplate = getMainTemplate();                                                                  // 172\n                                                                                                              // 173\n    // in the case where we're using the same layout and main template                                        // 174\n    // across route changes don't automatically clear the unused regions                                      // 175\n    // because we could have static content in them that we want to keep!                                     // 176\n    if (prevLayout === curLayout && prevMainTemplate == curMainTemplate)                                      // 177\n      return;                                                                                                 // 178\n                                                                                                              // 179\n    var allRegions = self._layout.regionKeys();                                                               // 180\n    var unusedRegions = _.difference(allRegions, usedRegions);                                                // 181\n    _.each(unusedRegions, function (r) { self._layout.clear(r); });                                           // 182\n  });                                                                                                         // 183\n                                                                                                              // 184\n  this.layout(this.lookupOption('layoutTemplate'), {                                                          // 185\n    data: this.lookupOption('data')                                                                           // 186\n  });                                                                                                         // 187\n                                                                                                              // 188\n  var stack = new MiddlewareStack;                                                                            // 189\n  var onRunStack = new MiddlewareStack;                                                                       // 190\n  var onRerunStack = new MiddlewareStack;                                                                     // 191\n                                                                                                              // 192\n  onRunStack.append(this._collectHooks('onRun', 'load'), {where: 'client'});                                  // 193\n  onRerunStack.append(this._collectHooks('onRerun'), {where: 'client'});                                      // 194\n                                                                                                              // 195\n  stack.append(                                                                                               // 196\n    function onRun (req, res, next) {                                                                         // 197\n      if (this._computation.firstRun && !RouteController._hasJustReloaded) {                                  // 198\n        if (onRunStack.length > 0) {                                                                          // 199\n          onRunStack.dispatch(req.url, this, next);                                                           // 200\n        } else {                                                                                              // 201\n          next();                                                                                             // 202\n        }                                                                                                     // 203\n      } else {                                                                                                // 204\n        next();                                                                                               // 205\n      }                                                                                                       // 206\n      RouteController._hasJustReloaded = false;                                                               // 207\n    },                                                                                                        // 208\n                                                                                                              // 209\n    function onRerun (req, res, next) {                                                                       // 210\n      if (!this._computation.firstRun) {                                                                      // 211\n        if (onRerunStack.length > 0) {                                                                        // 212\n          onRerunStack.dispatch(req.url, this, next);                                                         // 213\n        } else {                                                                                              // 214\n          next();                                                                                             // 215\n        }                                                                                                     // 216\n      } else {                                                                                                // 217\n        next();                                                                                               // 218\n      }                                                                                                       // 219\n    }                                                                                                         // 220\n  , {where: 'client'});                                                                                       // 221\n                                                                                                              // 222\n  // make sure the loading hook is the first one to run                                                       // 223\n  // before any of the other onBeforeAction hooks.                                                            // 224\n  if (useLoadingHook) {                                                                                       // 225\n    stack.push(_.bind(Iron.Router.hooks.loading, self));                                                      // 226\n  }                                                                                                           // 227\n                                                                                                              // 228\n  var beforeHooks = this._collectHooks('onBeforeAction', 'before');                                           // 229\n  stack.append(beforeHooks, {where: 'client'});                                                               // 230\n                                                                                                              // 231\n  // make sure the action stack has at least one handler on it that defaults                                  // 232\n  // to the 'action' method                                                                                   // 233\n  if (route._actionStack.length === 0)                                                                        // 234\n    route._actionStack.push(route._path, 'action', route.options);                                            // 235\n                                                                                                              // 236\n  stack = stack.concat(route._actionStack);                                                                   // 237\n                                                                                                              // 238\n  // the \"context\" is the current instance of the RouteController                                             // 239\n  this._rendered = false;                                                                                     // 240\n  stack.dispatch(url, this, done);                                                                            // 241\n  // we put this in an afterFlush to let a redirected route have a chance to                                  // 242\n  //   start and to stop this route.                                                                          // 243\n  Deps.afterFlush(function() {                                                                                // 244\n    Iron.utils.warn(self._rendered || self.isStopped,                                                         // 245\n      \"Route dispatch never rendered. Did you forget to call this.next() in an onBeforeAction?\");             // 246\n  });                                                                                                         // 247\n                                                                                                              // 248\n  // run the after hooks. Note, at this point we're out of the middleware                                     // 249\n  // stack way of doing things. So after actions don't call this.next(). They                                 // 250\n  // run just like a regular hook. In contrast, before hooks have to call                                     // 251\n  // this.next() to progress to the next handler, just like Connect                                           // 252\n  // middleware.                                                                                              // 253\n  this.runHooks('onAfterAction', 'after');                                                                    // 254\n};                                                                                                            // 255\n                                                                                                              // 256\n/**                                                                                                           // 257\n * The default action for the controller simply renders the main template.                                    // 258\n */                                                                                                           // 259\nRouteController.prototype.action = function () {                                                              // 260\n  this.render();                                                                                              // 261\n};                                                                                                            // 262\n                                                                                                              // 263\n/**                                                                                                           // 264\n * Returns the name of the main template for this controller. If no explicit                                  // 265\n * value is found we will guess the name of the template.                                                     // 266\n */                                                                                                           // 267\nRouteController.prototype.lookupTemplate = function () {                                                      // 268\n  return this.lookupOption('template') ||                                                                     // 269\n    (this.router && this.router.toTemplateName(this.route.getName()));                                        // 270\n};                                                                                                            // 271\n                                                                                                              // 272\n/**                                                                                                           // 273\n * The regionTemplates for the RouteController.                                                               // 274\n */                                                                                                           // 275\nRouteController.prototype.lookupRegionTemplates = function () {                                               // 276\n  return this.lookupOption('yieldRegions') ||                                                                 // 277\n    // XXX: deprecated                                                                                        // 278\n    this.lookupOption('regionTemplates') ||                                                                   // 279\n    this.lookupOption('yieldTemplates') || {};                                                                // 280\n};                                                                                                            // 281\n                                                                                                              // 282\n/**                                                                                                           // 283\n * Overrides Controller.prototype.render to automatically render the                                          // 284\n * controller's main template and region templates or just render a region                                    // 285\n * template if the arguments are provided.                                                                    // 286\n */                                                                                                           // 287\nRouteController.prototype.render = function (template, options) {                                             // 288\n  this._rendered = true;                                                                                      // 289\n  if (arguments.length === 0) {                                                                               // 290\n    var template = this.lookupTemplate();                                                                     // 291\n    var result = RouteController.__super__.render.call(this, template);                                       // 292\n    this.renderRegions();                                                                                     // 293\n    return result;                                                                                            // 294\n  } else {                                                                                                    // 295\n    return RouteController.__super__.render.call(this, template, options);                                    // 296\n  }                                                                                                           // 297\n};                                                                                                            // 298\n                                                                                                              // 299\n/**                                                                                                           // 300\n * Render all region templates into their respective regions in the layout.                                   // 301\n */                                                                                                           // 302\nRouteController.prototype.renderRegions = function () {                                                       // 303\n  var self = this;                                                                                            // 304\n  var regionTemplates = this.lookupRegionTemplates();                                                         // 305\n                                                                                                              // 306\n  debug('regionTemplates: ' + JSON.stringify(regionTemplates));                                               // 307\n                                                                                                              // 308\n                                                                                                              // 309\n  // regionTemplates =>                                                                                       // 310\n  //   {                                                                                                      // 311\n  //     \"MyTemplate\": {to: 'MyRegion'}                                                                       // 312\n  //   }                                                                                                      // 313\n  _.each(regionTemplates, function (opts, templateName) {                                                     // 314\n    self.render(templateName, opts);                                                                          // 315\n  });                                                                                                         // 316\n};                                                                                                            // 317\n                                                                                                              // 318\n/**                                                                                                           // 319\n * Stop the RouteController.                                                                                  // 320\n */                                                                                                           // 321\nRouteController.prototype.stop = function () {                                                                // 322\n  RouteController.__super__.stop.call(this);                                                                  // 323\n                                                                                                              // 324\n  if (this._computation)                                                                                      // 325\n    this._computation.stop();                                                                                 // 326\n  this.runHooks('onStop', 'unload');                                                                          // 327\n  this.isStopped = true;                                                                                      // 328\n};                                                                                                            // 329\n                                                                                                              // 330\n/**                                                                                                           // 331\n * Just proxies to the go method of router.                                                                   // 332\n *                                                                                                            // 333\n * It used to have more significance. Keeping because people are used to it.                                  // 334\n */                                                                                                           // 335\nRouteController.prototype.redirect = function () {                                                            // 336\n  return this.router.go.apply(this.router, arguments);                                                        // 337\n};                                                                                                            // 338\n                                                                                                              // 339\n/**                                                                                                           // 340\n * Calls Meteor.subscribe but extends the handle with a wait() method.                                        // 341\n *                                                                                                            // 342\n * The wait method adds the subscription handle to this controller's                                          // 343\n * wait list. This is equivalent to returning a subscription handle                                           // 344\n * from the waitOn function. However, using the waitOn function has the                                       // 345\n * benefit that it will be called before any other hooks. So if you want                                      // 346\n * to use the \"loading\" hooks for example, you'll want the wait list populated                                // 347\n * before the hook runs.                                                                                      // 348\n *                                                                                                            // 349\n * Example:                                                                                                   // 350\n *                                                                                                            // 351\n *   this.subscribe('item', this.params._id).wait();                                                          // 352\n *                                                                                                            // 353\n *   if (this.ready()) {                                                                                      // 354\n *     ...                                                                                                    // 355\n *   } else {                                                                                                 // 356\n *     ...                                                                                                    // 357\n *   }                                                                                                        // 358\n */                                                                                                           // 359\nRouteController.prototype.subscribe = function (/* same as Meteor.subscribe */) {                             // 360\n  var self = this;                                                                                            // 361\n  var handle = Meteor.subscribe.apply(this, arguments);                                                       // 362\n  return _.extend(handle, {                                                                                   // 363\n    wait: function () {                                                                                       // 364\n      self.wait(this);                                                                                        // 365\n    }                                                                                                         // 366\n  });                                                                                                         // 367\n};                                                                                                            // 368\n                                                                                                              // 369\nif (Package.reload) {                                                                                         // 370\n  // just register the fact that a migration _has_ happened                                                   // 371\n  Package.reload.Reload._onMigrate('iron-router', function() { return [true, true] });                        // 372\n                                                                                                              // 373\n  // then when we come back up, check if it is set                                                            // 374\n  var data = Package.reload.Reload._migrationData('iron-router');                                             // 375\n  RouteController._hasJustReloaded = data;                                                                    // 376\n}                                                                                                             // 377\n                                                                                                              // 378\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/iron:router/lib/route.js                                                                          //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nvar Url = Iron.Url;                                                                                           // 1\nvar MiddlewareStack = Iron.MiddlewareStack;                                                                   // 2\nvar assert = Iron.utils.assert;                                                                               // 3\n                                                                                                              // 4\n/*****************************************************************************/                               // 5\n/* Both */                                                                                                    // 6\n/*****************************************************************************/                               // 7\nRoute = function (path, fn, options) {                                                                        // 8\n  var route = function (req, res, next) {                                                                     // 9\n    var controller = this;                                                                                    // 10\n    controller.request = req;                                                                                 // 11\n    controller.response = res;                                                                                // 12\n    route.dispatch(req.url, controller, next);                                                                // 13\n  }                                                                                                           // 14\n                                                                                                              // 15\n  if (typeof fn === 'object') {                                                                               // 16\n    options = fn;                                                                                             // 17\n    fn = options.action;                                                                                      // 18\n  }                                                                                                           // 19\n                                                                                                              // 20\n  options = options || {};                                                                                    // 21\n                                                                                                              // 22\n  if (typeof path === 'string' && path.charAt(0) !== '/') {                                                   // 23\n    path = options.path ? options.path : '/' + path                                                           // 24\n  }                                                                                                           // 25\n                                                                                                              // 26\n  // extend the route function with properties from this instance and its                                     // 27\n  // prototype.                                                                                               // 28\n  _.extend(route, this.constructor.prototype);                                                                // 29\n                                                                                                              // 30\n  // always good to have options                                                                              // 31\n  options = route.options = options || {};                                                                    // 32\n                                                                                                              // 33\n  // the main action function as well as any HTTP VERB action functions will go                               // 34\n  // onto this stack.                                                                                         // 35\n  route._actionStack = new MiddlewareStack;                                                                   // 36\n                                                                                                              // 37\n  // any before hooks will go onto this stack to make sure they get executed                                  // 38\n  // before the action stack.                                                                                 // 39\n  route._beforeStack = new MiddlewareStack;                                                                   // 40\n  route._beforeStack.append(route.options.onBeforeAction);                                                    // 41\n  route._beforeStack.append(route.options.before);                                                            // 42\n                                                                                                              // 43\n  // after hooks get run after the action stack                                                               // 44\n  route._afterStack = new MiddlewareStack;                                                                    // 45\n  route._afterStack.append(route.options.onAfterAction);                                                      // 46\n  route._afterStack.append(route.options.after);                                                              // 47\n                                                                                                              // 48\n                                                                                                              // 49\n  // track which methods this route uses                                                                      // 50\n  route._methods = {};                                                                                        // 51\n                                                                                                              // 52\n  if (typeof fn === 'string') {                                                                               // 53\n    route._actionStack.push(path, _.extend(options, {                                                         // 54\n      template: fn                                                                                            // 55\n    }));                                                                                                      // 56\n  } else if (typeof fn === 'function' || typeof fn === 'object') {                                            // 57\n    route._actionStack.push(path, fn, options);                                                               // 58\n  }                                                                                                           // 59\n                                                                                                              // 60\n  route._path = path;                                                                                         // 61\n  return route;                                                                                               // 62\n};                                                                                                            // 63\n                                                                                                              // 64\n/**                                                                                                           // 65\n * The name of the route is actually stored on the handler since a route is a                                 // 66\n * function that has an unassignable \"name\" property.                                                         // 67\n */                                                                                                           // 68\nRoute.prototype.getName = function () {                                                                       // 69\n  return this.handler && this.handler.name;                                                                   // 70\n};                                                                                                            // 71\n                                                                                                              // 72\n/**                                                                                                           // 73\n * Returns an appropriate RouteController constructor the this Route.                                         // 74\n *                                                                                                            // 75\n * There are three possibilities:                                                                             // 76\n *                                                                                                            // 77\n *  1. controller option provided as a string on the route                                                    // 78\n *  2. a controller in the global namespace with the converted name of the route                              // 79\n *  3. a default RouteController                                                                              // 80\n *                                                                                                            // 81\n */                                                                                                           // 82\nRoute.prototype.findControllerConstructor = function () {                                                     // 83\n  var self = this;                                                                                            // 84\n                                                                                                              // 85\n  var resolve = function (name, opts) {                                                                       // 86\n    opts = opts || {};                                                                                        // 87\n    var C = Iron.utils.resolve(name);                                                                         // 88\n    if (!C || !RouteController.prototype.isPrototypeOf(C.prototype)) {                                        // 89\n      if (opts.supressErrors !== true)                                                                        // 90\n        throw new Error(\"RouteController '\" + name + \"' is not defined.\");                                    // 91\n      else                                                                                                    // 92\n        return undefined;                                                                                     // 93\n    } else {                                                                                                  // 94\n      return C;                                                                                               // 95\n    }                                                                                                         // 96\n  };                                                                                                          // 97\n                                                                                                              // 98\n  var convert = function (name) {                                                                             // 99\n    return self.router.toControllerName(name);                                                                // 100\n  };                                                                                                          // 101\n                                                                                                              // 102\n  var result;                                                                                                 // 103\n  var name = this.getName();                                                                                  // 104\n                                                                                                              // 105\n  // the controller was set directly                                                                          // 106\n  if (typeof this.options.controller === 'function')                                                          // 107\n    return this.options.controller;                                                                           // 108\n                                                                                                              // 109\n  // was the controller specified precisely by name? then resolve to an actual                                // 110\n  // javascript constructor value                                                                             // 111\n  else if (typeof this.options.controller === 'string')                                                       // 112\n    return resolve(this.options.controller);                                                                  // 113\n                                                                                                              // 114\n  // is there a default route controller configured?                                                          // 115\n  else if (this.router && this.router.options.controller) {                                                   // 116\n    if (typeof this.router.options.controller === 'function')                                                 // 117\n      return this.router.options.controller;                                                                  // 118\n                                                                                                              // 119\n    else if (typeof this.router.options.controller === 'string')                                              // 120\n      return resolve(this.router.options.controller);                                                         // 121\n  }                                                                                                           // 122\n                                                                                                              // 123\n  // otherwise do we have a name? try to convert the name to a controller name                                // 124\n  // and resolve it to a value                                                                                // 125\n  else if (name && (result = resolve(convert(name), {supressErrors: true})))                                  // 126\n    return result;                                                                                            // 127\n                                                                                                              // 128\n  // otherwise just use an anonymous route controller                                                         // 129\n  else                                                                                                        // 130\n    return RouteController;                                                                                   // 131\n};                                                                                                            // 132\n                                                                                                              // 133\n                                                                                                              // 134\n/**                                                                                                           // 135\n * Create a new controller for the route.                                                                     // 136\n */                                                                                                           // 137\nRoute.prototype.createController = function (options) {                                                       // 138\n  options = options || {};                                                                                    // 139\n  var C = this.findControllerConstructor();                                                                   // 140\n  options.route = this;                                                                                       // 141\n  var instance = new C(options);                                                                              // 142\n  return instance;                                                                                            // 143\n};                                                                                                            // 144\n                                                                                                              // 145\nRoute.prototype.setControllerParams = function (controller, url) {                                            // 146\n};                                                                                                            // 147\n                                                                                                              // 148\n/**                                                                                                           // 149\n * Dispatch into the route's middleware stack.                                                                // 150\n */                                                                                                           // 151\nRoute.prototype.dispatch = function (url, context, done) {                                                    // 152\n  // call runRoute on the controller which will behave similarly to the previous                              // 153\n  // version of IR.                                                                                           // 154\n  assert(context._runRoute, \"context doesn't have a _runRoute method\");                                       // 155\n  return context._runRoute(this, url, done);                                                                  // 156\n};                                                                                                            // 157\n                                                                                                              // 158\n/**                                                                                                           // 159\n * Returns a relative path for the route.                                                                     // 160\n */                                                                                                           // 161\nRoute.prototype.path = function (params, options) {                                                           // 162\n  return this.handler.resolve(params, options);                                                               // 163\n};                                                                                                            // 164\n                                                                                                              // 165\n/**                                                                                                           // 166\n * Return a fully qualified url for the route, given a set of parmeters and                                   // 167\n * options like hash and query.                                                                               // 168\n */                                                                                                           // 169\nRoute.prototype.url = function (params, options) {                                                            // 170\n  var path = this.path(params, options);                                                                      // 171\n  var host = (options && options.host) || Meteor.absoluteUrl();                                               // 172\n                                                                                                              // 173\n  if (host.charAt(host.length-1) === '/');                                                                    // 174\n    host = host.slice(0, host.length-1);                                                                      // 175\n  return host + path;                                                                                         // 176\n};                                                                                                            // 177\n                                                                                                              // 178\n/**                                                                                                           // 179\n * Return a params object for the route given a path.                                                         // 180\n */                                                                                                           // 181\nRoute.prototype.params = function (path) {                                                                    // 182\n  return this.handler.params(path);                                                                           // 183\n};                                                                                                            // 184\n                                                                                                              // 185\n/**                                                                                                           // 186\n * Add convenience methods for each HTTP verb.                                                                // 187\n *                                                                                                            // 188\n * Example:                                                                                                   // 189\n *  var route = router.route('/item')                                                                         // 190\n *    .get(function () { })                                                                                   // 191\n *    .post(function () { })                                                                                  // 192\n *    .put(function () { })                                                                                   // 193\n */                                                                                                           // 194\n_.each(HTTP_METHODS, function (method) {                                                                      // 195\n  Route.prototype[method] = function (fn) {                                                                   // 196\n    // track the method being used for OPTIONS requests.                                                      // 197\n    this._methods[method] = true;                                                                             // 198\n                                                                                                              // 199\n    this._actionStack.push(this._path, fn, {                                                                  // 200\n      // give each method a unique name so it doesn't clash with the route's                                  // 201\n      // name in the action stack                                                                             // 202\n      name: this.getName() + '_' + method.toLowerCase(),                                                      // 203\n      method: method,                                                                                         // 204\n                                                                                                              // 205\n      // for now just make the handler where the same as the route, presumably a                              // 206\n      // server route.                                                                                        // 207\n      where: this.handler.where,                                                                              // 208\n      mount: false                                                                                            // 209\n    });                                                                                                       // 210\n                                                                                                              // 211\n    return this;                                                                                              // 212\n  };                                                                                                          // 213\n});                                                                                                           // 214\n                                                                                                              // 215\nIron.Route = Route;                                                                                           // 216\n                                                                                                              // 217\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/iron:router/lib/router.js                                                                         //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n/*****************************************************************************/                               // 1\n/* Imports */                                                                                                 // 2\n/*****************************************************************************/                               // 3\nvar MiddlewareStack = Iron.MiddlewareStack;                                                                   // 4\nvar Url = Iron.Url;                                                                                           // 5\nvar Layout = Iron.Layout;                                                                                     // 6\nvar warn = Iron.utils.warn;                                                                                   // 7\nvar assert = Iron.utils.assert;                                                                               // 8\n                                                                                                              // 9\nRouter = function (options) {                                                                                 // 10\n  // keep the same api throughout which is:                                                                   // 11\n  // fn(url, context, done);                                                                                  // 12\n  function router (req, res, next) {                                                                          // 13\n    //XXX this assumes no other routers on the parent stack which we should probably fix                      // 14\n    router.dispatch(req.url, {                                                                                // 15\n      request: req,                                                                                           // 16\n      response: res                                                                                           // 17\n    }, next);                                                                                                 // 18\n  }                                                                                                           // 19\n                                                                                                              // 20\n  // the main router stack                                                                                    // 21\n  router._stack = new MiddlewareStack;                                                                        // 22\n                                                                                                              // 23\n  // for storing global hooks like before, after, etc.                                                        // 24\n  router._globalHooks = {};                                                                                   // 25\n                                                                                                              // 26\n  // backward compat and quicker lookup of Route handlers vs. regular function                                // 27\n  // handlers.                                                                                                // 28\n  router.routes = [];                                                                                         // 29\n                                                                                                              // 30\n  // to make sure we don't have more than one route per path                                                  // 31\n  router.routes._byPath = {};                                                                                 // 32\n                                                                                                              // 33\n  // always good to have options                                                                              // 34\n  this.configure.call(router, options);                                                                       // 35\n                                                                                                              // 36\n  // add proto properties to the router function                                                              // 37\n  _.extend(router, this.constructor.prototype);                                                               // 38\n                                                                                                              // 39\n  // let client and server side routing doing different things here                                           // 40\n  this.init.call(router, options);                                                                            // 41\n                                                                                                              // 42\n  Meteor.startup(function () {                                                                                // 43\n    Meteor.defer(function () {                                                                                // 44\n      if (router.options.autoStart !== false)                                                                 // 45\n        router.start();                                                                                       // 46\n    });                                                                                                       // 47\n  });                                                                                                         // 48\n                                                                                                              // 49\n  return router;                                                                                              // 50\n};                                                                                                            // 51\n                                                                                                              // 52\nRouter.prototype.init = function (options) {};                                                                // 53\n                                                                                                              // 54\nRouter.prototype.configure = function (options) {                                                             // 55\n  var self = this;                                                                                            // 56\n                                                                                                              // 57\n  options = options || {};                                                                                    // 58\n                                                                                                              // 59\n  var toArray = function (value) {                                                                            // 60\n    if (!value)                                                                                               // 61\n      return [];                                                                                              // 62\n                                                                                                              // 63\n    if (_.isArray(value))                                                                                     // 64\n      return value;                                                                                           // 65\n                                                                                                              // 66\n    return [value];                                                                                           // 67\n  };                                                                                                          // 68\n                                                                                                              // 69\n  // e.g. before: fn OR before: [fn1, fn2]                                                                    // 70\n  _.each(Iron.Router.HOOK_TYPES, function eachHookType (type) {                                               // 71\n    if (options[type]) {                                                                                      // 72\n      _.each(toArray(options[type]), function eachHook (hook) {                                               // 73\n        self.addHook(type, hook);                                                                             // 74\n      });                                                                                                     // 75\n                                                                                                              // 76\n      delete options[type];                                                                                   // 77\n    }                                                                                                         // 78\n  });                                                                                                         // 79\n                                                                                                              // 80\n  this.options = this.options || {};                                                                          // 81\n  _.extend(this.options, options);                                                                            // 82\n                                                                                                              // 83\n  return this;                                                                                                // 84\n};                                                                                                            // 85\n                                                                                                              // 86\n/**                                                                                                           // 87\n * Just to support legacy calling. Doesn't really serve much purpose.                                         // 88\n */                                                                                                           // 89\nRouter.prototype.map = function (fn) {                                                                        // 90\n  return fn.call(this);                                                                                       // 91\n};                                                                                                            // 92\n                                                                                                              // 93\n/*                                                                                                            // 94\n * XXX removing for now until this is thought about more carefully.                                           // 95\nRouter.prototype.use = function (path, fn, opts) {                                                            // 96\n  if (typeof path === 'function') {                                                                           // 97\n    opts = fn || {};                                                                                          // 98\n    opts.mount = true;                                                                                        // 99\n    opts.where = opts.where || 'server';                                                                      // 100\n    this._stack.push(path, opts);                                                                             // 101\n  } else {                                                                                                    // 102\n    opts = opts || {};                                                                                        // 103\n    opts.mount = true;                                                                                        // 104\n    opts.where = opts.where || 'server';                                                                      // 105\n    this._stack.push(path, fn, opts);                                                                         // 106\n  }                                                                                                           // 107\n                                                                                                              // 108\n  return this;                                                                                                // 109\n};                                                                                                            // 110\n*/                                                                                                            // 111\n                                                                                                              // 112\n//XXX seems like we could put a params method on the route directly and make it reactive                      // 113\nRouter.prototype.route = function (path, fn, opts) {                                                          // 114\n  var typeOf = function (val) { return Object.prototype.toString.call(val); };                                // 115\n  assert(typeOf(path) === '[object String]' || typeOf(path) === '[object RegExp]', \"Router.route requires a path that is a string or regular expression.\");\n                                                                                                              // 117\n  if (typeof fn === 'object') {                                                                               // 118\n    opts = fn;                                                                                                // 119\n    fn = opts.action;                                                                                         // 120\n  }                                                                                                           // 121\n                                                                                                              // 122\n  var route = new Route(path, fn, opts);                                                                      // 123\n                                                                                                              // 124\n  opts = opts || {};                                                                                          // 125\n                                                                                                              // 126\n  // don't mount the route                                                                                    // 127\n  opts.mount = false;                                                                                         // 128\n                                                                                                              // 129\n  // stack expects a function which is exactly what a new Route returns!                                      // 130\n  var handler = this._stack.push(path, route, opts);                                                          // 131\n                                                                                                              // 132\n  handler.route = route;                                                                                      // 133\n  route.handler = handler;                                                                                    // 134\n  route.router = this;                                                                                        // 135\n                                                                                                              // 136\n  assert(!this.routes._byPath[handler.path],                                                                  // 137\n    \"A route for the path \" + JSON.stringify(handler.path) + \" already exists by the name of \" + JSON.stringify(handler.name) + \".\");\n  this.routes._byPath[handler.path] = route;                                                                  // 139\n                                                                                                              // 140\n  this.routes.push(route);                                                                                    // 141\n                                                                                                              // 142\n  if (typeof handler.name === 'string')                                                                       // 143\n    this.routes[handler.name] = route;                                                                        // 144\n                                                                                                              // 145\n  return route;                                                                                               // 146\n};                                                                                                            // 147\n                                                                                                              // 148\n/**                                                                                                           // 149\n * Find the first route for the given url and options.                                                        // 150\n */                                                                                                           // 151\nRouter.prototype.findFirstRoute = function (url) {                                                            // 152\n  var isMatch;                                                                                                // 153\n  var routeHandler;                                                                                           // 154\n  for (var i = 0; i < this.routes.length; i++) {                                                              // 155\n    route = this.routes[i];                                                                                   // 156\n                                                                                                              // 157\n    // only matches if the url matches AND the                                                                // 158\n    // current environment matches.                                                                           // 159\n    isMatch = route.handler.test(url, {                                                                       // 160\n      where: Meteor.isServer ? 'server' : 'client'                                                            // 161\n    });                                                                                                       // 162\n                                                                                                              // 163\n    if (isMatch)                                                                                              // 164\n      return route;                                                                                           // 165\n  }                                                                                                           // 166\n                                                                                                              // 167\n  return null;                                                                                                // 168\n};                                                                                                            // 169\n                                                                                                              // 170\nRouter.prototype.path = function (routeName, params, options) {                                               // 171\n  var route = this.routes[routeName];                                                                         // 172\n  warn(route, \"You called Router.path for a route named \" + JSON.stringify(routeName) + \" but that route doesn't seem to exist. Are you sure you created it?\");\n  return route && route.path(params, options);                                                                // 174\n};                                                                                                            // 175\n                                                                                                              // 176\nRouter.prototype.url = function (routeName, params, options) {                                                // 177\n  var route = this.routes[routeName];                                                                         // 178\n  warn(route, \"You called Router.url for a route named \" + JSON.stringify(routeName) + \" but that route doesn't seem to exist. Are you sure you created it?\");\n  return route && route.url(params, options);                                                                 // 180\n};                                                                                                            // 181\n                                                                                                              // 182\n/**                                                                                                           // 183\n * Create a new controller for a dispatch.                                                                    // 184\n */                                                                                                           // 185\nRouter.prototype.createController = function (url, context) {                                                 // 186\n  // see if there's a route for this url and environment                                                      // 187\n  // it's possible that we find a route but it's a client                                                     // 188\n  // route so we don't instantiate its controller and instead                                                 // 189\n  // use an anonymous controller to run the route.                                                            // 190\n  var route = this.findFirstRoute(url);                                                                       // 191\n  var controller;                                                                                             // 192\n                                                                                                              // 193\n  context = context || {};                                                                                    // 194\n                                                                                                              // 195\n  if (route)                                                                                                  // 196\n    // let the route decide what controller to use                                                            // 197\n    controller = route.createController({layout: this._layout});                                              // 198\n  else                                                                                                        // 199\n    // create an anonymous controller                                                                         // 200\n    controller = new RouteController({layout: this._layout});                                                 // 201\n                                                                                                              // 202\n  controller.router = this;                                                                                   // 203\n  controller.configureFromUrl(url, context, {reactive: false});                                               // 204\n  return controller;                                                                                          // 205\n};                                                                                                            // 206\n                                                                                                              // 207\nRouter.prototype.setTemplateNameConverter = function (fn) {                                                   // 208\n  this._templateNameConverter = fn;                                                                           // 209\n  return this;                                                                                                // 210\n};                                                                                                            // 211\n                                                                                                              // 212\nRouter.prototype.setControllerNameConverter = function (fn) {                                                 // 213\n  this._controllerNameConverter = fn;                                                                         // 214\n  return this;                                                                                                // 215\n};                                                                                                            // 216\n                                                                                                              // 217\nRouter.prototype.toTemplateName = function (str) {                                                            // 218\n  if (this._templateNameConverter)                                                                            // 219\n    return this._templateNameConverter(str);                                                                  // 220\n  else                                                                                                        // 221\n    return Iron.utils.classCase(str);                                                                         // 222\n};                                                                                                            // 223\n                                                                                                              // 224\nRouter.prototype.toControllerName = function (str) {                                                          // 225\n  if (this._controllerNameConverter)                                                                          // 226\n    return this._controllerNameConverter(str);                                                                // 227\n  else                                                                                                        // 228\n    return Iron.utils.classCase(str) + 'Controller';                                                          // 229\n};                                                                                                            // 230\n                                                                                                              // 231\n/**                                                                                                           // 232\n *                                                                                                            // 233\n * Add a hook to all routes. The hooks will apply to all routes,                                              // 234\n * unless you name routes to include or exclude via `only` and `except` options                               // 235\n *                                                                                                            // 236\n * @param {String} [type] one of 'load', 'unload', 'before' or 'after'                                        // 237\n * @param {Object} [options] Options to controll the hooks [optional]                                         // 238\n * @param {Function} [hook] Callback to run                                                                   // 239\n * @return {IronRouter}                                                                                       // 240\n * @api public                                                                                                // 241\n *                                                                                                            // 242\n */                                                                                                           // 243\n                                                                                                              // 244\nRouter.prototype.addHook = function(type, hook, options) {                                                    // 245\n  var self = this;                                                                                            // 246\n                                                                                                              // 247\n  options = options || {};                                                                                    // 248\n                                                                                                              // 249\n  var toArray = function (input) {                                                                            // 250\n    if (!input)                                                                                               // 251\n      return [];                                                                                              // 252\n    else if (_.isArray(input))                                                                                // 253\n      return input;                                                                                           // 254\n    else                                                                                                      // 255\n      return [input];                                                                                         // 256\n  }                                                                                                           // 257\n                                                                                                              // 258\n  if (options.only)                                                                                           // 259\n    options.only = toArray(options.only);                                                                     // 260\n  if (options.except)                                                                                         // 261\n    options.except = toArray(options.except);                                                                 // 262\n                                                                                                              // 263\n  var hooks = this._globalHooks[type] = this._globalHooks[type] || [];                                        // 264\n                                                                                                              // 265\n  var hookWithOptions = function () {                                                                         // 266\n    var thisArg = this;                                                                                       // 267\n    var args = arguments;                                                                                     // 268\n    // this allows us to bind hooks to options that get looked up when you call                               // 269\n    // this.lookupOption from within the hook. And it looks better to keep                                    // 270\n    // plugin/hook related options close to their definitions instead of                                      // 271\n    // Router.configure. But we use a dynamic variable so we don't have to                                    // 272\n    // pass the options explicitly as an argument and plugin creators can                                     // 273\n    // just use this.lookupOption which will follow the proper lookup chain from                              // 274\n    // \"this\", local options, dynamic variable options, route, router, etc.                                   // 275\n    return CurrentOptions.withValue(options, function () {                                                    // 276\n      return self.lookupHook(hook).apply(thisArg, args);                                                      // 277\n    });                                                                                                       // 278\n  };                                                                                                          // 279\n                                                                                                              // 280\n  hooks.push({options: options, hook: hookWithOptions});                                                      // 281\n  return this;                                                                                                // 282\n};                                                                                                            // 283\n                                                                                                              // 284\n/**                                                                                                           // 285\n * If the argument is a function return it directly. If it's a string, see if                                 // 286\n * there is a function in the Iron.Router.hooks namespace. Throw an error if we                               // 287\n * can't find the hook.                                                                                       // 288\n */                                                                                                           // 289\nRouter.prototype.lookupHook = function (nameOrFn) {                                                           // 290\n  var fn = nameOrFn;                                                                                          // 291\n                                                                                                              // 292\n  // if we already have a func just return it                                                                 // 293\n  if (_.isFunction(fn))                                                                                       // 294\n    return fn;                                                                                                // 295\n                                                                                                              // 296\n  // look up one of the out-of-box hooks like                                                                 // 297\n  // 'loaded or 'dataNotFound' if the nameOrFn is a                                                           // 298\n  // string                                                                                                   // 299\n  if (_.isString(fn)) {                                                                                       // 300\n    if (_.isFunction(Iron.Router.hooks[fn]))                                                                  // 301\n      return Iron.Router.hooks[fn];                                                                           // 302\n  }                                                                                                           // 303\n                                                                                                              // 304\n  // we couldn't find it so throw an error                                                                    // 305\n  throw new Error(\"No hook found named: \" + nameOrFn);                                                        // 306\n};                                                                                                            // 307\n                                                                                                              // 308\n/**                                                                                                           // 309\n *                                                                                                            // 310\n * Fetch the list of global hooks that apply to the given route name.                                         // 311\n * Hooks are defined by the .addHook() function above.                                                        // 312\n *                                                                                                            // 313\n * @param {String} [type] one of IronRouter.HOOK_TYPES                                                        // 314\n * @param {String} [name] the name of the route we are interested in                                          // 315\n * @return {[Function]} [hooks] an array of hooks to run                                                      // 316\n * @api public                                                                                                // 317\n *                                                                                                            // 318\n */                                                                                                           // 319\n                                                                                                              // 320\nRouter.prototype.getHooks = function(type, name) {                                                            // 321\n  var self = this;                                                                                            // 322\n  var hooks = [];                                                                                             // 323\n                                                                                                              // 324\n  _.each(this._globalHooks[type], function(hook) {                                                            // 325\n    var options = hook.options;                                                                               // 326\n                                                                                                              // 327\n    if (options.except && _.include(options.except, name))                                                    // 328\n      return [];                                                                                              // 329\n                                                                                                              // 330\n    if (options.only && ! _.include(options.only, name))                                                      // 331\n      return [];                                                                                              // 332\n                                                                                                              // 333\n    hooks.push(hook.hook);                                                                                    // 334\n  });                                                                                                         // 335\n                                                                                                              // 336\n  return hooks;                                                                                               // 337\n};                                                                                                            // 338\n                                                                                                              // 339\nRouter.HOOK_TYPES = [                                                                                         // 340\n  'onRun',                                                                                                    // 341\n  'onRerun',                                                                                                  // 342\n  'onBeforeAction',                                                                                           // 343\n  'onAfterAction',                                                                                            // 344\n  'onStop',                                                                                                   // 345\n                                                                                                              // 346\n  // not technically a hook but we'll use it                                                                  // 347\n  // in a similar way. This will cause waitOn                                                                 // 348\n  // to be added as a method to the Router and then                                                           // 349\n  // it can be selectively applied to specific routes                                                         // 350\n  'waitOn',                                                                                                   // 351\n  'subscriptions',                                                                                            // 352\n                                                                                                              // 353\n  // legacy hook types but we'll let them slide                                                               // 354\n  'load', // onRun                                                                                            // 355\n  'before', // onBeforeAction                                                                                 // 356\n  'after', // onAfterAction                                                                                   // 357\n  'unload' // onStop                                                                                          // 358\n];                                                                                                            // 359\n                                                                                                              // 360\n/**                                                                                                           // 361\n * A namespace for hooks keyed by name.                                                                       // 362\n */                                                                                                           // 363\nRouter.hooks = {};                                                                                            // 364\n                                                                                                              // 365\n                                                                                                              // 366\n/**                                                                                                           // 367\n * A namespace for plugin functions keyed by name.                                                            // 368\n */                                                                                                           // 369\nRouter.plugins = {};                                                                                          // 370\n                                                                                                              // 371\n/**                                                                                                           // 372\n * Auto add helper mtehods for all the hooks.                                                                 // 373\n */                                                                                                           // 374\n                                                                                                              // 375\n_.each(Router.HOOK_TYPES, function (type) {                                                                   // 376\n  Router.prototype[type] = function (hook, options) {                                                         // 377\n    this.addHook(type, hook, options);                                                                        // 378\n  };                                                                                                          // 379\n});                                                                                                           // 380\n                                                                                                              // 381\n/**                                                                                                           // 382\n * Add a plugin to the router instance.                                                                       // 383\n */                                                                                                           // 384\nRouter.prototype.plugin = function (nameOrFn, options) {                                                      // 385\n  var func;                                                                                                   // 386\n                                                                                                              // 387\n  if (typeof nameOrFn === 'function')                                                                         // 388\n    func = nameOrFn;                                                                                          // 389\n  else if (typeof nameOrFn === 'string')                                                                      // 390\n    func = Iron.Router.plugins[nameOrFn];                                                                     // 391\n                                                                                                              // 392\n  if (!func)                                                                                                  // 393\n    throw new Error(\"No plugin found named \" + JSON.stringify(nameOrFn));                                     // 394\n                                                                                                              // 395\n  // fn(router, options)                                                                                      // 396\n  func.call(this, this, options);                                                                             // 397\n                                                                                                              // 398\n  return this;                                                                                                // 399\n};                                                                                                            // 400\n                                                                                                              // 401\nIron.Router = Router;                                                                                         // 402\n                                                                                                              // 403\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/iron:router/lib/hooks.js                                                                          //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nif (typeof Template !== 'undefined') {                                                                        // 1\n  /**                                                                                                         // 2\n   * The default anonymous loading template.                                                                  // 3\n   */                                                                                                         // 4\n  var defaultLoadingTemplate = new Template('DefaultLoadingTemplate', function () {                           // 5\n    return 'Loading...';                                                                                      // 6\n  });                                                                                                         // 7\n                                                                                                              // 8\n  /**                                                                                                         // 9\n   * The default anonymous data not found template.                                                           // 10\n   */                                                                                                         // 11\n  var defaultDataNotFoundTemplate = new Template('DefaultDataNotFoundTemplate', function () {                 // 12\n    return 'Data not found...';                                                                               // 13\n  });                                                                                                         // 14\n}                                                                                                             // 15\n                                                                                                              // 16\n/**                                                                                                           // 17\n * Automatically render a loading template into the main region if the                                        // 18\n * controller is not ready (i.e. this.ready() is false). If no loadingTemplate                                // 19\n * is defined use some default text.                                                                          // 20\n */                                                                                                           // 21\n                                                                                                              // 22\nRouter.hooks.loading = function () {                                                                          // 23\n  // if we're ready just pass through                                                                         // 24\n  if (this.ready()) {                                                                                         // 25\n    this.next();                                                                                              // 26\n    return;                                                                                                   // 27\n  }                                                                                                           // 28\n                                                                                                              // 29\n  var template = this.lookupOption('loadingTemplate');                                                        // 30\n  this.render(template || defaultLoadingTemplate);                                                            // 31\n  this.renderRegions();                                                                                       // 32\n};                                                                                                            // 33\n                                                                                                              // 34\n/**                                                                                                           // 35\n * Render a \"data not found\" template if a global data function returns a falsey                              // 36\n * value                                                                                                      // 37\n */                                                                                                           // 38\nRouter.hooks.dataNotFound = function () {                                                                     // 39\n  if (!this.ready()) {                                                                                        // 40\n    this.next();                                                                                              // 41\n    return;                                                                                                   // 42\n  }                                                                                                           // 43\n                                                                                                              // 44\n  var data = this.lookupOption('data');                                                                       // 45\n  var dataValue;                                                                                              // 46\n  var template = this.lookupOption('notFoundTemplate');                                                       // 47\n                                                                                                              // 48\n  if (typeof data === 'function') {                                                                           // 49\n    if (!(dataValue = data.call(this))) {                                                                     // 50\n      this.render(template || defaultDataNotFoundTemplate);                                                   // 51\n      this.renderRegions();                                                                                   // 52\n      return;                                                                                                 // 53\n    }                                                                                                         // 54\n  }                                                                                                           // 55\n                                                                                                              // 56\n  // okay never mind just pass along now                                                                      // 57\n  this.next();                                                                                                // 58\n};                                                                                                            // 59\n                                                                                                              // 60\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/iron:router/lib/helpers.js                                                                        //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n/*****************************************************************************/                               // 1\n/* Imports */                                                                                                 // 2\n/*****************************************************************************/                               // 3\nvar warn = Iron.utils.warn;                                                                                   // 4\nvar DynamicTemplate = Iron.DynamicTemplate;                                                                   // 5\nvar debug = Iron.utils.debug('iron:router <helpers>');                                                        // 6\n                                                                                                              // 7\n/*****************************************************************************/                               // 8\n/* UI Helpers */                                                                                              // 9\n/*****************************************************************************/                               // 10\n                                                                                                              // 11\n/**                                                                                                           // 12\n * Render the Router to a specific location on the page instead of the                                        // 13\n * document.body.                                                                                             // 14\n */                                                                                                           // 15\nUI.registerHelper('Router', new Blaze.Template('Router', function () {                                        // 16\n  return Router.createView();                                                                                 // 17\n}));                                                                                                          // 18\n                                                                                                              // 19\n/**                                                                                                           // 20\n * Returns a relative path given a route name, data context and optional query                                // 21\n * and hash parameters.                                                                                       // 22\n */                                                                                                           // 23\nUI.registerHelper('pathFor', function (options) {                                                             // 24\n  var routeName;                                                                                              // 25\n                                                                                                              // 26\n  if (arguments.length > 1) {                                                                                 // 27\n    routeName = arguments[0];                                                                                 // 28\n    options = arguments[1] || {};                                                                             // 29\n  }                                                                                                           // 30\n                                                                                                              // 31\n  var opts = options && options.hash;                                                                         // 32\n                                                                                                              // 33\n  opts = opts || {};                                                                                          // 34\n                                                                                                              // 35\n  var path = '';                                                                                              // 36\n  var query = opts.query;                                                                                     // 37\n  var hash = opts.hash;                                                                                       // 38\n  var routeName = routeName || opts.route;                                                                    // 39\n  var data = _.extend({}, opts.data || this);                                                                 // 40\n                                                                                                              // 41\n  var route = Router.routes[routeName];                                                                       // 42\n  warn(route, \"pathFor couldn't find a route named \" + JSON.stringify(routeName));                            // 43\n                                                                                                              // 44\n  if (route) {                                                                                                // 45\n    _.each(route.handler.compiledUrl.keys, function (keyConfig) {                                             // 46\n      var key = keyConfig.name;                                                                               // 47\n      if (_.has(opts, key)) {                                                                                 // 48\n        data[key] = EJSON.clone(opts[key]);                                                                   // 49\n                                                                                                              // 50\n        // so the option doesn't end up on the element as an attribute                                        // 51\n        delete opts[key];                                                                                     // 52\n      }                                                                                                       // 53\n    });                                                                                                       // 54\n                                                                                                              // 55\n    path = route.path(data, {query: query, hash: hash});                                                      // 56\n  }                                                                                                           // 57\n                                                                                                              // 58\n  return path;                                                                                                // 59\n});                                                                                                           // 60\n                                                                                                              // 61\n/**                                                                                                           // 62\n * Returns a relative path given a route name, data context and optional query                                // 63\n * and hash parameters.                                                                                       // 64\n */                                                                                                           // 65\nUI.registerHelper('urlFor', function (options) {                                                              // 66\n  var routeName;                                                                                              // 67\n                                                                                                              // 68\n  if (arguments.length > 1) {                                                                                 // 69\n    routeName = arguments[0];                                                                                 // 70\n    options = arguments[1] || {};                                                                             // 71\n  }                                                                                                           // 72\n                                                                                                              // 73\n  var opts = options && options.hash;                                                                         // 74\n                                                                                                              // 75\n  opts = opts || {};                                                                                          // 76\n  var url = '';                                                                                               // 77\n  var query = opts.query;                                                                                     // 78\n  var hash = opts.hash;                                                                                       // 79\n  var routeName = routeName || opts.route;                                                                    // 80\n  var data = _.extend({}, opts.data || this);                                                                 // 81\n                                                                                                              // 82\n  var route = Router.routes[routeName];                                                                       // 83\n  warn(route, \"urlFor couldn't find a route named \" + JSON.stringify(routeName));                             // 84\n                                                                                                              // 85\n  if (route) {                                                                                                // 86\n    _.each(route.handler.compiledUrl.keys, function (keyConfig) {                                             // 87\n      var key = keyConfig.name;                                                                               // 88\n      if (_.has(opts, key)) {                                                                                 // 89\n        data[key] = EJSON.clone(opts[key]);                                                                   // 90\n                                                                                                              // 91\n        // so the option doesn't end up on the element as an attribute                                        // 92\n        delete opts[key];                                                                                     // 93\n      }                                                                                                       // 94\n    });                                                                                                       // 95\n                                                                                                              // 96\n    url = route.url(data, {query: query, hash: hash});                                                        // 97\n  }                                                                                                           // 98\n                                                                                                              // 99\n  return url;                                                                                                 // 100\n});                                                                                                           // 101\n                                                                                                              // 102\n/**                                                                                                           // 103\n * Create a link with optional content block.                                                                 // 104\n *                                                                                                            // 105\n * Example:                                                                                                   // 106\n *   {{#linkTo route=\"one\" query=\"query\" hash=\"hash\" class=\"my-cls\"}}                                         // 107\n *    <div>My Custom Link Content</div>                                                                       // 108\n *   {{/linkTo}}                                                                                              // 109\n */                                                                                                           // 110\nUI.registerHelper('linkTo', new Blaze.Template('linkTo', function () {                                        // 111\n  var self = this;                                                                                            // 112\n  var opts = DynamicTemplate.getInclusionArguments(this);                                                     // 113\n                                                                                                              // 114\n  if (typeof opts !== 'object')                                                                               // 115\n    throw new Error(\"linkTo options must be key value pairs such as {{#linkTo route='my.route.name'}}. You passed: \" + JSON.stringify(opts));\n                                                                                                              // 117\n  opts = opts || {};                                                                                          // 118\n  var path = '';                                                                                              // 119\n  var query = opts.query;                                                                                     // 120\n  var hash = opts.hash;                                                                                       // 121\n  var routeName = opts.route;                                                                                 // 122\n  var data = _.extend({}, opts.data || DynamicTemplate.getParentDataContext(this));                           // 123\n  var route = Router.routes[routeName];                                                                       // 124\n  var paramKeys;                                                                                              // 125\n                                                                                                              // 126\n  warn(route, \"linkTo couldn't find a route named \" + JSON.stringify(routeName));                             // 127\n                                                                                                              // 128\n  if (route) {                                                                                                // 129\n    _.each(route.handler.compiledUrl.keys, function (keyConfig) {                                             // 130\n      var key = keyConfig.name;                                                                               // 131\n      if (_.has(opts, key)) {                                                                                 // 132\n        data[key] = EJSON.clone(opts[key]);                                                                   // 133\n                                                                                                              // 134\n        // so the option doesn't end up on the element as an attribute                                        // 135\n        delete opts[key];                                                                                     // 136\n      }                                                                                                       // 137\n    });                                                                                                       // 138\n                                                                                                              // 139\n    path = route.path(data, {query: query, hash: hash});                                                      // 140\n  }                                                                                                           // 141\n                                                                                                              // 142\n  // anything that isn't one of our keywords we'll assume is an attributed                                    // 143\n  // intended for the <a> tag                                                                                 // 144\n  var attrs = _.omit(opts, 'route', 'query', 'hash', 'data');                                                 // 145\n  attrs.href = path;                                                                                          // 146\n                                                                                                              // 147\n  return Blaze.With(function () {                                                                             // 148\n    return DynamicTemplate.getParentDataContext(self);                                                        // 149\n  }, function () {                                                                                            // 150\n    return HTML.A(attrs, self.templateContentBlock);                                                          // 151\n  });                                                                                                         // 152\n}));                                                                                                          // 153\n                                                                                                              // 154\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/iron:router/lib/router_client.js                                                                  //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nvar MiddlewareStack = Iron.MiddlewareStack;                                                                   // 1\nvar Url = Iron.Url;                                                                                           // 2\nvar Layout = Iron.Layout;                                                                                     // 3\nvar assert = Iron.utils.assert;                                                                               // 4\nvar DEFAULT_NOT_FOUND_TEMPLATE = '__IronRouterNotFound__';                                                    // 5\nvar NO_ROUTES_TEMPLATE = '__IronRouterNoRoutes__';                                                            // 6\n                                                                                                              // 7\n/**                                                                                                           // 8\n * Client specific initialization.                                                                            // 9\n */                                                                                                           // 10\nRouter.prototype.init = function (options) {                                                                  // 11\n  var self = this;                                                                                            // 12\n                                                                                                              // 13\n  // the current RouteController from a dispatch                                                              // 14\n  self._currentController = null;                                                                             // 15\n                                                                                                              // 16\n  // the current route                                                                                        // 17\n  self._currentRoute = null;                                                                                  // 18\n                                                                                                              // 19\n  // the current() dep                                                                                        // 20\n  self._currentDep = new Deps.Dependency;                                                                     // 21\n                                                                                                              // 22\n  // the location computation                                                                                 // 23\n  self._locationComputation = null;                                                                           // 24\n                                                                                                              // 25\n  // the ui layout for the router                                                                             // 26\n  self._layout = new Layout({template: self.options.layoutTemplate});                                         // 27\n                                                                                                              // 28\n  Meteor.startup(function () {                                                                                // 29\n    setTimeout(function maybeAutoInsertRouter () {                                                            // 30\n      if (self.options.autoRender !== false)                                                                  // 31\n        self.insert({el: document.body});                                                                     // 32\n    });                                                                                                       // 33\n  });                                                                                                         // 34\n};                                                                                                            // 35\n                                                                                                              // 36\n/**                                                                                                           // 37\n * Programmatically insert the router into document.body or a particular                                      // 38\n * element with {el: 'selector'}                                                                              // 39\n */                                                                                                           // 40\nRouter.prototype.insert = function (options) {                                                                // 41\n  this._layout.insert(options);                                                                               // 42\n  return this;                                                                                                // 43\n};                                                                                                            // 44\n                                                                                                              // 45\n/**                                                                                                           // 46\n * Returns a layout view that can be used in a UI helper to render the router                                 // 47\n * to a particular place.                                                                                     // 48\n */                                                                                                           // 49\nRouter.prototype.createView = function () {                                                                   // 50\n  return this._layout.create();                                                                               // 51\n};                                                                                                            // 52\n                                                                                                              // 53\nRouter.prototype.lookupNotFoundTemplate = function () {                                                       // 54\n  if (this.options.notFoundTemplate)                                                                          // 55\n    return this.options.notFoundTemplate;                                                                     // 56\n                                                                                                              // 57\n  return (this.routes.length === 0) ? NO_ROUTES_TEMPLATE : DEFAULT_NOT_FOUND_TEMPLATE;                        // 58\n};                                                                                                            // 59\n                                                                                                              // 60\nRouter.prototype.lookupLayoutTemplate = function () {                                                         // 61\n  return this.options.layoutTemplate;                                                                         // 62\n};                                                                                                            // 63\n                                                                                                              // 64\nRouter.prototype.dispatch = function (url, context, done) {                                                   // 65\n  var self = this;                                                                                            // 66\n                                                                                                              // 67\n  assert(typeof url === 'string', \"expected url string in router dispatch\");                                  // 68\n                                                                                                              // 69\n  var controller = this._currentController;                                                                   // 70\n  var route = this.findFirstRoute(url);                                                                       // 71\n  var prevRoute = this._currentRoute;                                                                         // 72\n                                                                                                              // 73\n  this._currentRoute = route;                                                                                 // 74\n                                                                                                              // 75\n                                                                                                              // 76\n  // even if we already have an existing controller we'll stop it                                             // 77\n  // and start it again. But since the actual controller instance                                             // 78\n  // hasn't changed, the helpers won't need to rerun.                                                         // 79\n  if (this._currentController)                                                                                // 80\n    this._currentController.stop();                                                                           // 81\n                                                                                                              // 82\n  //XXX Instead of this, let's consider making all RouteControllers                                           // 83\n  //    singletons that get configured at dispatch. Will revisit this                                         // 84\n  //    after v1.0.                                                                                           // 85\n  if (controller && route && prevRoute === route) {                                                           // 86\n    // this will change the parameters dep so anywhere you call                                               // 87\n    // this.getParams will rerun if the parameters have changed                                               // 88\n    controller.configureFromUrl(url, context);                                                                // 89\n  } else {                                                                                                    // 90\n    // Looks like we're on a new route so we'll create a new                                                  // 91\n    // controller from scratch.                                                                               // 92\n    controller = this.createController(url, context);                                                         // 93\n  }                                                                                                           // 94\n                                                                                                              // 95\n  this._currentController = controller;                                                                       // 96\n                                                                                                              // 97\n  controller.dispatch(self._stack, url, function onRouterDispatchCompleted (err) {                            // 98\n    if (err)                                                                                                  // 99\n      throw err;                                                                                              // 100\n    else {                                                                                                    // 101\n      if (!controller.isHandled()) {                                                                          // 102\n        // if we aren't at the initial state, we haven't yet given the server                                 // 103\n        //   a true chance to handle this URL. We'll try.                                                     // 104\n        //   if the server CAN'T handle the router, we'll be back,                                            // 105\n        //   but as the very first route handled on the client,                                               // 106\n        //   and so initial will be true.                                                                     // 107\n        var state = Deps.nonreactive(function () { return controller.location.get().options.historyState; }); // 108\n                                                                                                              // 109\n        if (state && state.initial === true) {                                                                // 110\n          // looks like there's no handlers so let's give a default                                           // 111\n          // not found message! Use the layout defined in global config                                       // 112\n          // if we have one.                                                                                  // 113\n          //                                                                                                  // 114\n          // NOTE: this => controller                                                                         // 115\n          this.layout(this.lookupOption('layoutTemplate'), {data: {url: this.url}});                          // 116\n                                                                                                              // 117\n          var notFoundTemplate = this.lookupOption('notFoundTemplate');                                       // 118\n                                                                                                              // 119\n          if (!notFoundTemplate)                                                                              // 120\n            notFoundTemplate = (self.routes.length === 0) ? NO_ROUTES_TEMPLATE : DEFAULT_NOT_FOUND_TEMPLATE;  // 121\n          this.render(notFoundTemplate, {data: {url: this.url}});                                             // 122\n          this.renderRegions();                                                                               // 123\n                                                                                                              // 124\n          // kind of janky but will work for now. this makes sure                                             // 125\n          // that any downstream functions see that this route has been                                       // 126\n          // handled so we don't get into an infinite loop with the                                           // 127\n          // server.                                                                                          // 128\n          controller.isHandled = function () { return true; };                                                // 129\n        }                                                                                                     // 130\n                                                                                                              // 131\n        return done && done.call(controller);                                                                 // 132\n      }                                                                                                       // 133\n    }                                                                                                         // 134\n  });                                                                                                         // 135\n                                                                                                              // 136\n  // Note: even if the controller didn't actually change I change the                                         // 137\n  // currentDep since if we did a dispatch, the url changed and that                                          // 138\n  // means either we have a new controller OR the parameters for an                                           // 139\n  // existing controller have changed.                                                                        // 140\n  if (this._currentController == controller)                                                                  // 141\n    this._currentDep.changed();                                                                               // 142\n                                                                                                              // 143\n  return controller;                                                                                          // 144\n};                                                                                                            // 145\n                                                                                                              // 146\n/**                                                                                                           // 147\n * The current controller object.                                                                             // 148\n */                                                                                                           // 149\nRouter.prototype.current = function () {                                                                      // 150\n  this._currentDep.depend();                                                                                  // 151\n  return this._currentController;                                                                             // 152\n};                                                                                                            // 153\n                                                                                                              // 154\n/*                                                                                                            // 155\n * Scroll to a specific location on the page.                                                                 // 156\n * Overridable by applications that want to customize this behavior.                                          // 157\n */                                                                                                           // 158\nRouter.prototype._scrollToHash = function (hashValue) {                                                       // 159\n  try {                                                                                                       // 160\n    var $target = $(hashValue);                                                                               // 161\n    $('html, body').scrollTop($target.offset().top);                                                          // 162\n  } catch (e) {                                                                                               // 163\n    // in case the hashValue is bogus just bail out                                                           // 164\n  }                                                                                                           // 165\n};                                                                                                            // 166\n                                                                                                              // 167\n/**                                                                                                           // 168\n * Start reacting to location changes.                                                                        // 169\n */                                                                                                           // 170\nRouter.prototype.start = function () {                                                                        // 171\n  var self = this;                                                                                            // 172\n  var prevLocation;                                                                                           // 173\n                                                                                                              // 174\n  self._locationComputation = Deps.autorun(function onLocationChange (c) {                                    // 175\n    var controller;                                                                                           // 176\n    var loc = Iron.Location.get();                                                                            // 177\n    var hash, pathname, search;                                                                               // 178\n    var current = self._currentController;                                                                    // 179\n                                                                                                              // 180\n    if (!current || (prevLocation && prevLocation.path !== loc.path)) {                                       // 181\n      controller = self.dispatch(loc.href, null, function onRouterStartDispatchCompleted (error) {            // 182\n        // if we're going to the server cancel the url change                                                 // 183\n        if (!this.isHandled()) {                                                                              // 184\n          loc.cancelUrlChange();                                                                              // 185\n          window.location = loc.path;                                                                         // 186\n        }                                                                                                     // 187\n      });                                                                                                     // 188\n    } else {                                                                                                  // 189\n      self._scrollToHash(loc.hash);                                                                           // 190\n      // either the query or hash has changed so configure the current                                        // 191\n      // controller again.                                                                                    // 192\n      current.configureFromUrl(loc.href);                                                                     // 193\n    }                                                                                                         // 194\n                                                                                                              // 195\n    prevLocation = loc;                                                                                       // 196\n  });                                                                                                         // 197\n};                                                                                                            // 198\n                                                                                                              // 199\n/**                                                                                                           // 200\n * Stop all computations and put us in a not started state.                                                   // 201\n */                                                                                                           // 202\nRouter.prototype.stop = function () {                                                                         // 203\n  if (!this._isStarted)                                                                                       // 204\n    return;                                                                                                   // 205\n                                                                                                              // 206\n  if (this._locationComputation)                                                                              // 207\n    this._locationComputation.stop();                                                                         // 208\n                                                                                                              // 209\n  if (this._currentController)                                                                                // 210\n    this._currentController.stop();                                                                           // 211\n                                                                                                              // 212\n  this._isStarted = false;                                                                                    // 213\n};                                                                                                            // 214\n                                                                                                              // 215\n/**                                                                                                           // 216\n * Go to a given path or route name, optinally pass parameters and options.                                   // 217\n *                                                                                                            // 218\n * Example:                                                                                                   // 219\n * router.go('itemsShowRoute', {_id: 5}, {hash: 'frag', query: 'string});                                     // 220\n */                                                                                                           // 221\nRouter.prototype.go = function (routeNameOrPath, params, options) {                                           // 222\n  var self = this;                                                                                            // 223\n  var isPath = /^\\/|http/;                                                                                    // 224\n  var path;                                                                                                   // 225\n                                                                                                              // 226\n  options = options || {};                                                                                    // 227\n                                                                                                              // 228\n  if (isPath.test(routeNameOrPath)) {                                                                         // 229\n    // it's a path!                                                                                           // 230\n    path = routeNameOrPath;                                                                                   // 231\n  } else {                                                                                                    // 232\n    // it's a route name!                                                                                     // 233\n    var route = self.routes[routeNameOrPath];                                                                 // 234\n    assert(route, \"No route found named \" + JSON.stringify(routeNameOrPath));                                 // 235\n    path = route.path(params, _.extend(options, {throwOnMissingParams: true}));                               // 236\n  }                                                                                                           // 237\n                                                                                                              // 238\n  // let Iron Location handle it and we'll pick up the change in                                              // 239\n  // Iron.Location.get() computation.                                                                         // 240\n  Iron.Location.go(path, options);                                                                            // 241\n};                                                                                                            // 242\n                                                                                                              // 243\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/iron:router/lib/plugins.js                                                                        //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n/**                                                                                                           // 1\n * Simple plugin wrapper around the loading hook.                                                             // 2\n */                                                                                                           // 3\nRouter.plugins.loading = function (router, options) {                                                         // 4\n  router.onBeforeAction('loading', options);                                                                  // 5\n};                                                                                                            // 6\n                                                                                                              // 7\n/**                                                                                                           // 8\n * Simple plugin wrapper around the dataNotFound hook.                                                        // 9\n */                                                                                                           // 10\nRouter.plugins.dataNotFound = function (router, options) {                                                    // 11\n  router.onBeforeAction('dataNotFound', options);                                                             // 12\n};                                                                                                            // 13\n                                                                                                              // 14\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/iron:router/lib/global_router.js                                                                  //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nRouter = new Iron.Router;                                                                                     // 1\n                                                                                                              // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/iron:router/lib/template.templates.js                                                             //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n                                                                                                              // 1\nTemplate.__checkName(\"__IronRouterNotFound__\");                                                               // 2\nTemplate[\"__IronRouterNotFound__\"] = new Template(\"Template.__IronRouterNotFound__\", (function() {            // 3\n  var view = this;                                                                                            // 4\n  return HTML.DIV({                                                                                           // 5\n    style: \"width: 600px; margin: 0 auto; padding: 20px;\"                                                     // 6\n  }, \"\\n    \", HTML.DIV({                                                                                     // 7\n    style: \"font-size: 18pt; color: #999;\"                                                                    // 8\n  }, \"\\n      Oops, looks like there's no route on the client or the server for url: \\\"\", Blaze.View(\"lookup:url\", function() {\n    return Spacebars.mustache(view.lookup(\"url\"));                                                            // 10\n  }), '.\"\\n    '), \"\\n  \");                                                                                   // 11\n}));                                                                                                          // 12\n                                                                                                              // 13\nTemplate.__checkName(\"__IronRouterNoRoutes__\");                                                               // 14\nTemplate[\"__IronRouterNoRoutes__\"] = new Template(\"Template.__IronRouterNoRoutes__\", (function() {            // 15\n  var view = this;                                                                                            // 16\n  return HTML.Raw('<div style=\"font-family: helvetica; color: #777; max-width: 600px; margin: 20px auto;\">\\n      <h1 style=\"text-align: center; margin: 0; font-size: 48pt;\">\\n        iron:router\\n      </h1>\\n      <p style=\"text-align: center; font-size: 1.3em;\">\\n        Organize your Meteor application.\\n      </p>\\n      <div style=\"margin: 50px 0px;\">\\n        <pre style=\"background: #f2f2f2; margin: 0; padding: 10px;\">\\nRouter.route(\\'/\\', function () {\\n  this.render(\\'Home\\', {\\n    data: function () { return Items.findOne({_id: this.params._id}); }\\n  });\\n});\\n        </pre>\\n      </div>\\n      <div style=\"margin: 50px 0px;\">\\n        Check it out on Github:<br>\\n        <a href=\"https://github.com/eventedmind/iron-router\" target=\"_blank\">https://github.com/eventedmind/iron-router</a>\\n        <br>\\n        <br>\\n        And check out the new Guide:<br>\\n        <a href=\"https://iron-meteor.github.io/iron-router\" target=\"_blank\">\\n          https://iron-meteor.github.io/iron-router\\n        </a>\\n      </div>\\n    </div>');\n}));                                                                                                          // 18\n                                                                                                              // 19\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]