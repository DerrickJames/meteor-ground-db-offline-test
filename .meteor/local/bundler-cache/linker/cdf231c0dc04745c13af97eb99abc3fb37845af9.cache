[{"type":"js","data":"(function () {\n\n/* Imports */\nvar _ = Package.underscore._;\nvar WebApp = Package.webapp.WebApp;\nvar main = Package.webapp.main;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar EJSON = Package.ejson.EJSON;\nvar Meteor = Package.meteor.Meteor;\nvar Iron = Package['iron:core'].Iron;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar CurrentOptions, HTTP_METHODS, RouteController, Route, Router, route;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                   //\n// packages/iron_router/packages/iron_router.js                                                      //\n//                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                     //\n(function () {                                                                                       // 1\n                                                                                                     // 2\n////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                            //     // 4\n// packages/iron:router/lib/current_options.js                                                //     // 5\n//                                                                                            //     // 6\n////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                              //     // 8\n/**                                                                                           // 1   // 9\n * Allows for dynamic scoping of options variables. Primarily intended to be                  // 2   // 10\n * used in the RouteController.prototype.lookupOption method.                                 // 3   // 11\n */                                                                                           // 4   // 12\nCurrentOptions = new Meteor.EnvironmentVariable;                                              // 5   // 13\n                                                                                              // 6   // 14\n////////////////////////////////////////////////////////////////////////////////////////////////     // 15\n                                                                                                     // 16\n}).call(this);                                                                                       // 17\n                                                                                                     // 18\n                                                                                                     // 19\n                                                                                                     // 20\n                                                                                                     // 21\n                                                                                                     // 22\n                                                                                                     // 23\n(function () {                                                                                       // 24\n                                                                                                     // 25\n////////////////////////////////////////////////////////////////////////////////////////////////     // 26\n//                                                                                            //     // 27\n// packages/iron:router/lib/http_methods.js                                                   //     // 28\n//                                                                                            //     // 29\n////////////////////////////////////////////////////////////////////////////////////////////////     // 30\n                                                                                              //     // 31\nHTTP_METHODS = [                                                                              // 1   // 32\n  'get',                                                                                      // 2   // 33\n  'post',                                                                                     // 3   // 34\n  'put',                                                                                      // 4   // 35\n  'delete',                                                                                   // 5   // 36\n  'patch'                                                                                     // 6   // 37\n];                                                                                            // 7   // 38\n                                                                                              // 8   // 39\n////////////////////////////////////////////////////////////////////////////////////////////////     // 40\n                                                                                                     // 41\n}).call(this);                                                                                       // 42\n                                                                                                     // 43\n                                                                                                     // 44\n                                                                                                     // 45\n                                                                                                     // 46\n                                                                                                     // 47\n                                                                                                     // 48\n(function () {                                                                                       // 49\n                                                                                                     // 50\n////////////////////////////////////////////////////////////////////////////////////////////////     // 51\n//                                                                                            //     // 52\n// packages/iron:router/lib/route_controller.js                                               //     // 53\n//                                                                                            //     // 54\n////////////////////////////////////////////////////////////////////////////////////////////////     // 55\n                                                                                              //     // 56\n/*****************************************************************************/               // 1   // 57\n/* Imports */                                                                                 // 2   // 58\n/*****************************************************************************/               // 3   // 59\nvar Controller = Iron.Controller;                                                             // 4   // 60\nvar Url = Iron.Url;                                                                           // 5   // 61\nvar MiddlewareStack = Iron.MiddlewareStack;                                                   // 6   // 62\nvar assert = Iron.utils.assert;                                                               // 7   // 63\n                                                                                              // 8   // 64\n/*****************************************************************************/               // 9   // 65\n/* RouteController */                                                                         // 10  // 66\n/*****************************************************************************/               // 11  // 67\nRouteController = Controller.extend({                                                         // 12  // 68\n  constructor: function (options) {                                                           // 13  // 69\n    RouteController.__super__.constructor.apply(this, arguments);                             // 14  // 70\n    options = options || {};                                                                  // 15  // 71\n    this.options = options;                                                                   // 16  // 72\n    this._onStopCallbacks = [];                                                               // 17  // 73\n    this.route = options.route;                                                               // 18  // 74\n    this.params = [];                                                                         // 19  // 75\n                                                                                              // 20  // 76\n    // Sometimes the data property can be defined on route options,                           // 21  // 77\n    // or even on the global router config. And people will expect the                        // 22  // 78\n    // data function to be available on the controller instance if it                         // 23  // 79\n    // is defined anywhere in the chain. This ensure that if we have                          // 24  // 80\n    // a data function somewhere in the chain, you can call this.data().                      // 25  // 81\n    var data = this.lookupOption('data');                                                     // 26  // 82\n                                                                                              // 27  // 83\n    if (typeof data === 'function')                                                           // 28  // 84\n      this.data = _.bind(data, this);                                                         // 29  // 85\n    else if (typeof data !== 'undefined')                                                     // 30  // 86\n      this.data = function () { return data; };                                               // 31  // 87\n                                                                                              // 32  // 88\n    this.init(options);                                                                       // 33  // 89\n  }                                                                                           // 34  // 90\n});                                                                                           // 35  // 91\n                                                                                              // 36  // 92\n/**                                                                                           // 37  // 93\n * Returns an option value following an \"options chain\" which is this path:                   // 38  // 94\n *                                                                                            // 39  // 95\n *   this.options                                                                             // 40  // 96\n *   this (which includes the proto chain)                                                    // 41  // 97\n *   this.route.options                                                                       // 42  // 98\n *   dynamic variable                                                                         // 43  // 99\n *   this.router.options                                                                      // 44  // 100\n */                                                                                           // 45  // 101\nRouteController.prototype.lookupOption = function (key) {                                     // 46  // 102\n  // this.route.options                                                                       // 47  // 103\n  // NOTE: we've debated whether route options should come before controller but              // 48  // 104\n  // Tom has convinced me that it's easier for people to think about overriding               // 49  // 105\n  // controller stuff at the route option level. However, this has the possibly               // 50  // 106\n  // counterintuitive effect that if you define this.someprop = true on the                   // 51  // 107\n  // controller instance, and you have someprop defined as an option on your                  // 52  // 108\n  // Route, the route option will take precedence.                                            // 53  // 109\n  if (this.route && this.route.options && _.has(this.route.options, key))                     // 54  // 110\n    return this.route.options[key];                                                           // 55  // 111\n                                                                                              // 56  // 112\n  // this.options                                                                             // 57  // 113\n  if (_.has(this.options, key))                                                               // 58  // 114\n    return this.options[key];                                                                 // 59  // 115\n                                                                                              // 60  // 116\n  // \"this\" object or its proto chain                                                         // 61  // 117\n  if (typeof this[key] !== 'undefined')                                                       // 62  // 118\n    return this[key];                                                                         // 63  // 119\n                                                                                              // 64  // 120\n  // see if we have the CurrentOptions dynamic variable set.                                  // 65  // 121\n  var opts = CurrentOptions.get();                                                            // 66  // 122\n  if (opts && _.has(opts, key))                                                               // 67  // 123\n    return opts[key];                                                                         // 68  // 124\n                                                                                              // 69  // 125\n  // this.router.options                                                                      // 70  // 126\n  if (this.router && this.router.options && _.has(this.router.options, key))                  // 71  // 127\n    return this.router.options[key];                                                          // 72  // 128\n};                                                                                            // 73  // 129\n                                                                                              // 74  // 130\nRouteController.prototype.configureFromUrl = function (url, context, options) {               // 75  // 131\n  assert(typeof url === 'string', 'url must be a string');                                    // 76  // 132\n  context = context || {};                                                                    // 77  // 133\n  this.request = context.request || {};                                                       // 78  // 134\n  this.response = context.response || {};                                                     // 79  // 135\n  this.url = context.url || url;                                                              // 80  // 136\n  this.originalUrl = context.originalUrl || url;                                              // 81  // 137\n  this.method = this.request.method;                                                          // 82  // 138\n  if (this.route) {                                                                           // 83  // 139\n    // pass options to that we can set reactive: false                                        // 84  // 140\n    this.setParams(this.route.params(url), options);                                          // 85  // 141\n  }                                                                                           // 86  // 142\n};                                                                                            // 87  // 143\n                                                                                              // 88  // 144\n/**                                                                                           // 89  // 145\n * Returns an array of hook functions for the given hook names. Hooks are                     // 90  // 146\n * collected in this order:                                                                   // 91  // 147\n *                                                                                            // 92  // 148\n * router global hooks                                                                        // 93  // 149\n * route option hooks                                                                         // 94  // 150\n * prototype of the controller                                                                // 95  // 151\n * this object for the controller                                                             // 96  // 152\n *                                                                                            // 97  // 153\n * For example, this.collectHooks('onBeforeAction', 'before')                                 // 98  // 154\n * will return an array of hook functions where the key is either onBeforeAction              // 99  // 155\n * or before.                                                                                 // 100\n *                                                                                            // 101\n * Hook values can also be strings in which case they are looked up in the                    // 102\n * Iron.Router.hooks object.                                                                  // 103\n *                                                                                            // 104\n * TODO: Add an options last argument which can specify to only collect hooks                 // 105\n * for a particular environment (client, server or both).                                     // 106\n */                                                                                           // 107\nRouteController.prototype._collectHooks = function (/* hook1, alias1, ... */) {               // 108\n  var self = this;                                                                            // 109\n  var hookNames = _.toArray(arguments);                                                       // 110\n                                                                                              // 111\n  var getHookValues = function (value) {                                                      // 112\n    if (!value)                                                                               // 113\n      return [];                                                                              // 114\n    var lookupHook = self.router.lookupHook;                                                  // 115\n    var hooks = _.isArray(value) ? value : [value];                                           // 116\n    return _.map(hooks, function (h) { return lookupHook(h); });                              // 117\n  };                                                                                          // 118\n                                                                                              // 119\n  var collectInheritedHooks = function (ctor, hookName) {                                     // 120\n    var hooks = [];                                                                           // 121\n                                                                                              // 122\n    if (ctor.__super__)                                                                       // 123\n      hooks = hooks.concat(collectInheritedHooks(ctor.__super__.constructor, hookName));      // 124\n                                                                                              // 125\n    return _.has(ctor.prototype, hookName) ?                                                  // 126\n      hooks.concat(getHookValues(ctor.prototype[hookName])) : hooks;                          // 127\n  };                                                                                          // 128\n                                                                                              // 129\n  var eachHook = function (cb) {                                                              // 130\n    for (var i = 0; i < hookNames.length; i++) {                                              // 131\n      cb(hookNames[i]);                                                                       // 132\n    }                                                                                         // 133\n  };                                                                                          // 134\n                                                                                              // 135\n  var routerHooks = [];                                                                       // 136\n  eachHook(function (hook) {                                                                  // 137\n    var name = self.route && self.route.getName();                                            // 138\n    var hooks = self.router.getHooks(hook, name);                                             // 139\n    routerHooks = routerHooks.concat(hooks);                                                  // 140\n  });                                                                                         // 141\n                                                                                              // 142\n  var protoHooks = [];                                                                        // 143\n  eachHook(function (hook) {                                                                  // 144\n    var hooks = collectInheritedHooks(self.constructor, hook);                                // 145\n    protoHooks = protoHooks.concat(hooks);                                                    // 146\n  });                                                                                         // 147\n                                                                                              // 148\n  var thisHooks = [];                                                                         // 149\n  eachHook(function (hook) {                                                                  // 150\n    if (_.has(self, hook)) {                                                                  // 151\n      var hooks = getHookValues(self[hook]);                                                  // 152\n      thisHooks = thisHooks.concat(hooks);                                                    // 153\n    }                                                                                         // 154\n  });                                                                                         // 155\n                                                                                              // 156\n  var routeHooks = [];                                                                        // 157\n  if (self.route) {                                                                           // 158\n    eachHook(function (hook) {                                                                // 159\n      var hooks = getHookValues(self.route.options[hook]);                                    // 160\n      routeHooks = routeHooks.concat(hooks);                                                  // 161\n    });                                                                                       // 162\n  }                                                                                           // 163\n                                                                                              // 164\n  var allHooks = routerHooks                                                                  // 165\n    .concat(routeHooks)                                                                       // 166\n    .concat(protoHooks)                                                                       // 167\n    .concat(thisHooks);                                                                       // 168\n                                                                                              // 169\n  return allHooks;                                                                            // 170\n};                                                                                            // 171\n                                                                                              // 172\n/**                                                                                           // 173\n * Runs each hook and returns the number of hooks that were run.                              // 174\n */                                                                                           // 175\nRouteController.prototype.runHooks = function (/* hook, alias1, ...*/ ) {                     // 176\n  var hooks = this._collectHooks.apply(this, arguments);                                      // 177\n  for (var i = 0, l = hooks.length; i < l; i++) {                                             // 178\n    var h = hooks[i];                                                                         // 179\n    h.call(this);                                                                             // 180\n  }                                                                                           // 181\n  return hooks.length;                                                                        // 182\n};                                                                                            // 183\n                                                                                              // 184\nRouteController.prototype.getParams = function () {                                           // 185\n  return this.params;                                                                         // 186\n};                                                                                            // 187\n                                                                                              // 188\nRouteController.prototype.setParams = function (value) {                                      // 189\n  this.params = value;                                                                        // 190\n  return this;                                                                                // 191\n};                                                                                            // 192\n                                                                                              // 193\nIron.RouteController = RouteController;                                                       // 194\n                                                                                              // 195\n////////////////////////////////////////////////////////////////////////////////////////////////     // 252\n                                                                                                     // 253\n}).call(this);                                                                                       // 254\n                                                                                                     // 255\n                                                                                                     // 256\n                                                                                                     // 257\n                                                                                                     // 258\n                                                                                                     // 259\n                                                                                                     // 260\n(function () {                                                                                       // 261\n                                                                                                     // 262\n////////////////////////////////////////////////////////////////////////////////////////////////     // 263\n//                                                                                            //     // 264\n// packages/iron:router/lib/route_controller_server.js                                        //     // 265\n//                                                                                            //     // 266\n////////////////////////////////////////////////////////////////////////////////////////////////     // 267\n                                                                                              //     // 268\n/*****************************************************************************/               // 1   // 269\n/* Imports */                                                                                 // 2   // 270\n/*****************************************************************************/               // 3   // 271\nvar Fiber = Npm.require('fibers');                                                            // 4   // 272\nvar Controller = Iron.Controller;                                                             // 5   // 273\nvar Url = Iron.Url;                                                                           // 6   // 274\nvar MiddlewareStack = Iron.MiddlewareStack;                                                   // 7   // 275\n                                                                                              // 8   // 276\n/*****************************************************************************/               // 9   // 277\n/* RouteController */                                                                         // 10  // 278\n/*****************************************************************************/               // 11  // 279\n                                                                                              // 12  // 280\n/**                                                                                           // 13  // 281\n * Server specific initialization.                                                            // 14  // 282\n */                                                                                           // 15  // 283\nRouteController.prototype.init = function (options) {};                                       // 16  // 284\n                                                                                              // 17  // 285\n/**                                                                                           // 18  // 286\n * Let this controller run a dispatch process. This function will be called                   // 19  // 287\n * from the router. That way, any state associated with the dispatch can go on                // 20  // 288\n * the controller instance. Note: no result returned from dispatch because its                // 21  // 289\n * run inside its own fiber. Might at some point move the fiber stuff to a                    // 22  // 290\n * higher layer.                                                                              // 23  // 291\n */                                                                                           // 24  // 292\nRouteController.prototype.dispatch = function (stack, url, done) {                            // 25  // 293\n  var self = this;                                                                            // 26  // 294\n  Fiber(function () {                                                                         // 27  // 295\n    stack.dispatch(url, self, done);                                                          // 28  // 296\n  }).run();                                                                                   // 29  // 297\n};                                                                                            // 30  // 298\n                                                                                              // 31  // 299\n/**                                                                                           // 32  // 300\n * Run a route on the server. When the router runs its middleware stack, it                   // 33  // 301\n * can run regular middleware functions or it can run a route. There should                   // 34  // 302\n * only one route object per path as where there may be many middleware                       // 35  // 303\n * functions.                                                                                 // 36  // 304\n *                                                                                            // 37  // 305\n * For example:                                                                               // 38  // 306\n *                                                                                            // 39  // 307\n *   \"/some/path\" => [middleware1, middleware2, route, middleware3]                           // 40  // 308\n *                                                                                            // 41  // 309\n * When a route is dispatched, it tells the controller to _runRoute so that                   // 42  // 310\n * the controller can control the process. At this point we should already be                 // 43  // 311\n * in a dispatch so a computation should already exist.                                       // 44  // 312\n */                                                                                           // 45  // 313\nRouteController.prototype._runRoute = function (route, url, done) {                           // 46  // 314\n  var self = this;                                                                            // 47  // 315\n  var stack = new MiddlewareStack;                                                            // 48  // 316\n                                                                                              // 49  // 317\n  var onRunHooks = this._collectHooks('onRun', 'load');                                       // 50  // 318\n  stack = stack.append(onRunHooks, {where: 'server'});                                        // 51  // 319\n                                                                                              // 52  // 320\n  var beforeHooks = this._collectHooks('onBeforeAction', 'before');                           // 53  // 321\n  stack.append(beforeHooks, {where: 'server'});                                               // 54  // 322\n                                                                                              // 55  // 323\n  // make sure the action stack has at least one handler on it that defaults                  // 56  // 324\n  // to the 'action' method                                                                   // 57  // 325\n  if (route._actionStack.length === 0) {                                                      // 58  // 326\n    route._actionStack.push(route._path, 'action', route.options);                            // 59  // 327\n  }                                                                                           // 60  // 328\n                                                                                              // 61  // 329\n  stack = stack.concat(route._actionStack);                                                   // 62  // 330\n  stack.dispatch(url, this, done);                                                            // 63  // 331\n                                                                                              // 64  // 332\n  // run the after hooks.                                                                     // 65  // 333\n  this.next = function () {};                                                                 // 66  // 334\n  this.runHooks('onAfterAction', 'after');                                                    // 67  // 335\n};                                                                                            // 68  // 336\n                                                                                              // 69  // 337\n////////////////////////////////////////////////////////////////////////////////////////////////     // 338\n                                                                                                     // 339\n}).call(this);                                                                                       // 340\n                                                                                                     // 341\n                                                                                                     // 342\n                                                                                                     // 343\n                                                                                                     // 344\n                                                                                                     // 345\n                                                                                                     // 346\n(function () {                                                                                       // 347\n                                                                                                     // 348\n////////////////////////////////////////////////////////////////////////////////////////////////     // 349\n//                                                                                            //     // 350\n// packages/iron:router/lib/route.js                                                          //     // 351\n//                                                                                            //     // 352\n////////////////////////////////////////////////////////////////////////////////////////////////     // 353\n                                                                                              //     // 354\nvar Url = Iron.Url;                                                                           // 1   // 355\nvar MiddlewareStack = Iron.MiddlewareStack;                                                   // 2   // 356\nvar assert = Iron.utils.assert;                                                               // 3   // 357\n                                                                                              // 4   // 358\n/*****************************************************************************/               // 5   // 359\n/* Both */                                                                                    // 6   // 360\n/*****************************************************************************/               // 7   // 361\nRoute = function (path, fn, options) {                                                        // 8   // 362\n  var route = function (req, res, next) {                                                     // 9   // 363\n    var controller = this;                                                                    // 10  // 364\n    controller.request = req;                                                                 // 11  // 365\n    controller.response = res;                                                                // 12  // 366\n    route.dispatch(req.url, controller, next);                                                // 13  // 367\n  }                                                                                           // 14  // 368\n                                                                                              // 15  // 369\n  if (typeof fn === 'object') {                                                               // 16  // 370\n    options = fn;                                                                             // 17  // 371\n    fn = options.action;                                                                      // 18  // 372\n  }                                                                                           // 19  // 373\n                                                                                              // 20  // 374\n  options = options || {};                                                                    // 21  // 375\n                                                                                              // 22  // 376\n  if (typeof path === 'string' && path.charAt(0) !== '/') {                                   // 23  // 377\n    path = options.path ? options.path : '/' + path                                           // 24  // 378\n  }                                                                                           // 25  // 379\n                                                                                              // 26  // 380\n  // extend the route function with properties from this instance and its                     // 27  // 381\n  // prototype.                                                                               // 28  // 382\n  _.extend(route, this.constructor.prototype);                                                // 29  // 383\n                                                                                              // 30  // 384\n  // always good to have options                                                              // 31  // 385\n  options = route.options = options || {};                                                    // 32  // 386\n                                                                                              // 33  // 387\n  // the main action function as well as any HTTP VERB action functions will go               // 34  // 388\n  // onto this stack.                                                                         // 35  // 389\n  route._actionStack = new MiddlewareStack;                                                   // 36  // 390\n                                                                                              // 37  // 391\n  // any before hooks will go onto this stack to make sure they get executed                  // 38  // 392\n  // before the action stack.                                                                 // 39  // 393\n  route._beforeStack = new MiddlewareStack;                                                   // 40  // 394\n  route._beforeStack.append(route.options.onBeforeAction);                                    // 41  // 395\n  route._beforeStack.append(route.options.before);                                            // 42  // 396\n                                                                                              // 43  // 397\n  // after hooks get run after the action stack                                               // 44  // 398\n  route._afterStack = new MiddlewareStack;                                                    // 45  // 399\n  route._afterStack.append(route.options.onAfterAction);                                      // 46  // 400\n  route._afterStack.append(route.options.after);                                              // 47  // 401\n                                                                                              // 48  // 402\n                                                                                              // 49  // 403\n  // track which methods this route uses                                                      // 50  // 404\n  route._methods = {};                                                                        // 51  // 405\n                                                                                              // 52  // 406\n  if (typeof fn === 'string') {                                                               // 53  // 407\n    route._actionStack.push(path, _.extend(options, {                                         // 54  // 408\n      template: fn                                                                            // 55  // 409\n    }));                                                                                      // 56  // 410\n  } else if (typeof fn === 'function' || typeof fn === 'object') {                            // 57  // 411\n    route._actionStack.push(path, fn, options);                                               // 58  // 412\n  }                                                                                           // 59  // 413\n                                                                                              // 60  // 414\n  route._path = path;                                                                         // 61  // 415\n  return route;                                                                               // 62  // 416\n};                                                                                            // 63  // 417\n                                                                                              // 64  // 418\n/**                                                                                           // 65  // 419\n * The name of the route is actually stored on the handler since a route is a                 // 66  // 420\n * function that has an unassignable \"name\" property.                                         // 67  // 421\n */                                                                                           // 68  // 422\nRoute.prototype.getName = function () {                                                       // 69  // 423\n  return this.handler && this.handler.name;                                                   // 70  // 424\n};                                                                                            // 71  // 425\n                                                                                              // 72  // 426\n/**                                                                                           // 73  // 427\n * Returns an appropriate RouteController constructor the this Route.                         // 74  // 428\n *                                                                                            // 75  // 429\n * There are three possibilities:                                                             // 76  // 430\n *                                                                                            // 77  // 431\n *  1. controller option provided as a string on the route                                    // 78  // 432\n *  2. a controller in the global namespace with the converted name of the route              // 79  // 433\n *  3. a default RouteController                                                              // 80  // 434\n *                                                                                            // 81  // 435\n */                                                                                           // 82  // 436\nRoute.prototype.findControllerConstructor = function () {                                     // 83  // 437\n  var self = this;                                                                            // 84  // 438\n                                                                                              // 85  // 439\n  var resolve = function (name, opts) {                                                       // 86  // 440\n    opts = opts || {};                                                                        // 87  // 441\n    var C = Iron.utils.resolve(name);                                                         // 88  // 442\n    if (!C || !RouteController.prototype.isPrototypeOf(C.prototype)) {                        // 89  // 443\n      if (opts.supressErrors !== true)                                                        // 90  // 444\n        throw new Error(\"RouteController '\" + name + \"' is not defined.\");                    // 91  // 445\n      else                                                                                    // 92  // 446\n        return undefined;                                                                     // 93  // 447\n    } else {                                                                                  // 94  // 448\n      return C;                                                                               // 95  // 449\n    }                                                                                         // 96  // 450\n  };                                                                                          // 97  // 451\n                                                                                              // 98  // 452\n  var convert = function (name) {                                                             // 99  // 453\n    return self.router.toControllerName(name);                                                // 100\n  };                                                                                          // 101\n                                                                                              // 102\n  var result;                                                                                 // 103\n  var name = this.getName();                                                                  // 104\n                                                                                              // 105\n  // the controller was set directly                                                          // 106\n  if (typeof this.options.controller === 'function')                                          // 107\n    return this.options.controller;                                                           // 108\n                                                                                              // 109\n  // was the controller specified precisely by name? then resolve to an actual                // 110\n  // javascript constructor value                                                             // 111\n  else if (typeof this.options.controller === 'string')                                       // 112\n    return resolve(this.options.controller);                                                  // 113\n                                                                                              // 114\n  // is there a default route controller configured?                                          // 115\n  else if (this.router && this.router.options.controller) {                                   // 116\n    if (typeof this.router.options.controller === 'function')                                 // 117\n      return this.router.options.controller;                                                  // 118\n                                                                                              // 119\n    else if (typeof this.router.options.controller === 'string')                              // 120\n      return resolve(this.router.options.controller);                                         // 121\n  }                                                                                           // 122\n                                                                                              // 123\n  // otherwise do we have a name? try to convert the name to a controller name                // 124\n  // and resolve it to a value                                                                // 125\n  else if (name && (result = resolve(convert(name), {supressErrors: true})))                  // 126\n    return result;                                                                            // 127\n                                                                                              // 128\n  // otherwise just use an anonymous route controller                                         // 129\n  else                                                                                        // 130\n    return RouteController;                                                                   // 131\n};                                                                                            // 132\n                                                                                              // 133\n                                                                                              // 134\n/**                                                                                           // 135\n * Create a new controller for the route.                                                     // 136\n */                                                                                           // 137\nRoute.prototype.createController = function (options) {                                       // 138\n  options = options || {};                                                                    // 139\n  var C = this.findControllerConstructor();                                                   // 140\n  options.route = this;                                                                       // 141\n  var instance = new C(options);                                                              // 142\n  return instance;                                                                            // 143\n};                                                                                            // 144\n                                                                                              // 145\nRoute.prototype.setControllerParams = function (controller, url) {                            // 146\n};                                                                                            // 147\n                                                                                              // 148\n/**                                                                                           // 149\n * Dispatch into the route's middleware stack.                                                // 150\n */                                                                                           // 151\nRoute.prototype.dispatch = function (url, context, done) {                                    // 152\n  // call runRoute on the controller which will behave similarly to the previous              // 153\n  // version of IR.                                                                           // 154\n  assert(context._runRoute, \"context doesn't have a _runRoute method\");                       // 155\n  return context._runRoute(this, url, done);                                                  // 156\n};                                                                                            // 157\n                                                                                              // 158\n/**                                                                                           // 159\n * Returns a relative path for the route.                                                     // 160\n */                                                                                           // 161\nRoute.prototype.path = function (params, options) {                                           // 162\n  return this.handler.resolve(params, options);                                               // 163\n};                                                                                            // 164\n                                                                                              // 165\n/**                                                                                           // 166\n * Return a fully qualified url for the route, given a set of parmeters and                   // 167\n * options like hash and query.                                                               // 168\n */                                                                                           // 169\nRoute.prototype.url = function (params, options) {                                            // 170\n  var path = this.path(params, options);                                                      // 171\n  var host = (options && options.host) || Meteor.absoluteUrl();                               // 172\n                                                                                              // 173\n  if (host.charAt(host.length-1) === '/');                                                    // 174\n    host = host.slice(0, host.length-1);                                                      // 175\n  return host + path;                                                                         // 176\n};                                                                                            // 177\n                                                                                              // 178\n/**                                                                                           // 179\n * Return a params object for the route given a path.                                         // 180\n */                                                                                           // 181\nRoute.prototype.params = function (path) {                                                    // 182\n  return this.handler.params(path);                                                           // 183\n};                                                                                            // 184\n                                                                                              // 185\n/**                                                                                           // 186\n * Add convenience methods for each HTTP verb.                                                // 187\n *                                                                                            // 188\n * Example:                                                                                   // 189\n *  var route = router.route('/item')                                                         // 190\n *    .get(function () { })                                                                   // 191\n *    .post(function () { })                                                                  // 192\n *    .put(function () { })                                                                   // 193\n */                                                                                           // 194\n_.each(HTTP_METHODS, function (method) {                                                      // 195\n  Route.prototype[method] = function (fn) {                                                   // 196\n    // track the method being used for OPTIONS requests.                                      // 197\n    this._methods[method] = true;                                                             // 198\n                                                                                              // 199\n    this._actionStack.push(this._path, fn, {                                                  // 200\n      // give each method a unique name so it doesn't clash with the route's                  // 201\n      // name in the action stack                                                             // 202\n      name: this.getName() + '_' + method.toLowerCase(),                                      // 203\n      method: method,                                                                         // 204\n                                                                                              // 205\n      // for now just make the handler where the same as the route, presumably a              // 206\n      // server route.                                                                        // 207\n      where: this.handler.where,                                                              // 208\n      mount: false                                                                            // 209\n    });                                                                                       // 210\n                                                                                              // 211\n    return this;                                                                              // 212\n  };                                                                                          // 213\n});                                                                                           // 214\n                                                                                              // 215\nIron.Route = Route;                                                                           // 216\n                                                                                              // 217\n////////////////////////////////////////////////////////////////////////////////////////////////     // 572\n                                                                                                     // 573\n}).call(this);                                                                                       // 574\n                                                                                                     // 575\n                                                                                                     // 576\n                                                                                                     // 577\n                                                                                                     // 578\n                                                                                                     // 579\n                                                                                                     // 580\n(function () {                                                                                       // 581\n                                                                                                     // 582\n////////////////////////////////////////////////////////////////////////////////////////////////     // 583\n//                                                                                            //     // 584\n// packages/iron:router/lib/router.js                                                         //     // 585\n//                                                                                            //     // 586\n////////////////////////////////////////////////////////////////////////////////////////////////     // 587\n                                                                                              //     // 588\n/*****************************************************************************/               // 1   // 589\n/* Imports */                                                                                 // 2   // 590\n/*****************************************************************************/               // 3   // 591\nvar MiddlewareStack = Iron.MiddlewareStack;                                                   // 4   // 592\nvar Url = Iron.Url;                                                                           // 5   // 593\nvar Layout = Iron.Layout;                                                                     // 6   // 594\nvar warn = Iron.utils.warn;                                                                   // 7   // 595\nvar assert = Iron.utils.assert;                                                               // 8   // 596\n                                                                                              // 9   // 597\nRouter = function (options) {                                                                 // 10  // 598\n  // keep the same api throughout which is:                                                   // 11  // 599\n  // fn(url, context, done);                                                                  // 12  // 600\n  function router (req, res, next) {                                                          // 13  // 601\n    //XXX this assumes no other routers on the parent stack which we should probably fix      // 14  // 602\n    router.dispatch(req.url, {                                                                // 15  // 603\n      request: req,                                                                           // 16  // 604\n      response: res                                                                           // 17  // 605\n    }, next);                                                                                 // 18  // 606\n  }                                                                                           // 19  // 607\n                                                                                              // 20  // 608\n  // the main router stack                                                                    // 21  // 609\n  router._stack = new MiddlewareStack;                                                        // 22  // 610\n                                                                                              // 23  // 611\n  // for storing global hooks like before, after, etc.                                        // 24  // 612\n  router._globalHooks = {};                                                                   // 25  // 613\n                                                                                              // 26  // 614\n  // backward compat and quicker lookup of Route handlers vs. regular function                // 27  // 615\n  // handlers.                                                                                // 28  // 616\n  router.routes = [];                                                                         // 29  // 617\n                                                                                              // 30  // 618\n  // to make sure we don't have more than one route per path                                  // 31  // 619\n  router.routes._byPath = {};                                                                 // 32  // 620\n                                                                                              // 33  // 621\n  // always good to have options                                                              // 34  // 622\n  this.configure.call(router, options);                                                       // 35  // 623\n                                                                                              // 36  // 624\n  // add proto properties to the router function                                              // 37  // 625\n  _.extend(router, this.constructor.prototype);                                               // 38  // 626\n                                                                                              // 39  // 627\n  // let client and server side routing doing different things here                           // 40  // 628\n  this.init.call(router, options);                                                            // 41  // 629\n                                                                                              // 42  // 630\n  Meteor.startup(function () {                                                                // 43  // 631\n    Meteor.defer(function () {                                                                // 44  // 632\n      if (router.options.autoStart !== false)                                                 // 45  // 633\n        router.start();                                                                       // 46  // 634\n    });                                                                                       // 47  // 635\n  });                                                                                         // 48  // 636\n                                                                                              // 49  // 637\n  return router;                                                                              // 50  // 638\n};                                                                                            // 51  // 639\n                                                                                              // 52  // 640\nRouter.prototype.init = function (options) {};                                                // 53  // 641\n                                                                                              // 54  // 642\nRouter.prototype.configure = function (options) {                                             // 55  // 643\n  var self = this;                                                                            // 56  // 644\n                                                                                              // 57  // 645\n  options = options || {};                                                                    // 58  // 646\n                                                                                              // 59  // 647\n  var toArray = function (value) {                                                            // 60  // 648\n    if (!value)                                                                               // 61  // 649\n      return [];                                                                              // 62  // 650\n                                                                                              // 63  // 651\n    if (_.isArray(value))                                                                     // 64  // 652\n      return value;                                                                           // 65  // 653\n                                                                                              // 66  // 654\n    return [value];                                                                           // 67  // 655\n  };                                                                                          // 68  // 656\n                                                                                              // 69  // 657\n  // e.g. before: fn OR before: [fn1, fn2]                                                    // 70  // 658\n  _.each(Iron.Router.HOOK_TYPES, function eachHookType (type) {                               // 71  // 659\n    if (options[type]) {                                                                      // 72  // 660\n      _.each(toArray(options[type]), function eachHook (hook) {                               // 73  // 661\n        self.addHook(type, hook);                                                             // 74  // 662\n      });                                                                                     // 75  // 663\n                                                                                              // 76  // 664\n      delete options[type];                                                                   // 77  // 665\n    }                                                                                         // 78  // 666\n  });                                                                                         // 79  // 667\n                                                                                              // 80  // 668\n  this.options = this.options || {};                                                          // 81  // 669\n  _.extend(this.options, options);                                                            // 82  // 670\n                                                                                              // 83  // 671\n  return this;                                                                                // 84  // 672\n};                                                                                            // 85  // 673\n                                                                                              // 86  // 674\n/**                                                                                           // 87  // 675\n * Just to support legacy calling. Doesn't really serve much purpose.                         // 88  // 676\n */                                                                                           // 89  // 677\nRouter.prototype.map = function (fn) {                                                        // 90  // 678\n  return fn.call(this);                                                                       // 91  // 679\n};                                                                                            // 92  // 680\n                                                                                              // 93  // 681\n/*                                                                                            // 94  // 682\n * XXX removing for now until this is thought about more carefully.                           // 95  // 683\nRouter.prototype.use = function (path, fn, opts) {                                            // 96  // 684\n  if (typeof path === 'function') {                                                           // 97  // 685\n    opts = fn || {};                                                                          // 98  // 686\n    opts.mount = true;                                                                        // 99  // 687\n    opts.where = opts.where || 'server';                                                      // 100\n    this._stack.push(path, opts);                                                             // 101\n  } else {                                                                                    // 102\n    opts = opts || {};                                                                        // 103\n    opts.mount = true;                                                                        // 104\n    opts.where = opts.where || 'server';                                                      // 105\n    this._stack.push(path, fn, opts);                                                         // 106\n  }                                                                                           // 107\n                                                                                              // 108\n  return this;                                                                                // 109\n};                                                                                            // 110\n*/                                                                                            // 111\n                                                                                              // 112\n//XXX seems like we could put a params method on the route directly and make it reactive      // 113\nRouter.prototype.route = function (path, fn, opts) {                                          // 114\n  var typeOf = function (val) { return Object.prototype.toString.call(val); };                // 115\n  assert(typeOf(path) === '[object String]' || typeOf(path) === '[object RegExp]', \"Router.route requires a path that is a string or regular expression.\");\n                                                                                              // 117\n  if (typeof fn === 'object') {                                                               // 118\n    opts = fn;                                                                                // 119\n    fn = opts.action;                                                                         // 120\n  }                                                                                           // 121\n                                                                                              // 122\n  var route = new Route(path, fn, opts);                                                      // 123\n                                                                                              // 124\n  opts = opts || {};                                                                          // 125\n                                                                                              // 126\n  // don't mount the route                                                                    // 127\n  opts.mount = false;                                                                         // 128\n                                                                                              // 129\n  // stack expects a function which is exactly what a new Route returns!                      // 130\n  var handler = this._stack.push(path, route, opts);                                          // 131\n                                                                                              // 132\n  handler.route = route;                                                                      // 133\n  route.handler = handler;                                                                    // 134\n  route.router = this;                                                                        // 135\n                                                                                              // 136\n  assert(!this.routes._byPath[handler.path],                                                  // 137\n    \"A route for the path \" + JSON.stringify(handler.path) + \" already exists by the name of \" + JSON.stringify(handler.name) + \".\");\n  this.routes._byPath[handler.path] = route;                                                  // 139\n                                                                                              // 140\n  this.routes.push(route);                                                                    // 141\n                                                                                              // 142\n  if (typeof handler.name === 'string')                                                       // 143\n    this.routes[handler.name] = route;                                                        // 144\n                                                                                              // 145\n  return route;                                                                               // 146\n};                                                                                            // 147\n                                                                                              // 148\n/**                                                                                           // 149\n * Find the first route for the given url and options.                                        // 150\n */                                                                                           // 151\nRouter.prototype.findFirstRoute = function (url) {                                            // 152\n  var isMatch;                                                                                // 153\n  var routeHandler;                                                                           // 154\n  for (var i = 0; i < this.routes.length; i++) {                                              // 155\n    route = this.routes[i];                                                                   // 156\n                                                                                              // 157\n    // only matches if the url matches AND the                                                // 158\n    // current environment matches.                                                           // 159\n    isMatch = route.handler.test(url, {                                                       // 160\n      where: Meteor.isServer ? 'server' : 'client'                                            // 161\n    });                                                                                       // 162\n                                                                                              // 163\n    if (isMatch)                                                                              // 164\n      return route;                                                                           // 165\n  }                                                                                           // 166\n                                                                                              // 167\n  return null;                                                                                // 168\n};                                                                                            // 169\n                                                                                              // 170\nRouter.prototype.path = function (routeName, params, options) {                               // 171\n  var route = this.routes[routeName];                                                         // 172\n  warn(route, \"You called Router.path for a route named \" + JSON.stringify(routeName) + \" but that route doesn't seem to exist. Are you sure you created it?\");\n  return route && route.path(params, options);                                                // 174\n};                                                                                            // 175\n                                                                                              // 176\nRouter.prototype.url = function (routeName, params, options) {                                // 177\n  var route = this.routes[routeName];                                                         // 178\n  warn(route, \"You called Router.url for a route named \" + JSON.stringify(routeName) + \" but that route doesn't seem to exist. Are you sure you created it?\");\n  return route && route.url(params, options);                                                 // 180\n};                                                                                            // 181\n                                                                                              // 182\n/**                                                                                           // 183\n * Create a new controller for a dispatch.                                                    // 184\n */                                                                                           // 185\nRouter.prototype.createController = function (url, context) {                                 // 186\n  // see if there's a route for this url and environment                                      // 187\n  // it's possible that we find a route but it's a client                                     // 188\n  // route so we don't instantiate its controller and instead                                 // 189\n  // use an anonymous controller to run the route.                                            // 190\n  var route = this.findFirstRoute(url);                                                       // 191\n  var controller;                                                                             // 192\n                                                                                              // 193\n  context = context || {};                                                                    // 194\n                                                                                              // 195\n  if (route)                                                                                  // 196\n    // let the route decide what controller to use                                            // 197\n    controller = route.createController({layout: this._layout});                              // 198\n  else                                                                                        // 199\n    // create an anonymous controller                                                         // 200\n    controller = new RouteController({layout: this._layout});                                 // 201\n                                                                                              // 202\n  controller.router = this;                                                                   // 203\n  controller.configureFromUrl(url, context, {reactive: false});                               // 204\n  return controller;                                                                          // 205\n};                                                                                            // 206\n                                                                                              // 207\nRouter.prototype.setTemplateNameConverter = function (fn) {                                   // 208\n  this._templateNameConverter = fn;                                                           // 209\n  return this;                                                                                // 210\n};                                                                                            // 211\n                                                                                              // 212\nRouter.prototype.setControllerNameConverter = function (fn) {                                 // 213\n  this._controllerNameConverter = fn;                                                         // 214\n  return this;                                                                                // 215\n};                                                                                            // 216\n                                                                                              // 217\nRouter.prototype.toTemplateName = function (str) {                                            // 218\n  if (this._templateNameConverter)                                                            // 219\n    return this._templateNameConverter(str);                                                  // 220\n  else                                                                                        // 221\n    return Iron.utils.classCase(str);                                                         // 222\n};                                                                                            // 223\n                                                                                              // 224\nRouter.prototype.toControllerName = function (str) {                                          // 225\n  if (this._controllerNameConverter)                                                          // 226\n    return this._controllerNameConverter(str);                                                // 227\n  else                                                                                        // 228\n    return Iron.utils.classCase(str) + 'Controller';                                          // 229\n};                                                                                            // 230\n                                                                                              // 231\n/**                                                                                           // 232\n *                                                                                            // 233\n * Add a hook to all routes. The hooks will apply to all routes,                              // 234\n * unless you name routes to include or exclude via `only` and `except` options               // 235\n *                                                                                            // 236\n * @param {String} [type] one of 'load', 'unload', 'before' or 'after'                        // 237\n * @param {Object} [options] Options to controll the hooks [optional]                         // 238\n * @param {Function} [hook] Callback to run                                                   // 239\n * @return {IronRouter}                                                                       // 240\n * @api public                                                                                // 241\n *                                                                                            // 242\n */                                                                                           // 243\n                                                                                              // 244\nRouter.prototype.addHook = function(type, hook, options) {                                    // 245\n  var self = this;                                                                            // 246\n                                                                                              // 247\n  options = options || {};                                                                    // 248\n                                                                                              // 249\n  var toArray = function (input) {                                                            // 250\n    if (!input)                                                                               // 251\n      return [];                                                                              // 252\n    else if (_.isArray(input))                                                                // 253\n      return input;                                                                           // 254\n    else                                                                                      // 255\n      return [input];                                                                         // 256\n  }                                                                                           // 257\n                                                                                              // 258\n  if (options.only)                                                                           // 259\n    options.only = toArray(options.only);                                                     // 260\n  if (options.except)                                                                         // 261\n    options.except = toArray(options.except);                                                 // 262\n                                                                                              // 263\n  var hooks = this._globalHooks[type] = this._globalHooks[type] || [];                        // 264\n                                                                                              // 265\n  var hookWithOptions = function () {                                                         // 266\n    var thisArg = this;                                                                       // 267\n    var args = arguments;                                                                     // 268\n    // this allows us to bind hooks to options that get looked up when you call               // 269\n    // this.lookupOption from within the hook. And it looks better to keep                    // 270\n    // plugin/hook related options close to their definitions instead of                      // 271\n    // Router.configure. But we use a dynamic variable so we don't have to                    // 272\n    // pass the options explicitly as an argument and plugin creators can                     // 273\n    // just use this.lookupOption which will follow the proper lookup chain from              // 274\n    // \"this\", local options, dynamic variable options, route, router, etc.                   // 275\n    return CurrentOptions.withValue(options, function () {                                    // 276\n      return self.lookupHook(hook).apply(thisArg, args);                                      // 277\n    });                                                                                       // 278\n  };                                                                                          // 279\n                                                                                              // 280\n  hooks.push({options: options, hook: hookWithOptions});                                      // 281\n  return this;                                                                                // 282\n};                                                                                            // 283\n                                                                                              // 284\n/**                                                                                           // 285\n * If the argument is a function return it directly. If it's a string, see if                 // 286\n * there is a function in the Iron.Router.hooks namespace. Throw an error if we               // 287\n * can't find the hook.                                                                       // 288\n */                                                                                           // 289\nRouter.prototype.lookupHook = function (nameOrFn) {                                           // 290\n  var fn = nameOrFn;                                                                          // 291\n                                                                                              // 292\n  // if we already have a func just return it                                                 // 293\n  if (_.isFunction(fn))                                                                       // 294\n    return fn;                                                                                // 295\n                                                                                              // 296\n  // look up one of the out-of-box hooks like                                                 // 297\n  // 'loaded or 'dataNotFound' if the nameOrFn is a                                           // 298\n  // string                                                                                   // 299\n  if (_.isString(fn)) {                                                                       // 300\n    if (_.isFunction(Iron.Router.hooks[fn]))                                                  // 301\n      return Iron.Router.hooks[fn];                                                           // 302\n  }                                                                                           // 303\n                                                                                              // 304\n  // we couldn't find it so throw an error                                                    // 305\n  throw new Error(\"No hook found named: \" + nameOrFn);                                        // 306\n};                                                                                            // 307\n                                                                                              // 308\n/**                                                                                           // 309\n *                                                                                            // 310\n * Fetch the list of global hooks that apply to the given route name.                         // 311\n * Hooks are defined by the .addHook() function above.                                        // 312\n *                                                                                            // 313\n * @param {String} [type] one of IronRouter.HOOK_TYPES                                        // 314\n * @param {String} [name] the name of the route we are interested in                          // 315\n * @return {[Function]} [hooks] an array of hooks to run                                      // 316\n * @api public                                                                                // 317\n *                                                                                            // 318\n */                                                                                           // 319\n                                                                                              // 320\nRouter.prototype.getHooks = function(type, name) {                                            // 321\n  var self = this;                                                                            // 322\n  var hooks = [];                                                                             // 323\n                                                                                              // 324\n  _.each(this._globalHooks[type], function(hook) {                                            // 325\n    var options = hook.options;                                                               // 326\n                                                                                              // 327\n    if (options.except && _.include(options.except, name))                                    // 328\n      return [];                                                                              // 329\n                                                                                              // 330\n    if (options.only && ! _.include(options.only, name))                                      // 331\n      return [];                                                                              // 332\n                                                                                              // 333\n    hooks.push(hook.hook);                                                                    // 334\n  });                                                                                         // 335\n                                                                                              // 336\n  return hooks;                                                                               // 337\n};                                                                                            // 338\n                                                                                              // 339\nRouter.HOOK_TYPES = [                                                                         // 340\n  'onRun',                                                                                    // 341\n  'onRerun',                                                                                  // 342\n  'onBeforeAction',                                                                           // 343\n  'onAfterAction',                                                                            // 344\n  'onStop',                                                                                   // 345\n                                                                                              // 346\n  // not technically a hook but we'll use it                                                  // 347\n  // in a similar way. This will cause waitOn                                                 // 348\n  // to be added as a method to the Router and then                                           // 349\n  // it can be selectively applied to specific routes                                         // 350\n  'waitOn',                                                                                   // 351\n  'subscriptions',                                                                            // 352\n                                                                                              // 353\n  // legacy hook types but we'll let them slide                                               // 354\n  'load', // onRun                                                                            // 355\n  'before', // onBeforeAction                                                                 // 356\n  'after', // onAfterAction                                                                   // 357\n  'unload' // onStop                                                                          // 358\n];                                                                                            // 359\n                                                                                              // 360\n/**                                                                                           // 361\n * A namespace for hooks keyed by name.                                                       // 362\n */                                                                                           // 363\nRouter.hooks = {};                                                                            // 364\n                                                                                              // 365\n                                                                                              // 366\n/**                                                                                           // 367\n * A namespace for plugin functions keyed by name.                                            // 368\n */                                                                                           // 369\nRouter.plugins = {};                                                                          // 370\n                                                                                              // 371\n/**                                                                                           // 372\n * Auto add helper mtehods for all the hooks.                                                 // 373\n */                                                                                           // 374\n                                                                                              // 375\n_.each(Router.HOOK_TYPES, function (type) {                                                   // 376\n  Router.prototype[type] = function (hook, options) {                                         // 377\n    this.addHook(type, hook, options);                                                        // 378\n  };                                                                                          // 379\n});                                                                                           // 380\n                                                                                              // 381\n/**                                                                                           // 382\n * Add a plugin to the router instance.                                                       // 383\n */                                                                                           // 384\nRouter.prototype.plugin = function (nameOrFn, options) {                                      // 385\n  var func;                                                                                   // 386\n                                                                                              // 387\n  if (typeof nameOrFn === 'function')                                                         // 388\n    func = nameOrFn;                                                                          // 389\n  else if (typeof nameOrFn === 'string')                                                      // 390\n    func = Iron.Router.plugins[nameOrFn];                                                     // 391\n                                                                                              // 392\n  if (!func)                                                                                  // 393\n    throw new Error(\"No plugin found named \" + JSON.stringify(nameOrFn));                     // 394\n                                                                                              // 395\n  // fn(router, options)                                                                      // 396\n  func.call(this, this, options);                                                             // 397\n                                                                                              // 398\n  return this;                                                                                // 399\n};                                                                                            // 400\n                                                                                              // 401\nIron.Router = Router;                                                                         // 402\n                                                                                              // 403\n////////////////////////////////////////////////////////////////////////////////////////////////     // 992\n                                                                                                     // 993\n}).call(this);                                                                                       // 994\n                                                                                                     // 995\n                                                                                                     // 996\n                                                                                                     // 997\n                                                                                                     // 998\n                                                                                                     // 999\n                                                                                                     // 1000\n(function () {                                                                                       // 1001\n                                                                                                     // 1002\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1003\n//                                                                                            //     // 1004\n// packages/iron:router/lib/hooks.js                                                          //     // 1005\n//                                                                                            //     // 1006\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1007\n                                                                                              //     // 1008\nif (typeof Template !== 'undefined') {                                                        // 1   // 1009\n  /**                                                                                         // 2   // 1010\n   * The default anonymous loading template.                                                  // 3   // 1011\n   */                                                                                         // 4   // 1012\n  var defaultLoadingTemplate = new Template('DefaultLoadingTemplate', function () {           // 5   // 1013\n    return 'Loading...';                                                                      // 6   // 1014\n  });                                                                                         // 7   // 1015\n                                                                                              // 8   // 1016\n  /**                                                                                         // 9   // 1017\n   * The default anonymous data not found template.                                           // 10  // 1018\n   */                                                                                         // 11  // 1019\n  var defaultDataNotFoundTemplate = new Template('DefaultDataNotFoundTemplate', function () { // 12  // 1020\n    return 'Data not found...';                                                               // 13  // 1021\n  });                                                                                         // 14  // 1022\n}                                                                                             // 15  // 1023\n                                                                                              // 16  // 1024\n/**                                                                                           // 17  // 1025\n * Automatically render a loading template into the main region if the                        // 18  // 1026\n * controller is not ready (i.e. this.ready() is false). If no loadingTemplate                // 19  // 1027\n * is defined use some default text.                                                          // 20  // 1028\n */                                                                                           // 21  // 1029\n                                                                                              // 22  // 1030\nRouter.hooks.loading = function () {                                                          // 23  // 1031\n  // if we're ready just pass through                                                         // 24  // 1032\n  if (this.ready()) {                                                                         // 25  // 1033\n    this.next();                                                                              // 26  // 1034\n    return;                                                                                   // 27  // 1035\n  }                                                                                           // 28  // 1036\n                                                                                              // 29  // 1037\n  var template = this.lookupOption('loadingTemplate');                                        // 30  // 1038\n  this.render(template || defaultLoadingTemplate);                                            // 31  // 1039\n  this.renderRegions();                                                                       // 32  // 1040\n};                                                                                            // 33  // 1041\n                                                                                              // 34  // 1042\n/**                                                                                           // 35  // 1043\n * Render a \"data not found\" template if a global data function returns a falsey              // 36  // 1044\n * value                                                                                      // 37  // 1045\n */                                                                                           // 38  // 1046\nRouter.hooks.dataNotFound = function () {                                                     // 39  // 1047\n  if (!this.ready()) {                                                                        // 40  // 1048\n    this.next();                                                                              // 41  // 1049\n    return;                                                                                   // 42  // 1050\n  }                                                                                           // 43  // 1051\n                                                                                              // 44  // 1052\n  var data = this.lookupOption('data');                                                       // 45  // 1053\n  var dataValue;                                                                              // 46  // 1054\n  var template = this.lookupOption('notFoundTemplate');                                       // 47  // 1055\n                                                                                              // 48  // 1056\n  if (typeof data === 'function') {                                                           // 49  // 1057\n    if (!(dataValue = data.call(this))) {                                                     // 50  // 1058\n      this.render(template || defaultDataNotFoundTemplate);                                   // 51  // 1059\n      this.renderRegions();                                                                   // 52  // 1060\n      return;                                                                                 // 53  // 1061\n    }                                                                                         // 54  // 1062\n  }                                                                                           // 55  // 1063\n                                                                                              // 56  // 1064\n  // okay never mind just pass along now                                                      // 57  // 1065\n  this.next();                                                                                // 58  // 1066\n};                                                                                            // 59  // 1067\n                                                                                              // 60  // 1068\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1069\n                                                                                                     // 1070\n}).call(this);                                                                                       // 1071\n                                                                                                     // 1072\n                                                                                                     // 1073\n                                                                                                     // 1074\n                                                                                                     // 1075\n                                                                                                     // 1076\n                                                                                                     // 1077\n(function () {                                                                                       // 1078\n                                                                                                     // 1079\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1080\n//                                                                                            //     // 1081\n// packages/iron:router/lib/helpers.js                                                        //     // 1082\n//                                                                                            //     // 1083\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1084\n                                                                                              //     // 1085\n/*****************************************************************************/               // 1   // 1086\n/* Imports */                                                                                 // 2   // 1087\n/*****************************************************************************/               // 3   // 1088\nvar warn = Iron.utils.warn;                                                                   // 4   // 1089\nvar DynamicTemplate = Iron.DynamicTemplate;                                                   // 5   // 1090\nvar debug = Iron.utils.debug('iron:router <helpers>');                                        // 6   // 1091\n                                                                                              // 7   // 1092\n/*****************************************************************************/               // 8   // 1093\n/* UI Helpers */                                                                              // 9   // 1094\n/*****************************************************************************/               // 10  // 1095\n                                                                                              // 11  // 1096\n/**                                                                                           // 12  // 1097\n * Render the Router to a specific location on the page instead of the                        // 13  // 1098\n * document.body.                                                                             // 14  // 1099\n */                                                                                           // 15  // 1100\nUI.registerHelper('Router', new Blaze.Template('Router', function () {                        // 16  // 1101\n  return Router.createView();                                                                 // 17  // 1102\n}));                                                                                          // 18  // 1103\n                                                                                              // 19  // 1104\n/**                                                                                           // 20  // 1105\n * Returns a relative path given a route name, data context and optional query                // 21  // 1106\n * and hash parameters.                                                                       // 22  // 1107\n */                                                                                           // 23  // 1108\nUI.registerHelper('pathFor', function (options) {                                             // 24  // 1109\n  var routeName;                                                                              // 25  // 1110\n                                                                                              // 26  // 1111\n  if (arguments.length > 1) {                                                                 // 27  // 1112\n    routeName = arguments[0];                                                                 // 28  // 1113\n    options = arguments[1] || {};                                                             // 29  // 1114\n  }                                                                                           // 30  // 1115\n                                                                                              // 31  // 1116\n  var opts = options && options.hash;                                                         // 32  // 1117\n                                                                                              // 33  // 1118\n  opts = opts || {};                                                                          // 34  // 1119\n                                                                                              // 35  // 1120\n  var path = '';                                                                              // 36  // 1121\n  var query = opts.query;                                                                     // 37  // 1122\n  var hash = opts.hash;                                                                       // 38  // 1123\n  var routeName = routeName || opts.route;                                                    // 39  // 1124\n  var data = _.extend({}, opts.data || this);                                                 // 40  // 1125\n                                                                                              // 41  // 1126\n  var route = Router.routes[routeName];                                                       // 42  // 1127\n  warn(route, \"pathFor couldn't find a route named \" + JSON.stringify(routeName));            // 43  // 1128\n                                                                                              // 44  // 1129\n  if (route) {                                                                                // 45  // 1130\n    _.each(route.handler.compiledUrl.keys, function (keyConfig) {                             // 46  // 1131\n      var key = keyConfig.name;                                                               // 47  // 1132\n      if (_.has(opts, key)) {                                                                 // 48  // 1133\n        data[key] = EJSON.clone(opts[key]);                                                   // 49  // 1134\n                                                                                              // 50  // 1135\n        // so the option doesn't end up on the element as an attribute                        // 51  // 1136\n        delete opts[key];                                                                     // 52  // 1137\n      }                                                                                       // 53  // 1138\n    });                                                                                       // 54  // 1139\n                                                                                              // 55  // 1140\n    path = route.path(data, {query: query, hash: hash});                                      // 56  // 1141\n  }                                                                                           // 57  // 1142\n                                                                                              // 58  // 1143\n  return path;                                                                                // 59  // 1144\n});                                                                                           // 60  // 1145\n                                                                                              // 61  // 1146\n/**                                                                                           // 62  // 1147\n * Returns a relative path given a route name, data context and optional query                // 63  // 1148\n * and hash parameters.                                                                       // 64  // 1149\n */                                                                                           // 65  // 1150\nUI.registerHelper('urlFor', function (options) {                                              // 66  // 1151\n  var routeName;                                                                              // 67  // 1152\n                                                                                              // 68  // 1153\n  if (arguments.length > 1) {                                                                 // 69  // 1154\n    routeName = arguments[0];                                                                 // 70  // 1155\n    options = arguments[1] || {};                                                             // 71  // 1156\n  }                                                                                           // 72  // 1157\n                                                                                              // 73  // 1158\n  var opts = options && options.hash;                                                         // 74  // 1159\n                                                                                              // 75  // 1160\n  opts = opts || {};                                                                          // 76  // 1161\n  var url = '';                                                                               // 77  // 1162\n  var query = opts.query;                                                                     // 78  // 1163\n  var hash = opts.hash;                                                                       // 79  // 1164\n  var routeName = routeName || opts.route;                                                    // 80  // 1165\n  var data = _.extend({}, opts.data || this);                                                 // 81  // 1166\n                                                                                              // 82  // 1167\n  var route = Router.routes[routeName];                                                       // 83  // 1168\n  warn(route, \"urlFor couldn't find a route named \" + JSON.stringify(routeName));             // 84  // 1169\n                                                                                              // 85  // 1170\n  if (route) {                                                                                // 86  // 1171\n    _.each(route.handler.compiledUrl.keys, function (keyConfig) {                             // 87  // 1172\n      var key = keyConfig.name;                                                               // 88  // 1173\n      if (_.has(opts, key)) {                                                                 // 89  // 1174\n        data[key] = EJSON.clone(opts[key]);                                                   // 90  // 1175\n                                                                                              // 91  // 1176\n        // so the option doesn't end up on the element as an attribute                        // 92  // 1177\n        delete opts[key];                                                                     // 93  // 1178\n      }                                                                                       // 94  // 1179\n    });                                                                                       // 95  // 1180\n                                                                                              // 96  // 1181\n    url = route.url(data, {query: query, hash: hash});                                        // 97  // 1182\n  }                                                                                           // 98  // 1183\n                                                                                              // 99  // 1184\n  return url;                                                                                 // 100\n});                                                                                           // 101\n                                                                                              // 102\n/**                                                                                           // 103\n * Create a link with optional content block.                                                 // 104\n *                                                                                            // 105\n * Example:                                                                                   // 106\n *   {{#linkTo route=\"one\" query=\"query\" hash=\"hash\" class=\"my-cls\"}}                         // 107\n *    <div>My Custom Link Content</div>                                                       // 108\n *   {{/linkTo}}                                                                              // 109\n */                                                                                           // 110\nUI.registerHelper('linkTo', new Blaze.Template('linkTo', function () {                        // 111\n  var self = this;                                                                            // 112\n  var opts = DynamicTemplate.getInclusionArguments(this);                                     // 113\n                                                                                              // 114\n  if (typeof opts !== 'object')                                                               // 115\n    throw new Error(\"linkTo options must be key value pairs such as {{#linkTo route='my.route.name'}}. You passed: \" + JSON.stringify(opts));\n                                                                                              // 117\n  opts = opts || {};                                                                          // 118\n  var path = '';                                                                              // 119\n  var query = opts.query;                                                                     // 120\n  var hash = opts.hash;                                                                       // 121\n  var routeName = opts.route;                                                                 // 122\n  var data = _.extend({}, opts.data || DynamicTemplate.getParentDataContext(this));           // 123\n  var route = Router.routes[routeName];                                                       // 124\n  var paramKeys;                                                                              // 125\n                                                                                              // 126\n  warn(route, \"linkTo couldn't find a route named \" + JSON.stringify(routeName));             // 127\n                                                                                              // 128\n  if (route) {                                                                                // 129\n    _.each(route.handler.compiledUrl.keys, function (keyConfig) {                             // 130\n      var key = keyConfig.name;                                                               // 131\n      if (_.has(opts, key)) {                                                                 // 132\n        data[key] = EJSON.clone(opts[key]);                                                   // 133\n                                                                                              // 134\n        // so the option doesn't end up on the element as an attribute                        // 135\n        delete opts[key];                                                                     // 136\n      }                                                                                       // 137\n    });                                                                                       // 138\n                                                                                              // 139\n    path = route.path(data, {query: query, hash: hash});                                      // 140\n  }                                                                                           // 141\n                                                                                              // 142\n  // anything that isn't one of our keywords we'll assume is an attributed                    // 143\n  // intended for the <a> tag                                                                 // 144\n  var attrs = _.omit(opts, 'route', 'query', 'hash', 'data');                                 // 145\n  attrs.href = path;                                                                          // 146\n                                                                                              // 147\n  return Blaze.With(function () {                                                             // 148\n    return DynamicTemplate.getParentDataContext(self);                                        // 149\n  }, function () {                                                                            // 150\n    return HTML.A(attrs, self.templateContentBlock);                                          // 151\n  });                                                                                         // 152\n}));                                                                                          // 153\n                                                                                              // 154\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1240\n                                                                                                     // 1241\n}).call(this);                                                                                       // 1242\n                                                                                                     // 1243\n                                                                                                     // 1244\n                                                                                                     // 1245\n                                                                                                     // 1246\n                                                                                                     // 1247\n                                                                                                     // 1248\n(function () {                                                                                       // 1249\n                                                                                                     // 1250\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1251\n//                                                                                            //     // 1252\n// packages/iron:router/lib/body_parser_server.js                                             //     // 1253\n//                                                                                            //     // 1254\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1255\n                                                                                              //     // 1256\nRouter.bodyParser = Npm.require('body-parser');                                               // 1   // 1257\n                                                                                              // 2   // 1258\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1259\n                                                                                                     // 1260\n}).call(this);                                                                                       // 1261\n                                                                                                     // 1262\n                                                                                                     // 1263\n                                                                                                     // 1264\n                                                                                                     // 1265\n                                                                                                     // 1266\n                                                                                                     // 1267\n(function () {                                                                                       // 1268\n                                                                                                     // 1269\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1270\n//                                                                                            //     // 1271\n// packages/iron:router/lib/router_server.js                                                  //     // 1272\n//                                                                                            //     // 1273\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1274\n                                                                                              //     // 1275\nvar assert = Iron.utils.assert;                                                               // 1   // 1276\n                                                                                              // 2   // 1277\nvar env = process.env.NODE_ENV || 'development';                                              // 3   // 1278\n                                                                                              // 4   // 1279\n/**                                                                                           // 5   // 1280\n * Server specific initialization.                                                            // 6   // 1281\n */                                                                                           // 7   // 1282\nRouter.prototype.init = function (options) {};                                                // 8   // 1283\n                                                                                              // 9   // 1284\n/**                                                                                           // 10  // 1285\n * Give people a chance to customize the body parser                                          // 11  // 1286\n * behavior.                                                                                  // 12  // 1287\n */                                                                                           // 13  // 1288\nRouter.prototype.configureBodyParsers = function () {                                         // 14  // 1289\n  Router.onBeforeAction(Iron.Router.bodyParser.json());                                       // 15  // 1290\n  Router.onBeforeAction(Iron.Router.bodyParser.urlencoded({extended: false}));                // 16  // 1291\n};                                                                                            // 17  // 1292\n                                                                                              // 18  // 1293\n/**                                                                                           // 19  // 1294\n * Add the router to the server connect handlers.                                             // 20  // 1295\n */                                                                                           // 21  // 1296\nRouter.prototype.start = function () {                                                        // 22  // 1297\n  WebApp.connectHandlers.use(this);                                                           // 23  // 1298\n  this.configureBodyParsers();                                                                // 24  // 1299\n};                                                                                            // 25  // 1300\n                                                                                              // 26  // 1301\n/**                                                                                           // 27  // 1302\n * Create a new controller and dispatch into the stack.                                       // 28  // 1303\n */                                                                                           // 29  // 1304\nRouter.prototype.dispatch = function (url, context, done) {                                   // 30  // 1305\n  var self = this;                                                                            // 31  // 1306\n                                                                                              // 32  // 1307\n  assert(typeof url === 'string', \"expected url string in router dispatch\");                  // 33  // 1308\n  assert(typeof context === 'object', \"expected context object in router dispatch\");          // 34  // 1309\n                                                                                              // 35  // 1310\n  // assumes there is only one router                                                         // 36  // 1311\n  // XXX need to initialize controller either from the context itself or if the               // 37  // 1312\n  // context already has a controller on it, just use that one.                               // 38  // 1313\n  var controller = this.createController(url, context);                                       // 39  // 1314\n                                                                                              // 40  // 1315\n  controller.dispatch(this._stack, url, function (err) {                                      // 41  // 1316\n    var res = this.response;                                                                  // 42  // 1317\n    var req = this.request;                                                                   // 43  // 1318\n    var msg;                                                                                  // 44  // 1319\n                                                                                              // 45  // 1320\n    if (err) {                                                                                // 46  // 1321\n      if (res.statusCode < 400)                                                               // 47  // 1322\n        res.statusCode = 500;                                                                 // 48  // 1323\n                                                                                              // 49  // 1324\n      if (err.status)                                                                         // 50  // 1325\n        res.statusCode = err.status;                                                          // 51  // 1326\n                                                                                              // 52  // 1327\n      if (env === 'development')                                                              // 53  // 1328\n        msg = (err.stack || err.toString()) + '\\n';                                           // 54  // 1329\n      else                                                                                    // 55  // 1330\n        //XXX get this from standard dict of error messages?                                  // 56  // 1331\n        msg = 'Server error.';                                                                // 57  // 1332\n                                                                                              // 58  // 1333\n      console.error(err.stack || err.toString());                                             // 59  // 1334\n                                                                                              // 60  // 1335\n      if (res.headersSent)                                                                    // 61  // 1336\n        return req.socket.destroy();                                                          // 62  // 1337\n                                                                                              // 63  // 1338\n      res.setHeader('Content-Type', 'text/html');                                             // 64  // 1339\n      res.setHeader('Content-Length', Buffer.byteLength(msg));                                // 65  // 1340\n      if (req.method === 'HEAD')                                                              // 66  // 1341\n        return res.end();                                                                     // 67  // 1342\n      res.end(msg);                                                                           // 68  // 1343\n      return;                                                                                 // 69  // 1344\n    }                                                                                         // 70  // 1345\n                                                                                              // 71  // 1346\n    // if there are no client or server handlers for this dispatch                            // 72  // 1347\n    // then send a 404.                                                                       // 73  // 1348\n    // XXX we need a solution here for 404s on bad routes.                                    // 74  // 1349\n    //     one solution might be to provide a custom 404 page in the public                   // 75  // 1350\n    //     folder. But we need a proper way to handle 404s for search engines.                // 76  // 1351\n    // XXX might be a PR to Meteor to use an existing status code if it's set                 // 77  // 1352\n    if (!controller.isHandled() && !controller.willBeHandledOnClient()) {                     // 78  // 1353\n      return done();                                                                          // 79  // 1354\n      /*                                                                                      // 80  // 1355\n      res.statusCode = 404;                                                                   // 81  // 1356\n      res.setHeader('Content-Type', 'text/html');                                             // 82  // 1357\n      msg = req.method + ' ' + req.originalUrl + ' not found.';                               // 83  // 1358\n      console.error(msg);                                                                     // 84  // 1359\n      if (req.method == 'HEAD')                                                               // 85  // 1360\n        return res.end();                                                                     // 86  // 1361\n      res.end(msg + '\\n');                                                                    // 87  // 1362\n      return;                                                                                 // 88  // 1363\n      */                                                                                      // 89  // 1364\n    }                                                                                         // 90  // 1365\n                                                                                              // 91  // 1366\n    // if for some reason there was a server handler but no client handler                    // 92  // 1367\n    // and the server handler called next() we might end up here. We                          // 93  // 1368\n    // want to make sure to end the response so it doesn't hang.                              // 94  // 1369\n    if (controller.isHandled() && !controller.willBeHandledOnClient()) {                      // 95  // 1370\n      res.setHeader('Content-Type', 'text/html');                                             // 96  // 1371\n      if (req.method === 'HEAD')                                                              // 97  // 1372\n        res.end();                                                                            // 98  // 1373\n      res.end(\"<p>It looks like you don't have any client routes defined, but you had at least one server handler. You probably want to define some client side routes!</p>\\n\");\n    }                                                                                         // 100\n                                                                                              // 101\n    // we'll have Meteor load the normal application so long as                               // 102\n    // we have at least one client route/handler and the done() iterator                      // 103\n    // function has been passed to us, presumably from Connect.                               // 104\n    if (controller.willBeHandledOnClient() && done)                                           // 105\n      return done(err);                                                                       // 106\n  });                                                                                         // 107\n};                                                                                            // 108\n                                                                                              // 109\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1385\n                                                                                                     // 1386\n}).call(this);                                                                                       // 1387\n                                                                                                     // 1388\n                                                                                                     // 1389\n                                                                                                     // 1390\n                                                                                                     // 1391\n                                                                                                     // 1392\n                                                                                                     // 1393\n(function () {                                                                                       // 1394\n                                                                                                     // 1395\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1396\n//                                                                                            //     // 1397\n// packages/iron:router/lib/plugins.js                                                        //     // 1398\n//                                                                                            //     // 1399\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1400\n                                                                                              //     // 1401\n/**                                                                                           // 1   // 1402\n * Simple plugin wrapper around the loading hook.                                             // 2   // 1403\n */                                                                                           // 3   // 1404\nRouter.plugins.loading = function (router, options) {                                         // 4   // 1405\n  router.onBeforeAction('loading', options);                                                  // 5   // 1406\n};                                                                                            // 6   // 1407\n                                                                                              // 7   // 1408\n/**                                                                                           // 8   // 1409\n * Simple plugin wrapper around the dataNotFound hook.                                        // 9   // 1410\n */                                                                                           // 10  // 1411\nRouter.plugins.dataNotFound = function (router, options) {                                    // 11  // 1412\n  router.onBeforeAction('dataNotFound', options);                                             // 12  // 1413\n};                                                                                            // 13  // 1414\n                                                                                              // 14  // 1415\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1416\n                                                                                                     // 1417\n}).call(this);                                                                                       // 1418\n                                                                                                     // 1419\n                                                                                                     // 1420\n                                                                                                     // 1421\n                                                                                                     // 1422\n                                                                                                     // 1423\n                                                                                                     // 1424\n(function () {                                                                                       // 1425\n                                                                                                     // 1426\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1427\n//                                                                                            //     // 1428\n// packages/iron:router/lib/global_router.js                                                  //     // 1429\n//                                                                                            //     // 1430\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1431\n                                                                                              //     // 1432\nRouter = new Iron.Router;                                                                     // 1   // 1433\n                                                                                              // 2   // 1434\n////////////////////////////////////////////////////////////////////////////////////////////////     // 1435\n                                                                                                     // 1436\n}).call(this);                                                                                       // 1437\n                                                                                                     // 1438\n///////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['iron:router'] = {\n  Router: Router,\n  RouteController: RouteController\n};\n\n})();\n","servePath":"/packages/iron_router.js","sourceMap":{"version":3,"sources":["/packages/iron_router/packages/iron_router.js"],"names":[],"mappingsfile":"/packages/iron_router.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                            //\n// packages/iron:router/lib/current_options.js                                                //\n//                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                              //\n/**                                                                                           // 1\n * Allows for dynamic scoping of options variables. Primarily intended to be                  // 2\n * used in the RouteController.prototype.lookupOption method.                                 // 3\n */                                                                                           // 4\nCurrentOptions = new Meteor.EnvironmentVariable;                                              // 5\n                                                                                              // 6\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                            //\n// packages/iron:router/lib/http_methods.js                                                   //\n//                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                              //\nHTTP_METHODS = [                                                                              // 1\n  'get',                                                                                      // 2\n  'post',                                                                                     // 3\n  'put',                                                                                      // 4\n  'delete',                                                                                   // 5\n  'patch'                                                                                     // 6\n];                                                                                            // 7\n                                                                                              // 8\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                            //\n// packages/iron:router/lib/route_controller.js                                               //\n//                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                              //\n/*****************************************************************************/               // 1\n/* Imports */                                                                                 // 2\n/*****************************************************************************/               // 3\nvar Controller = Iron.Controller;                                                             // 4\nvar Url = Iron.Url;                                                                           // 5\nvar MiddlewareStack = Iron.MiddlewareStack;                                                   // 6\nvar assert = Iron.utils.assert;                                                               // 7\n                                                                                              // 8\n/*****************************************************************************/               // 9\n/* RouteController */                                                                         // 10\n/*****************************************************************************/               // 11\nRouteController = Controller.extend({                                                         // 12\n  constructor: function (options) {                                                           // 13\n    RouteController.__super__.constructor.apply(this, arguments);                             // 14\n    options = options || {};                                                                  // 15\n    this.options = options;                                                                   // 16\n    this._onStopCallbacks = [];                                                               // 17\n    this.route = options.route;                                                               // 18\n    this.params = [];                                                                         // 19\n                                                                                              // 20\n    // Sometimes the data property can be defined on route options,                           // 21\n    // or even on the global router config. And people will expect the                        // 22\n    // data function to be available on the controller instance if it                         // 23\n    // is defined anywhere in the chain. This ensure that if we have                          // 24\n    // a data function somewhere in the chain, you can call this.data().                      // 25\n    var data = this.lookupOption('data');                                                     // 26\n                                                                                              // 27\n    if (typeof data === 'function')                                                           // 28\n      this.data = _.bind(data, this);                                                         // 29\n    else if (typeof data !== 'undefined')                                                     // 30\n      this.data = function () { return data; };                                               // 31\n                                                                                              // 32\n    this.init(options);                                                                       // 33\n  }                                                                                           // 34\n});                                                                                           // 35\n                                                                                              // 36\n/**                                                                                           // 37\n * Returns an option value following an \"options chain\" which is this path:                   // 38\n *                                                                                            // 39\n *   this.options                                                                             // 40\n *   this (which includes the proto chain)                                                    // 41\n *   this.route.options                                                                       // 42\n *   dynamic variable                                                                         // 43\n *   this.router.options                                                                      // 44\n */                                                                                           // 45\nRouteController.prototype.lookupOption = function (key) {                                     // 46\n  // this.route.options                                                                       // 47\n  // NOTE: we've debated whether route options should come before controller but              // 48\n  // Tom has convinced me that it's easier for people to think about overriding               // 49\n  // controller stuff at the route option level. However, this has the possibly               // 50\n  // counterintuitive effect that if you define this.someprop = true on the                   // 51\n  // controller instance, and you have someprop defined as an option on your                  // 52\n  // Route, the route option will take precedence.                                            // 53\n  if (this.route && this.route.options && _.has(this.route.options, key))                     // 54\n    return this.route.options[key];                                                           // 55\n                                                                                              // 56\n  // this.options                                                                             // 57\n  if (_.has(this.options, key))                                                               // 58\n    return this.options[key];                                                                 // 59\n                                                                                              // 60\n  // \"this\" object or its proto chain                                                         // 61\n  if (typeof this[key] !== 'undefined')                                                       // 62\n    return this[key];                                                                         // 63\n                                                                                              // 64\n  // see if we have the CurrentOptions dynamic variable set.                                  // 65\n  var opts = CurrentOptions.get();                                                            // 66\n  if (opts && _.has(opts, key))                                                               // 67\n    return opts[key];                                                                         // 68\n                                                                                              // 69\n  // this.router.options                                                                      // 70\n  if (this.router && this.router.options && _.has(this.router.options, key))                  // 71\n    return this.router.options[key];                                                          // 72\n};                                                                                            // 73\n                                                                                              // 74\nRouteController.prototype.configureFromUrl = function (url, context, options) {               // 75\n  assert(typeof url === 'string', 'url must be a string');                                    // 76\n  context = context || {};                                                                    // 77\n  this.request = context.request || {};                                                       // 78\n  this.response = context.response || {};                                                     // 79\n  this.url = context.url || url;                                                              // 80\n  this.originalUrl = context.originalUrl || url;                                              // 81\n  this.method = this.request.method;                                                          // 82\n  if (this.route) {                                                                           // 83\n    // pass options to that we can set reactive: false                                        // 84\n    this.setParams(this.route.params(url), options);                                          // 85\n  }                                                                                           // 86\n};                                                                                            // 87\n                                                                                              // 88\n/**                                                                                           // 89\n * Returns an array of hook functions for the given hook names. Hooks are                     // 90\n * collected in this order:                                                                   // 91\n *                                                                                            // 92\n * router global hooks                                                                        // 93\n * route option hooks                                                                         // 94\n * prototype of the controller                                                                // 95\n * this object for the controller                                                             // 96\n *                                                                                            // 97\n * For example, this.collectHooks('onBeforeAction', 'before')                                 // 98\n * will return an array of hook functions where the key is either onBeforeAction              // 99\n * or before.                                                                                 // 100\n *                                                                                            // 101\n * Hook values can also be strings in which case they are looked up in the                    // 102\n * Iron.Router.hooks object.                                                                  // 103\n *                                                                                            // 104\n * TODO: Add an options last argument which can specify to only collect hooks                 // 105\n * for a particular environment (client, server or both).                                     // 106\n */                                                                                           // 107\nRouteController.prototype._collectHooks = function (/* hook1, alias1, ... */) {               // 108\n  var self = this;                                                                            // 109\n  var hookNames = _.toArray(arguments);                                                       // 110\n                                                                                              // 111\n  var getHookValues = function (value) {                                                      // 112\n    if (!value)                                                                               // 113\n      return [];                                                                              // 114\n    var lookupHook = self.router.lookupHook;                                                  // 115\n    var hooks = _.isArray(value) ? value : [value];                                           // 116\n    return _.map(hooks, function (h) { return lookupHook(h); });                              // 117\n  };                                                                                          // 118\n                                                                                              // 119\n  var collectInheritedHooks = function (ctor, hookName) {                                     // 120\n    var hooks = [];                                                                           // 121\n                                                                                              // 122\n    if (ctor.__super__)                                                                       // 123\n      hooks = hooks.concat(collectInheritedHooks(ctor.__super__.constructor, hookName));      // 124\n                                                                                              // 125\n    return _.has(ctor.prototype, hookName) ?                                                  // 126\n      hooks.concat(getHookValues(ctor.prototype[hookName])) : hooks;                          // 127\n  };                                                                                          // 128\n                                                                                              // 129\n  var eachHook = function (cb) {                                                              // 130\n    for (var i = 0; i < hookNames.length; i++) {                                              // 131\n      cb(hookNames[i]);                                                                       // 132\n    }                                                                                         // 133\n  };                                                                                          // 134\n                                                                                              // 135\n  var routerHooks = [];                                                                       // 136\n  eachHook(function (hook) {                                                                  // 137\n    var name = self.route && self.route.getName();                                            // 138\n    var hooks = self.router.getHooks(hook, name);                                             // 139\n    routerHooks = routerHooks.concat(hooks);                                                  // 140\n  });                                                                                         // 141\n                                                                                              // 142\n  var protoHooks = [];                                                                        // 143\n  eachHook(function (hook) {                                                                  // 144\n    var hooks = collectInheritedHooks(self.constructor, hook);                                // 145\n    protoHooks = protoHooks.concat(hooks);                                                    // 146\n  });                                                                                         // 147\n                                                                                              // 148\n  var thisHooks = [];                                                                         // 149\n  eachHook(function (hook) {                                                                  // 150\n    if (_.has(self, hook)) {                                                                  // 151\n      var hooks = getHookValues(self[hook]);                                                  // 152\n      thisHooks = thisHooks.concat(hooks);                                                    // 153\n    }                                                                                         // 154\n  });                                                                                         // 155\n                                                                                              // 156\n  var routeHooks = [];                                                                        // 157\n  if (self.route) {                                                                           // 158\n    eachHook(function (hook) {                                                                // 159\n      var hooks = getHookValues(self.route.options[hook]);                                    // 160\n      routeHooks = routeHooks.concat(hooks);                                                  // 161\n    });                                                                                       // 162\n  }                                                                                           // 163\n                                                                                              // 164\n  var allHooks = routerHooks                                                                  // 165\n    .concat(routeHooks)                                                                       // 166\n    .concat(protoHooks)                                                                       // 167\n    .concat(thisHooks);                                                                       // 168\n                                                                                              // 169\n  return allHooks;                                                                            // 170\n};                                                                                            // 171\n                                                                                              // 172\n/**                                                                                           // 173\n * Runs each hook and returns the number of hooks that were run.                              // 174\n */                                                                                           // 175\nRouteController.prototype.runHooks = function (/* hook, alias1, ...*/ ) {                     // 176\n  var hooks = this._collectHooks.apply(this, arguments);                                      // 177\n  for (var i = 0, l = hooks.length; i < l; i++) {                                             // 178\n    var h = hooks[i];                                                                         // 179\n    h.call(this);                                                                             // 180\n  }                                                                                           // 181\n  return hooks.length;                                                                        // 182\n};                                                                                            // 183\n                                                                                              // 184\nRouteController.prototype.getParams = function () {                                           // 185\n  return this.params;                                                                         // 186\n};                                                                                            // 187\n                                                                                              // 188\nRouteController.prototype.setParams = function (value) {                                      // 189\n  this.params = value;                                                                        // 190\n  return this;                                                                                // 191\n};                                                                                            // 192\n                                                                                              // 193\nIron.RouteController = RouteController;                                                       // 194\n                                                                                              // 195\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                            //\n// packages/iron:router/lib/route_controller_server.js                                        //\n//                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                              //\n/*****************************************************************************/               // 1\n/* Imports */                                                                                 // 2\n/*****************************************************************************/               // 3\nvar Fiber = Npm.require('fibers');                                                            // 4\nvar Controller = Iron.Controller;                                                             // 5\nvar Url = Iron.Url;                                                                           // 6\nvar MiddlewareStack = Iron.MiddlewareStack;                                                   // 7\n                                                                                              // 8\n/*****************************************************************************/               // 9\n/* RouteController */                                                                         // 10\n/*****************************************************************************/               // 11\n                                                                                              // 12\n/**                                                                                           // 13\n * Server specific initialization.                                                            // 14\n */                                                                                           // 15\nRouteController.prototype.init = function (options) {};                                       // 16\n                                                                                              // 17\n/**                                                                                           // 18\n * Let this controller run a dispatch process. This function will be called                   // 19\n * from the router. That way, any state associated with the dispatch can go on                // 20\n * the controller instance. Note: no result returned from dispatch because its                // 21\n * run inside its own fiber. Might at some point move the fiber stuff to a                    // 22\n * higher layer.                                                                              // 23\n */                                                                                           // 24\nRouteController.prototype.dispatch = function (stack, url, done) {                            // 25\n  var self = this;                                                                            // 26\n  Fiber(function () {                                                                         // 27\n    stack.dispatch(url, self, done);                                                          // 28\n  }).run();                                                                                   // 29\n};                                                                                            // 30\n                                                                                              // 31\n/**                                                                                           // 32\n * Run a route on the server. When the router runs its middleware stack, it                   // 33\n * can run regular middleware functions or it can run a route. There should                   // 34\n * only one route object per path as where there may be many middleware                       // 35\n * functions.                                                                                 // 36\n *                                                                                            // 37\n * For example:                                                                               // 38\n *                                                                                            // 39\n *   \"/some/path\" => [middleware1, middleware2, route, middleware3]                           // 40\n *                                                                                            // 41\n * When a route is dispatched, it tells the controller to _runRoute so that                   // 42\n * the controller can control the process. At this point we should already be                 // 43\n * in a dispatch so a computation should already exist.                                       // 44\n */                                                                                           // 45\nRouteController.prototype._runRoute = function (route, url, done) {                           // 46\n  var self = this;                                                                            // 47\n  var stack = new MiddlewareStack;                                                            // 48\n                                                                                              // 49\n  var onRunHooks = this._collectHooks('onRun', 'load');                                       // 50\n  stack = stack.append(onRunHooks, {where: 'server'});                                        // 51\n                                                                                              // 52\n  var beforeHooks = this._collectHooks('onBeforeAction', 'before');                           // 53\n  stack.append(beforeHooks, {where: 'server'});                                               // 54\n                                                                                              // 55\n  // make sure the action stack has at least one handler on it that defaults                  // 56\n  // to the 'action' method                                                                   // 57\n  if (route._actionStack.length === 0) {                                                      // 58\n    route._actionStack.push(route._path, 'action', route.options);                            // 59\n  }                                                                                           // 60\n                                                                                              // 61\n  stack = stack.concat(route._actionStack);                                                   // 62\n  stack.dispatch(url, this, done);                                                            // 63\n                                                                                              // 64\n  // run the after hooks.                                                                     // 65\n  this.next = function () {};                                                                 // 66\n  this.runHooks('onAfterAction', 'after');                                                    // 67\n};                                                                                            // 68\n                                                                                              // 69\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                            //\n// packages/iron:router/lib/route.js                                                          //\n//                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                              //\nvar Url = Iron.Url;                                                                           // 1\nvar MiddlewareStack = Iron.MiddlewareStack;                                                   // 2\nvar assert = Iron.utils.assert;                                                               // 3\n                                                                                              // 4\n/*****************************************************************************/               // 5\n/* Both */                                                                                    // 6\n/*****************************************************************************/               // 7\nRoute = function (path, fn, options) {                                                        // 8\n  var route = function (req, res, next) {                                                     // 9\n    var controller = this;                                                                    // 10\n    controller.request = req;                                                                 // 11\n    controller.response = res;                                                                // 12\n    route.dispatch(req.url, controller, next);                                                // 13\n  }                                                                                           // 14\n                                                                                              // 15\n  if (typeof fn === 'object') {                                                               // 16\n    options = fn;                                                                             // 17\n    fn = options.action;                                                                      // 18\n  }                                                                                           // 19\n                                                                                              // 20\n  options = options || {};                                                                    // 21\n                                                                                              // 22\n  if (typeof path === 'string' && path.charAt(0) !== '/') {                                   // 23\n    path = options.path ? options.path : '/' + path                                           // 24\n  }                                                                                           // 25\n                                                                                              // 26\n  // extend the route function with properties from this instance and its                     // 27\n  // prototype.                                                                               // 28\n  _.extend(route, this.constructor.prototype);                                                // 29\n                                                                                              // 30\n  // always good to have options                                                              // 31\n  options = route.options = options || {};                                                    // 32\n                                                                                              // 33\n  // the main action function as well as any HTTP VERB action functions will go               // 34\n  // onto this stack.                                                                         // 35\n  route._actionStack = new MiddlewareStack;                                                   // 36\n                                                                                              // 37\n  // any before hooks will go onto this stack to make sure they get executed                  // 38\n  // before the action stack.                                                                 // 39\n  route._beforeStack = new MiddlewareStack;                                                   // 40\n  route._beforeStack.append(route.options.onBeforeAction);                                    // 41\n  route._beforeStack.append(route.options.before);                                            // 42\n                                                                                              // 43\n  // after hooks get run after the action stack                                               // 44\n  route._afterStack = new MiddlewareStack;                                                    // 45\n  route._afterStack.append(route.options.onAfterAction);                                      // 46\n  route._afterStack.append(route.options.after);                                              // 47\n                                                                                              // 48\n                                                                                              // 49\n  // track which methods this route uses                                                      // 50\n  route._methods = {};                                                                        // 51\n                                                                                              // 52\n  if (typeof fn === 'string') {                                                               // 53\n    route._actionStack.push(path, _.extend(options, {                                         // 54\n      template: fn                                                                            // 55\n    }));                                                                                      // 56\n  } else if (typeof fn === 'function' || typeof fn === 'object') {                            // 57\n    route._actionStack.push(path, fn, options);                                               // 58\n  }                                                                                           // 59\n                                                                                              // 60\n  route._path = path;                                                                         // 61\n  return route;                                                                               // 62\n};                                                                                            // 63\n                                                                                              // 64\n/**                                                                                           // 65\n * The name of the route is actually stored on the handler since a route is a                 // 66\n * function that has an unassignable \"name\" property.                                         // 67\n */                                                                                           // 68\nRoute.prototype.getName = function () {                                                       // 69\n  return this.handler && this.handler.name;                                                   // 70\n};                                                                                            // 71\n                                                                                              // 72\n/**                                                                                           // 73\n * Returns an appropriate RouteController constructor the this Route.                         // 74\n *                                                                                            // 75\n * There are three possibilities:                                                             // 76\n *                                                                                            // 77\n *  1. controller option provided as a string on the route                                    // 78\n *  2. a controller in the global namespace with the converted name of the route              // 79\n *  3. a default RouteController                                                              // 80\n *                                                                                            // 81\n */                                                                                           // 82\nRoute.prototype.findControllerConstructor = function () {                                     // 83\n  var self = this;                                                                            // 84\n                                                                                              // 85\n  var resolve = function (name, opts) {                                                       // 86\n    opts = opts || {};                                                                        // 87\n    var C = Iron.utils.resolve(name);                                                         // 88\n    if (!C || !RouteController.prototype.isPrototypeOf(C.prototype)) {                        // 89\n      if (opts.supressErrors !== true)                                                        // 90\n        throw new Error(\"RouteController '\" + name + \"' is not defined.\");                    // 91\n      else                                                                                    // 92\n        return undefined;                                                                     // 93\n    } else {                                                                                  // 94\n      return C;                                                                               // 95\n    }                                                                                         // 96\n  };                                                                                          // 97\n                                                                                              // 98\n  var convert = function (name) {                                                             // 99\n    return self.router.toControllerName(name);                                                // 100\n  };                                                                                          // 101\n                                                                                              // 102\n  var result;                                                                                 // 103\n  var name = this.getName();                                                                  // 104\n                                                                                              // 105\n  // the controller was set directly                                                          // 106\n  if (typeof this.options.controller === 'function')                                          // 107\n    return this.options.controller;                                                           // 108\n                                                                                              // 109\n  // was the controller specified precisely by name? then resolve to an actual                // 110\n  // javascript constructor value                                                             // 111\n  else if (typeof this.options.controller === 'string')                                       // 112\n    return resolve(this.options.controller);                                                  // 113\n                                                                                              // 114\n  // is there a default route controller configured?                                          // 115\n  else if (this.router && this.router.options.controller) {                                   // 116\n    if (typeof this.router.options.controller === 'function')                                 // 117\n      return this.router.options.controller;                                                  // 118\n                                                                                              // 119\n    else if (typeof this.router.options.controller === 'string')                              // 120\n      return resolve(this.router.options.controller);                                         // 121\n  }                                                                                           // 122\n                                                                                              // 123\n  // otherwise do we have a name? try to convert the name to a controller name                // 124\n  // and resolve it to a value                                                                // 125\n  else if (name && (result = resolve(convert(name), {supressErrors: true})))                  // 126\n    return result;                                                                            // 127\n                                                                                              // 128\n  // otherwise just use an anonymous route controller                                         // 129\n  else                                                                                        // 130\n    return RouteController;                                                                   // 131\n};                                                                                            // 132\n                                                                                              // 133\n                                                                                              // 134\n/**                                                                                           // 135\n * Create a new controller for the route.                                                     // 136\n */                                                                                           // 137\nRoute.prototype.createController = function (options) {                                       // 138\n  options = options || {};                                                                    // 139\n  var C = this.findControllerConstructor();                                                   // 140\n  options.route = this;                                                                       // 141\n  var instance = new C(options);                                                              // 142\n  return instance;                                                                            // 143\n};                                                                                            // 144\n                                                                                              // 145\nRoute.prototype.setControllerParams = function (controller, url) {                            // 146\n};                                                                                            // 147\n                                                                                              // 148\n/**                                                                                           // 149\n * Dispatch into the route's middleware stack.                                                // 150\n */                                                                                           // 151\nRoute.prototype.dispatch = function (url, context, done) {                                    // 152\n  // call runRoute on the controller which will behave similarly to the previous              // 153\n  // version of IR.                                                                           // 154\n  assert(context._runRoute, \"context doesn't have a _runRoute method\");                       // 155\n  return context._runRoute(this, url, done);                                                  // 156\n};                                                                                            // 157\n                                                                                              // 158\n/**                                                                                           // 159\n * Returns a relative path for the route.                                                     // 160\n */                                                                                           // 161\nRoute.prototype.path = function (params, options) {                                           // 162\n  return this.handler.resolve(params, options);                                               // 163\n};                                                                                            // 164\n                                                                                              // 165\n/**                                                                                           // 166\n * Return a fully qualified url for the route, given a set of parmeters and                   // 167\n * options like hash and query.                                                               // 168\n */                                                                                           // 169\nRoute.prototype.url = function (params, options) {                                            // 170\n  var path = this.path(params, options);                                                      // 171\n  var host = (options && options.host) || Meteor.absoluteUrl();                               // 172\n                                                                                              // 173\n  if (host.charAt(host.length-1) === '/');                                                    // 174\n    host = host.slice(0, host.length-1);                                                      // 175\n  return host + path;                                                                         // 176\n};                                                                                            // 177\n                                                                                              // 178\n/**                                                                                           // 179\n * Return a params object for the route given a path.                                         // 180\n */                                                                                           // 181\nRoute.prototype.params = function (path) {                                                    // 182\n  return this.handler.params(path);                                                           // 183\n};                                                                                            // 184\n                                                                                              // 185\n/**                                                                                           // 186\n * Add convenience methods for each HTTP verb.                                                // 187\n *                                                                                            // 188\n * Example:                                                                                   // 189\n *  var route = router.route('/item')                                                         // 190\n *    .get(function () { })                                                                   // 191\n *    .post(function () { })                                                                  // 192\n *    .put(function () { })                                                                   // 193\n */                                                                                           // 194\n_.each(HTTP_METHODS, function (method) {                                                      // 195\n  Route.prototype[method] = function (fn) {                                                   // 196\n    // track the method being used for OPTIONS requests.                                      // 197\n    this._methods[method] = true;                                                             // 198\n                                                                                              // 199\n    this._actionStack.push(this._path, fn, {                                                  // 200\n      // give each method a unique name so it doesn't clash with the route's                  // 201\n      // name in the action stack                                                             // 202\n      name: this.getName() + '_' + method.toLowerCase(),                                      // 203\n      method: method,                                                                         // 204\n                                                                                              // 205\n      // for now just make the handler where the same as the route, presumably a              // 206\n      // server route.                                                                        // 207\n      where: this.handler.where,                                                              // 208\n      mount: false                                                                            // 209\n    });                                                                                       // 210\n                                                                                              // 211\n    return this;                                                                              // 212\n  };                                                                                          // 213\n});                                                                                           // 214\n                                                                                              // 215\nIron.Route = Route;                                                                           // 216\n                                                                                              // 217\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                            //\n// packages/iron:router/lib/router.js                                                         //\n//                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                              //\n/*****************************************************************************/               // 1\n/* Imports */                                                                                 // 2\n/*****************************************************************************/               // 3\nvar MiddlewareStack = Iron.MiddlewareStack;                                                   // 4\nvar Url = Iron.Url;                                                                           // 5\nvar Layout = Iron.Layout;                                                                     // 6\nvar warn = Iron.utils.warn;                                                                   // 7\nvar assert = Iron.utils.assert;                                                               // 8\n                                                                                              // 9\nRouter = function (options) {                                                                 // 10\n  // keep the same api throughout which is:                                                   // 11\n  // fn(url, context, done);                                                                  // 12\n  function router (req, res, next) {                                                          // 13\n    //XXX this assumes no other routers on the parent stack which we should probably fix      // 14\n    router.dispatch(req.url, {                                                                // 15\n      request: req,                                                                           // 16\n      response: res                                                                           // 17\n    }, next);                                                                                 // 18\n  }                                                                                           // 19\n                                                                                              // 20\n  // the main router stack                                                                    // 21\n  router._stack = new MiddlewareStack;                                                        // 22\n                                                                                              // 23\n  // for storing global hooks like before, after, etc.                                        // 24\n  router._globalHooks = {};                                                                   // 25\n                                                                                              // 26\n  // backward compat and quicker lookup of Route handlers vs. regular function                // 27\n  // handlers.                                                                                // 28\n  router.routes = [];                                                                         // 29\n                                                                                              // 30\n  // to make sure we don't have more than one route per path                                  // 31\n  router.routes._byPath = {};                                                                 // 32\n                                                                                              // 33\n  // always good to have options                                                              // 34\n  this.configure.call(router, options);                                                       // 35\n                                                                                              // 36\n  // add proto properties to the router function                                              // 37\n  _.extend(router, this.constructor.prototype);                                               // 38\n                                                                                              // 39\n  // let client and server side routing doing different things here                           // 40\n  this.init.call(router, options);                                                            // 41\n                                                                                              // 42\n  Meteor.startup(function () {                                                                // 43\n    Meteor.defer(function () {                                                                // 44\n      if (router.options.autoStart !== false)                                                 // 45\n        router.start();                                                                       // 46\n    });                                                                                       // 47\n  });                                                                                         // 48\n                                                                                              // 49\n  return router;                                                                              // 50\n};                                                                                            // 51\n                                                                                              // 52\nRouter.prototype.init = function (options) {};                                                // 53\n                                                                                              // 54\nRouter.prototype.configure = function (options) {                                             // 55\n  var self = this;                                                                            // 56\n                                                                                              // 57\n  options = options || {};                                                                    // 58\n                                                                                              // 59\n  var toArray = function (value) {                                                            // 60\n    if (!value)                                                                               // 61\n      return [];                                                                              // 62\n                                                                                              // 63\n    if (_.isArray(value))                                                                     // 64\n      return value;                                                                           // 65\n                                                                                              // 66\n    return [value];                                                                           // 67\n  };                                                                                          // 68\n                                                                                              // 69\n  // e.g. before: fn OR before: [fn1, fn2]                                                    // 70\n  _.each(Iron.Router.HOOK_TYPES, function eachHookType (type) {                               // 71\n    if (options[type]) {                                                                      // 72\n      _.each(toArray(options[type]), function eachHook (hook) {                               // 73\n        self.addHook(type, hook);                                                             // 74\n      });                                                                                     // 75\n                                                                                              // 76\n      delete options[type];                                                                   // 77\n    }                                                                                         // 78\n  });                                                                                         // 79\n                                                                                              // 80\n  this.options = this.options || {};                                                          // 81\n  _.extend(this.options, options);                                                            // 82\n                                                                                              // 83\n  return this;                                                                                // 84\n};                                                                                            // 85\n                                                                                              // 86\n/**                                                                                           // 87\n * Just to support legacy calling. Doesn't really serve much purpose.                         // 88\n */                                                                                           // 89\nRouter.prototype.map = function (fn) {                                                        // 90\n  return fn.call(this);                                                                       // 91\n};                                                                                            // 92\n                                                                                              // 93\n/*                                                                                            // 94\n * XXX removing for now until this is thought about more carefully.                           // 95\nRouter.prototype.use = function (path, fn, opts) {                                            // 96\n  if (typeof path === 'function') {                                                           // 97\n    opts = fn || {};                                                                          // 98\n    opts.mount = true;                                                                        // 99\n    opts.where = opts.where || 'server';                                                      // 100\n    this._stack.push(path, opts);                                                             // 101\n  } else {                                                                                    // 102\n    opts = opts || {};                                                                        // 103\n    opts.mount = true;                                                                        // 104\n    opts.where = opts.where || 'server';                                                      // 105\n    this._stack.push(path, fn, opts);                                                         // 106\n  }                                                                                           // 107\n                                                                                              // 108\n  return this;                                                                                // 109\n};                                                                                            // 110\n*/                                                                                            // 111\n                                                                                              // 112\n//XXX seems like we could put a params method on the route directly and make it reactive      // 113\nRouter.prototype.route = function (path, fn, opts) {                                          // 114\n  var typeOf = function (val) { return Object.prototype.toString.call(val); };                // 115\n  assert(typeOf(path) === '[object String]' || typeOf(path) === '[object RegExp]', \"Router.route requires a path that is a string or regular expression.\");\n                                                                                              // 117\n  if (typeof fn === 'object') {                                                               // 118\n    opts = fn;                                                                                // 119\n    fn = opts.action;                                                                         // 120\n  }                                                                                           // 121\n                                                                                              // 122\n  var route = new Route(path, fn, opts);                                                      // 123\n                                                                                              // 124\n  opts = opts || {};                                                                          // 125\n                                                                                              // 126\n  // don't mount the route                                                                    // 127\n  opts.mount = false;                                                                         // 128\n                                                                                              // 129\n  // stack expects a function which is exactly what a new Route returns!                      // 130\n  var handler = this._stack.push(path, route, opts);                                          // 131\n                                                                                              // 132\n  handler.route = route;                                                                      // 133\n  route.handler = handler;                                                                    // 134\n  route.router = this;                                                                        // 135\n                                                                                              // 136\n  assert(!this.routes._byPath[handler.path],                                                  // 137\n    \"A route for the path \" + JSON.stringify(handler.path) + \" already exists by the name of \" + JSON.stringify(handler.name) + \".\");\n  this.routes._byPath[handler.path] = route;                                                  // 139\n                                                                                              // 140\n  this.routes.push(route);                                                                    // 141\n                                                                                              // 142\n  if (typeof handler.name === 'string')                                                       // 143\n    this.routes[handler.name] = route;                                                        // 144\n                                                                                              // 145\n  return route;                                                                               // 146\n};                                                                                            // 147\n                                                                                              // 148\n/**                                                                                           // 149\n * Find the first route for the given url and options.                                        // 150\n */                                                                                           // 151\nRouter.prototype.findFirstRoute = function (url) {                                            // 152\n  var isMatch;                                                                                // 153\n  var routeHandler;                                                                           // 154\n  for (var i = 0; i < this.routes.length; i++) {                                              // 155\n    route = this.routes[i];                                                                   // 156\n                                                                                              // 157\n    // only matches if the url matches AND the                                                // 158\n    // current environment matches.                                                           // 159\n    isMatch = route.handler.test(url, {                                                       // 160\n      where: Meteor.isServer ? 'server' : 'client'                                            // 161\n    });                                                                                       // 162\n                                                                                              // 163\n    if (isMatch)                                                                              // 164\n      return route;                                                                           // 165\n  }                                                                                           // 166\n                                                                                              // 167\n  return null;                                                                                // 168\n};                                                                                            // 169\n                                                                                              // 170\nRouter.prototype.path = function (routeName, params, options) {                               // 171\n  var route = this.routes[routeName];                                                         // 172\n  warn(route, \"You called Router.path for a route named \" + JSON.stringify(routeName) + \" but that route doesn't seem to exist. Are you sure you created it?\");\n  return route && route.path(params, options);                                                // 174\n};                                                                                            // 175\n                                                                                              // 176\nRouter.prototype.url = function (routeName, params, options) {                                // 177\n  var route = this.routes[routeName];                                                         // 178\n  warn(route, \"You called Router.url for a route named \" + JSON.stringify(routeName) + \" but that route doesn't seem to exist. Are you sure you created it?\");\n  return route && route.url(params, options);                                                 // 180\n};                                                                                            // 181\n                                                                                              // 182\n/**                                                                                           // 183\n * Create a new controller for a dispatch.                                                    // 184\n */                                                                                           // 185\nRouter.prototype.createController = function (url, context) {                                 // 186\n  // see if there's a route for this url and environment                                      // 187\n  // it's possible that we find a route but it's a client                                     // 188\n  // route so we don't instantiate its controller and instead                                 // 189\n  // use an anonymous controller to run the route.                                            // 190\n  var route = this.findFirstRoute(url);                                                       // 191\n  var controller;                                                                             // 192\n                                                                                              // 193\n  context = context || {};                                                                    // 194\n                                                                                              // 195\n  if (route)                                                                                  // 196\n    // let the route decide what controller to use                                            // 197\n    controller = route.createController({layout: this._layout});                              // 198\n  else                                                                                        // 199\n    // create an anonymous controller                                                         // 200\n    controller = new RouteController({layout: this._layout});                                 // 201\n                                                                                              // 202\n  controller.router = this;                                                                   // 203\n  controller.configureFromUrl(url, context, {reactive: false});                               // 204\n  return controller;                                                                          // 205\n};                                                                                            // 206\n                                                                                              // 207\nRouter.prototype.setTemplateNameConverter = function (fn) {                                   // 208\n  this._templateNameConverter = fn;                                                           // 209\n  return this;                                                                                // 210\n};                                                                                            // 211\n                                                                                              // 212\nRouter.prototype.setControllerNameConverter = function (fn) {                                 // 213\n  this._controllerNameConverter = fn;                                                         // 214\n  return this;                                                                                // 215\n};                                                                                            // 216\n                                                                                              // 217\nRouter.prototype.toTemplateName = function (str) {                                            // 218\n  if (this._templateNameConverter)                                                            // 219\n    return this._templateNameConverter(str);                                                  // 220\n  else                                                                                        // 221\n    return Iron.utils.classCase(str);                                                         // 222\n};                                                                                            // 223\n                                                                                              // 224\nRouter.prototype.toControllerName = function (str) {                                          // 225\n  if (this._controllerNameConverter)                                                          // 226\n    return this._controllerNameConverter(str);                                                // 227\n  else                                                                                        // 228\n    return Iron.utils.classCase(str) + 'Controller';                                          // 229\n};                                                                                            // 230\n                                                                                              // 231\n/**                                                                                           // 232\n *                                                                                            // 233\n * Add a hook to all routes. The hooks will apply to all routes,                              // 234\n * unless you name routes to include or exclude via `only` and `except` options               // 235\n *                                                                                            // 236\n * @param {String} [type] one of 'load', 'unload', 'before' or 'after'                        // 237\n * @param {Object} [options] Options to controll the hooks [optional]                         // 238\n * @param {Function} [hook] Callback to run                                                   // 239\n * @return {IronRouter}                                                                       // 240\n * @api public                                                                                // 241\n *                                                                                            // 242\n */                                                                                           // 243\n                                                                                              // 244\nRouter.prototype.addHook = function(type, hook, options) {                                    // 245\n  var self = this;                                                                            // 246\n                                                                                              // 247\n  options = options || {};                                                                    // 248\n                                                                                              // 249\n  var toArray = function (input) {                                                            // 250\n    if (!input)                                                                               // 251\n      return [];                                                                              // 252\n    else if (_.isArray(input))                                                                // 253\n      return input;                                                                           // 254\n    else                                                                                      // 255\n      return [input];                                                                         // 256\n  }                                                                                           // 257\n                                                                                              // 258\n  if (options.only)                                                                           // 259\n    options.only = toArray(options.only);                                                     // 260\n  if (options.except)                                                                         // 261\n    options.except = toArray(options.except);                                                 // 262\n                                                                                              // 263\n  var hooks = this._globalHooks[type] = this._globalHooks[type] || [];                        // 264\n                                                                                              // 265\n  var hookWithOptions = function () {                                                         // 266\n    var thisArg = this;                                                                       // 267\n    var args = arguments;                                                                     // 268\n    // this allows us to bind hooks to options that get looked up when you call               // 269\n    // this.lookupOption from within the hook. And it looks better to keep                    // 270\n    // plugin/hook related options close to their definitions instead of                      // 271\n    // Router.configure. But we use a dynamic variable so we don't have to                    // 272\n    // pass the options explicitly as an argument and plugin creators can                     // 273\n    // just use this.lookupOption which will follow the proper lookup chain from              // 274\n    // \"this\", local options, dynamic variable options, route, router, etc.                   // 275\n    return CurrentOptions.withValue(options, function () {                                    // 276\n      return self.lookupHook(hook).apply(thisArg, args);                                      // 277\n    });                                                                                       // 278\n  };                                                                                          // 279\n                                                                                              // 280\n  hooks.push({options: options, hook: hookWithOptions});                                      // 281\n  return this;                                                                                // 282\n};                                                                                            // 283\n                                                                                              // 284\n/**                                                                                           // 285\n * If the argument is a function return it directly. If it's a string, see if                 // 286\n * there is a function in the Iron.Router.hooks namespace. Throw an error if we               // 287\n * can't find the hook.                                                                       // 288\n */                                                                                           // 289\nRouter.prototype.lookupHook = function (nameOrFn) {                                           // 290\n  var fn = nameOrFn;                                                                          // 291\n                                                                                              // 292\n  // if we already have a func just return it                                                 // 293\n  if (_.isFunction(fn))                                                                       // 294\n    return fn;                                                                                // 295\n                                                                                              // 296\n  // look up one of the out-of-box hooks like                                                 // 297\n  // 'loaded or 'dataNotFound' if the nameOrFn is a                                           // 298\n  // string                                                                                   // 299\n  if (_.isString(fn)) {                                                                       // 300\n    if (_.isFunction(Iron.Router.hooks[fn]))                                                  // 301\n      return Iron.Router.hooks[fn];                                                           // 302\n  }                                                                                           // 303\n                                                                                              // 304\n  // we couldn't find it so throw an error                                                    // 305\n  throw new Error(\"No hook found named: \" + nameOrFn);                                        // 306\n};                                                                                            // 307\n                                                                                              // 308\n/**                                                                                           // 309\n *                                                                                            // 310\n * Fetch the list of global hooks that apply to the given route name.                         // 311\n * Hooks are defined by the .addHook() function above.                                        // 312\n *                                                                                            // 313\n * @param {String} [type] one of IronRouter.HOOK_TYPES                                        // 314\n * @param {String} [name] the name of the route we are interested in                          // 315\n * @return {[Function]} [hooks] an array of hooks to run                                      // 316\n * @api public                                                                                // 317\n *                                                                                            // 318\n */                                                                                           // 319\n                                                                                              // 320\nRouter.prototype.getHooks = function(type, name) {                                            // 321\n  var self = this;                                                                            // 322\n  var hooks = [];                                                                             // 323\n                                                                                              // 324\n  _.each(this._globalHooks[type], function(hook) {                                            // 325\n    var options = hook.options;                                                               // 326\n                                                                                              // 327\n    if (options.except && _.include(options.except, name))                                    // 328\n      return [];                                                                              // 329\n                                                                                              // 330\n    if (options.only && ! _.include(options.only, name))                                      // 331\n      return [];                                                                              // 332\n                                                                                              // 333\n    hooks.push(hook.hook);                                                                    // 334\n  });                                                                                         // 335\n                                                                                              // 336\n  return hooks;                                                                               // 337\n};                                                                                            // 338\n                                                                                              // 339\nRouter.HOOK_TYPES = [                                                                         // 340\n  'onRun',                                                                                    // 341\n  'onRerun',                                                                                  // 342\n  'onBeforeAction',                                                                           // 343\n  'onAfterAction',                                                                            // 344\n  'onStop',                                                                                   // 345\n                                                                                              // 346\n  // not technically a hook but we'll use it                                                  // 347\n  // in a similar way. This will cause waitOn                                                 // 348\n  // to be added as a method to the Router and then                                           // 349\n  // it can be selectively applied to specific routes                                         // 350\n  'waitOn',                                                                                   // 351\n  'subscriptions',                                                                            // 352\n                                                                                              // 353\n  // legacy hook types but we'll let them slide                                               // 354\n  'load', // onRun                                                                            // 355\n  'before', // onBeforeAction                                                                 // 356\n  'after', // onAfterAction                                                                   // 357\n  'unload' // onStop                                                                          // 358\n];                                                                                            // 359\n                                                                                              // 360\n/**                                                                                           // 361\n * A namespace for hooks keyed by name.                                                       // 362\n */                                                                                           // 363\nRouter.hooks = {};                                                                            // 364\n                                                                                              // 365\n                                                                                              // 366\n/**                                                                                           // 367\n * A namespace for plugin functions keyed by name.                                            // 368\n */                                                                                           // 369\nRouter.plugins = {};                                                                          // 370\n                                                                                              // 371\n/**                                                                                           // 372\n * Auto add helper mtehods for all the hooks.                                                 // 373\n */                                                                                           // 374\n                                                                                              // 375\n_.each(Router.HOOK_TYPES, function (type) {                                                   // 376\n  Router.prototype[type] = function (hook, options) {                                         // 377\n    this.addHook(type, hook, options);                                                        // 378\n  };                                                                                          // 379\n});                                                                                           // 380\n                                                                                              // 381\n/**                                                                                           // 382\n * Add a plugin to the router instance.                                                       // 383\n */                                                                                           // 384\nRouter.prototype.plugin = function (nameOrFn, options) {                                      // 385\n  var func;                                                                                   // 386\n                                                                                              // 387\n  if (typeof nameOrFn === 'function')                                                         // 388\n    func = nameOrFn;                                                                          // 389\n  else if (typeof nameOrFn === 'string')                                                      // 390\n    func = Iron.Router.plugins[nameOrFn];                                                     // 391\n                                                                                              // 392\n  if (!func)                                                                                  // 393\n    throw new Error(\"No plugin found named \" + JSON.stringify(nameOrFn));                     // 394\n                                                                                              // 395\n  // fn(router, options)                                                                      // 396\n  func.call(this, this, options);                                                             // 397\n                                                                                              // 398\n  return this;                                                                                // 399\n};                                                                                            // 400\n                                                                                              // 401\nIron.Router = Router;                                                                         // 402\n                                                                                              // 403\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                            //\n// packages/iron:router/lib/hooks.js                                                          //\n//                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                              //\nif (typeof Template !== 'undefined') {                                                        // 1\n  /**                                                                                         // 2\n   * The default anonymous loading template.                                                  // 3\n   */                                                                                         // 4\n  var defaultLoadingTemplate = new Template('DefaultLoadingTemplate', function () {           // 5\n    return 'Loading...';                                                                      // 6\n  });                                                                                         // 7\n                                                                                              // 8\n  /**                                                                                         // 9\n   * The default anonymous data not found template.                                           // 10\n   */                                                                                         // 11\n  var defaultDataNotFoundTemplate = new Template('DefaultDataNotFoundTemplate', function () { // 12\n    return 'Data not found...';                                                               // 13\n  });                                                                                         // 14\n}                                                                                             // 15\n                                                                                              // 16\n/**                                                                                           // 17\n * Automatically render a loading template into the main region if the                        // 18\n * controller is not ready (i.e. this.ready() is false). If no loadingTemplate                // 19\n * is defined use some default text.                                                          // 20\n */                                                                                           // 21\n                                                                                              // 22\nRouter.hooks.loading = function () {                                                          // 23\n  // if we're ready just pass through                                                         // 24\n  if (this.ready()) {                                                                         // 25\n    this.next();                                                                              // 26\n    return;                                                                                   // 27\n  }                                                                                           // 28\n                                                                                              // 29\n  var template = this.lookupOption('loadingTemplate');                                        // 30\n  this.render(template || defaultLoadingTemplate);                                            // 31\n  this.renderRegions();                                                                       // 32\n};                                                                                            // 33\n                                                                                              // 34\n/**                                                                                           // 35\n * Render a \"data not found\" template if a global data function returns a falsey              // 36\n * value                                                                                      // 37\n */                                                                                           // 38\nRouter.hooks.dataNotFound = function () {                                                     // 39\n  if (!this.ready()) {                                                                        // 40\n    this.next();                                                                              // 41\n    return;                                                                                   // 42\n  }                                                                                           // 43\n                                                                                              // 44\n  var data = this.lookupOption('data');                                                       // 45\n  var dataValue;                                                                              // 46\n  var template = this.lookupOption('notFoundTemplate');                                       // 47\n                                                                                              // 48\n  if (typeof data === 'function') {                                                           // 49\n    if (!(dataValue = data.call(this))) {                                                     // 50\n      this.render(template || defaultDataNotFoundTemplate);                                   // 51\n      this.renderRegions();                                                                   // 52\n      return;                                                                                 // 53\n    }                                                                                         // 54\n  }                                                                                           // 55\n                                                                                              // 56\n  // okay never mind just pass along now                                                      // 57\n  this.next();                                                                                // 58\n};                                                                                            // 59\n                                                                                              // 60\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                            //\n// packages/iron:router/lib/helpers.js                                                        //\n//                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                              //\n/*****************************************************************************/               // 1\n/* Imports */                                                                                 // 2\n/*****************************************************************************/               // 3\nvar warn = Iron.utils.warn;                                                                   // 4\nvar DynamicTemplate = Iron.DynamicTemplate;                                                   // 5\nvar debug = Iron.utils.debug('iron:router <helpers>');                                        // 6\n                                                                                              // 7\n/*****************************************************************************/               // 8\n/* UI Helpers */                                                                              // 9\n/*****************************************************************************/               // 10\n                                                                                              // 11\n/**                                                                                           // 12\n * Render the Router to a specific location on the page instead of the                        // 13\n * document.body.                                                                             // 14\n */                                                                                           // 15\nUI.registerHelper('Router', new Blaze.Template('Router', function () {                        // 16\n  return Router.createView();                                                                 // 17\n}));                                                                                          // 18\n                                                                                              // 19\n/**                                                                                           // 20\n * Returns a relative path given a route name, data context and optional query                // 21\n * and hash parameters.                                                                       // 22\n */                                                                                           // 23\nUI.registerHelper('pathFor', function (options) {                                             // 24\n  var routeName;                                                                              // 25\n                                                                                              // 26\n  if (arguments.length > 1) {                                                                 // 27\n    routeName = arguments[0];                                                                 // 28\n    options = arguments[1] || {};                                                             // 29\n  }                                                                                           // 30\n                                                                                              // 31\n  var opts = options && options.hash;                                                         // 32\n                                                                                              // 33\n  opts = opts || {};                                                                          // 34\n                                                                                              // 35\n  var path = '';                                                                              // 36\n  var query = opts.query;                                                                     // 37\n  var hash = opts.hash;                                                                       // 38\n  var routeName = routeName || opts.route;                                                    // 39\n  var data = _.extend({}, opts.data || this);                                                 // 40\n                                                                                              // 41\n  var route = Router.routes[routeName];                                                       // 42\n  warn(route, \"pathFor couldn't find a route named \" + JSON.stringify(routeName));            // 43\n                                                                                              // 44\n  if (route) {                                                                                // 45\n    _.each(route.handler.compiledUrl.keys, function (keyConfig) {                             // 46\n      var key = keyConfig.name;                                                               // 47\n      if (_.has(opts, key)) {                                                                 // 48\n        data[key] = EJSON.clone(opts[key]);                                                   // 49\n                                                                                              // 50\n        // so the option doesn't end up on the element as an attribute                        // 51\n        delete opts[key];                                                                     // 52\n      }                                                                                       // 53\n    });                                                                                       // 54\n                                                                                              // 55\n    path = route.path(data, {query: query, hash: hash});                                      // 56\n  }                                                                                           // 57\n                                                                                              // 58\n  return path;                                                                                // 59\n});                                                                                           // 60\n                                                                                              // 61\n/**                                                                                           // 62\n * Returns a relative path given a route name, data context and optional query                // 63\n * and hash parameters.                                                                       // 64\n */                                                                                           // 65\nUI.registerHelper('urlFor', function (options) {                                              // 66\n  var routeName;                                                                              // 67\n                                                                                              // 68\n  if (arguments.length > 1) {                                                                 // 69\n    routeName = arguments[0];                                                                 // 70\n    options = arguments[1] || {};                                                             // 71\n  }                                                                                           // 72\n                                                                                              // 73\n  var opts = options && options.hash;                                                         // 74\n                                                                                              // 75\n  opts = opts || {};                                                                          // 76\n  var url = '';                                                                               // 77\n  var query = opts.query;                                                                     // 78\n  var hash = opts.hash;                                                                       // 79\n  var routeName = routeName || opts.route;                                                    // 80\n  var data = _.extend({}, opts.data || this);                                                 // 81\n                                                                                              // 82\n  var route = Router.routes[routeName];                                                       // 83\n  warn(route, \"urlFor couldn't find a route named \" + JSON.stringify(routeName));             // 84\n                                                                                              // 85\n  if (route) {                                                                                // 86\n    _.each(route.handler.compiledUrl.keys, function (keyConfig) {                             // 87\n      var key = keyConfig.name;                                                               // 88\n      if (_.has(opts, key)) {                                                                 // 89\n        data[key] = EJSON.clone(opts[key]);                                                   // 90\n                                                                                              // 91\n        // so the option doesn't end up on the element as an attribute                        // 92\n        delete opts[key];                                                                     // 93\n      }                                                                                       // 94\n    });                                                                                       // 95\n                                                                                              // 96\n    url = route.url(data, {query: query, hash: hash});                                        // 97\n  }                                                                                           // 98\n                                                                                              // 99\n  return url;                                                                                 // 100\n});                                                                                           // 101\n                                                                                              // 102\n/**                                                                                           // 103\n * Create a link with optional content block.                                                 // 104\n *                                                                                            // 105\n * Example:                                                                                   // 106\n *   {{#linkTo route=\"one\" query=\"query\" hash=\"hash\" class=\"my-cls\"}}                         // 107\n *    <div>My Custom Link Content</div>                                                       // 108\n *   {{/linkTo}}                                                                              // 109\n */                                                                                           // 110\nUI.registerHelper('linkTo', new Blaze.Template('linkTo', function () {                        // 111\n  var self = this;                                                                            // 112\n  var opts = DynamicTemplate.getInclusionArguments(this);                                     // 113\n                                                                                              // 114\n  if (typeof opts !== 'object')                                                               // 115\n    throw new Error(\"linkTo options must be key value pairs such as {{#linkTo route='my.route.name'}}. You passed: \" + JSON.stringify(opts));\n                                                                                              // 117\n  opts = opts || {};                                                                          // 118\n  var path = '';                                                                              // 119\n  var query = opts.query;                                                                     // 120\n  var hash = opts.hash;                                                                       // 121\n  var routeName = opts.route;                                                                 // 122\n  var data = _.extend({}, opts.data || DynamicTemplate.getParentDataContext(this));           // 123\n  var route = Router.routes[routeName];                                                       // 124\n  var paramKeys;                                                                              // 125\n                                                                                              // 126\n  warn(route, \"linkTo couldn't find a route named \" + JSON.stringify(routeName));             // 127\n                                                                                              // 128\n  if (route) {                                                                                // 129\n    _.each(route.handler.compiledUrl.keys, function (keyConfig) {                             // 130\n      var key = keyConfig.name;                                                               // 131\n      if (_.has(opts, key)) {                                                                 // 132\n        data[key] = EJSON.clone(opts[key]);                                                   // 133\n                                                                                              // 134\n        // so the option doesn't end up on the element as an attribute                        // 135\n        delete opts[key];                                                                     // 136\n      }                                                                                       // 137\n    });                                                                                       // 138\n                                                                                              // 139\n    path = route.path(data, {query: query, hash: hash});                                      // 140\n  }                                                                                           // 141\n                                                                                              // 142\n  // anything that isn't one of our keywords we'll assume is an attributed                    // 143\n  // intended for the <a> tag                                                                 // 144\n  var attrs = _.omit(opts, 'route', 'query', 'hash', 'data');                                 // 145\n  attrs.href = path;                                                                          // 146\n                                                                                              // 147\n  return Blaze.With(function () {                                                             // 148\n    return DynamicTemplate.getParentDataContext(self);                                        // 149\n  }, function () {                                                                            // 150\n    return HTML.A(attrs, self.templateContentBlock);                                          // 151\n  });                                                                                         // 152\n}));                                                                                          // 153\n                                                                                              // 154\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                            //\n// packages/iron:router/lib/body_parser_server.js                                             //\n//                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                              //\nRouter.bodyParser = Npm.require('body-parser');                                               // 1\n                                                                                              // 2\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                            //\n// packages/iron:router/lib/router_server.js                                                  //\n//                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                              //\nvar assert = Iron.utils.assert;                                                               // 1\n                                                                                              // 2\nvar env = process.env.NODE_ENV || 'development';                                              // 3\n                                                                                              // 4\n/**                                                                                           // 5\n * Server specific initialization.                                                            // 6\n */                                                                                           // 7\nRouter.prototype.init = function (options) {};                                                // 8\n                                                                                              // 9\n/**                                                                                           // 10\n * Give people a chance to customize the body parser                                          // 11\n * behavior.                                                                                  // 12\n */                                                                                           // 13\nRouter.prototype.configureBodyParsers = function () {                                         // 14\n  Router.onBeforeAction(Iron.Router.bodyParser.json());                                       // 15\n  Router.onBeforeAction(Iron.Router.bodyParser.urlencoded({extended: false}));                // 16\n};                                                                                            // 17\n                                                                                              // 18\n/**                                                                                           // 19\n * Add the router to the server connect handlers.                                             // 20\n */                                                                                           // 21\nRouter.prototype.start = function () {                                                        // 22\n  WebApp.connectHandlers.use(this);                                                           // 23\n  this.configureBodyParsers();                                                                // 24\n};                                                                                            // 25\n                                                                                              // 26\n/**                                                                                           // 27\n * Create a new controller and dispatch into the stack.                                       // 28\n */                                                                                           // 29\nRouter.prototype.dispatch = function (url, context, done) {                                   // 30\n  var self = this;                                                                            // 31\n                                                                                              // 32\n  assert(typeof url === 'string', \"expected url string in router dispatch\");                  // 33\n  assert(typeof context === 'object', \"expected context object in router dispatch\");          // 34\n                                                                                              // 35\n  // assumes there is only one router                                                         // 36\n  // XXX need to initialize controller either from the context itself or if the               // 37\n  // context already has a controller on it, just use that one.                               // 38\n  var controller = this.createController(url, context);                                       // 39\n                                                                                              // 40\n  controller.dispatch(this._stack, url, function (err) {                                      // 41\n    var res = this.response;                                                                  // 42\n    var req = this.request;                                                                   // 43\n    var msg;                                                                                  // 44\n                                                                                              // 45\n    if (err) {                                                                                // 46\n      if (res.statusCode < 400)                                                               // 47\n        res.statusCode = 500;                                                                 // 48\n                                                                                              // 49\n      if (err.status)                                                                         // 50\n        res.statusCode = err.status;                                                          // 51\n                                                                                              // 52\n      if (env === 'development')                                                              // 53\n        msg = (err.stack || err.toString()) + '\\n';                                           // 54\n      else                                                                                    // 55\n        //XXX get this from standard dict of error messages?                                  // 56\n        msg = 'Server error.';                                                                // 57\n                                                                                              // 58\n      console.error(err.stack || err.toString());                                             // 59\n                                                                                              // 60\n      if (res.headersSent)                                                                    // 61\n        return req.socket.destroy();                                                          // 62\n                                                                                              // 63\n      res.setHeader('Content-Type', 'text/html');                                             // 64\n      res.setHeader('Content-Length', Buffer.byteLength(msg));                                // 65\n      if (req.method === 'HEAD')                                                              // 66\n        return res.end();                                                                     // 67\n      res.end(msg);                                                                           // 68\n      return;                                                                                 // 69\n    }                                                                                         // 70\n                                                                                              // 71\n    // if there are no client or server handlers for this dispatch                            // 72\n    // then send a 404.                                                                       // 73\n    // XXX we need a solution here for 404s on bad routes.                                    // 74\n    //     one solution might be to provide a custom 404 page in the public                   // 75\n    //     folder. But we need a proper way to handle 404s for search engines.                // 76\n    // XXX might be a PR to Meteor to use an existing status code if it's set                 // 77\n    if (!controller.isHandled() && !controller.willBeHandledOnClient()) {                     // 78\n      return done();                                                                          // 79\n      /*                                                                                      // 80\n      res.statusCode = 404;                                                                   // 81\n      res.setHeader('Content-Type', 'text/html');                                             // 82\n      msg = req.method + ' ' + req.originalUrl + ' not found.';                               // 83\n      console.error(msg);                                                                     // 84\n      if (req.method == 'HEAD')                                                               // 85\n        return res.end();                                                                     // 86\n      res.end(msg + '\\n');                                                                    // 87\n      return;                                                                                 // 88\n      */                                                                                      // 89\n    }                                                                                         // 90\n                                                                                              // 91\n    // if for some reason there was a server handler but no client handler                    // 92\n    // and the server handler called next() we might end up here. We                          // 93\n    // want to make sure to end the response so it doesn't hang.                              // 94\n    if (controller.isHandled() && !controller.willBeHandledOnClient()) {                      // 95\n      res.setHeader('Content-Type', 'text/html');                                             // 96\n      if (req.method === 'HEAD')                                                              // 97\n        res.end();                                                                            // 98\n      res.end(\"<p>It looks like you don't have any client routes defined, but you had at least one server handler. You probably want to define some client side routes!</p>\\n\");\n    }                                                                                         // 100\n                                                                                              // 101\n    // we'll have Meteor load the normal application so long as                               // 102\n    // we have at least one client route/handler and the done() iterator                      // 103\n    // function has been passed to us, presumably from Connect.                               // 104\n    if (controller.willBeHandledOnClient() && done)                                           // 105\n      return done(err);                                                                       // 106\n  });                                                                                         // 107\n};                                                                                            // 108\n                                                                                              // 109\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                            //\n// packages/iron:router/lib/plugins.js                                                        //\n//                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                              //\n/**                                                                                           // 1\n * Simple plugin wrapper around the loading hook.                                             // 2\n */                                                                                           // 3\nRouter.plugins.loading = function (router, options) {                                         // 4\n  router.onBeforeAction('loading', options);                                                  // 5\n};                                                                                            // 6\n                                                                                              // 7\n/**                                                                                           // 8\n * Simple plugin wrapper around the dataNotFound hook.                                        // 9\n */                                                                                           // 10\nRouter.plugins.dataNotFound = function (router, options) {                                    // 11\n  router.onBeforeAction('dataNotFound', options);                                             // 12\n};                                                                                            // 13\n                                                                                              // 14\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                            //\n// packages/iron:router/lib/global_router.js                                                  //\n//                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                              //\nRouter = new Iron.Router;                                                                     // 1\n                                                                                              // 2\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]