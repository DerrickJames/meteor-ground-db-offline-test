[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\n\n/* Package-scope variables */\nvar Store;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// packages/ground_store/packages/ground_store.js                                       //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\n(function () {                                                                          // 1\n                                                                                        // 2\n////////////////////////////////////////////////////////////////////////////////////    // 3\n//                                                                                //    // 4\n// packages/ground:store/storage.scope.js                                         //    // 5\n//                                                                                //    // 6\n////////////////////////////////////////////////////////////////////////////////////    // 7\n                                                                                  //    // 8\n// Define the Storage scope                                                       // 1  // 9\nStore = {};                                                                       // 2  // 10\n////////////////////////////////////////////////////////////////////////////////////    // 11\n                                                                                        // 12\n}).call(this);                                                                          // 13\n                                                                                        // 14\n                                                                                        // 15\n                                                                                        // 16\n                                                                                        // 17\n                                                                                        // 18\n                                                                                        // 19\n(function () {                                                                          // 20\n                                                                                        // 21\n////////////////////////////////////////////////////////////////////////////////////    // 22\n//                                                                                //    // 23\n// packages/ground:store/client.js                                                //    // 24\n//                                                                                //    // 25\n////////////////////////////////////////////////////////////////////////////////////    // 26\n                                                                                  //    // 27\n// Users can add multiple storage adapters to Storage, but we might dont care     // 1  // 28\n// about wich to use, so here we provide a small helper api to the Storage object // 2  // 29\n// to get the \"best\" storage available.                                           // 3  // 30\n                                                                                  // 4  // 31\n// List of possible storage adapters, the best is at the top                      // 5  // 32\nvar _rankedStorageAdapterList = [                                                 // 6  // 33\n  'localStorage'                                                                  // 7  // 34\n];                                                                                // 8  // 35\n                                                                                  // 9  // 36\n// This function will return the name of best storage adapter available.          // 10\nvar _getTheBestStorageAdapterAvailable = function() {                             // 11\n                                                                                  // 12\n  // Iterate over the ranked list of storge adapters                              // 13\n  for (var i = 0; i < _rankedStorageAdapterList.length; i++) {                    // 14\n                                                                                  // 15\n    // Set surgestion to the name of a storage adapter                            // 16\n    var surgestion = _rankedStorageAdapterList[i];                                // 17\n                                                                                  // 18\n    // If the storage is found then this must be the best storage adapter         // 19\n    if (Store[surgestion]) return surgestion;                                     // 20\n  }                                                                               // 21\n                                                                                  // 22\n  // Got nothing, we return null                                                  // 23\n  return null;                                                                    // 24\n};                                                                                // 25\n                                                                                  // 26\n// This function will return the name of the passed in storage adapter            // 27\nvar _getStorageNameFromStorageAdapter = function(storageAdapterInstance) {        // 28\n                                                                                  // 29\n  // Iterate over the ranked list of storge adapters                              // 30\n  for (var i = 0; i <_rankedStorageAdapterList.length; i++) {                     // 31\n                                                                                  // 32\n    // Set storageAdapterName to the name of a storage adapter                    // 33\n    var storageAdapterName = _rankedStorageAdapterList[i];                        // 34\n                                                                                  // 35\n    // StorageAdapter                                                             // 36\n    var StorageAdapter = Store[storageAdapterName];                               // 37\n                                                                                  // 38\n    // Check if the storage adapter is found,                                     // 39\n    if (StorageAdapter) {                                                         // 40\n                                                                                  // 41\n      // check if the handed objectis an instance of the storage adapter, if so   // 42\n      // return the storage adapter name                                          // 43\n      if (storageAdapterInstance instanceof StorageAdapter)                       // 44\n        return storageAdapterName;                                                // 45\n                                                                                  // 46\n      // We could add a === check allowing a class check                          // 47\n      if (storageAdapterInstance === StorageAdapter)                              // 48\n        return storageAdapterName;                                                // 49\n                                                                                  // 50\n    }                                                                             // 51\n  }                                                                               // 52\n};                                                                                // 53\n                                                                                  // 54\n// Get the storage name from storage adapter or its instance                      // 55\nStore.getName = function(storageAdapterInstance) {                                // 56\n                                                                                  // 57\n  // Tries to find the name of the storage adapter or instance given              // 58\n  // returns null if no match                                                     // 59\n  return _getStorageNameFromStorageAdapter(storageAdapterInstance);               // 60\n                                                                                  // 61\n};                                                                                // 62\n                                                                                  // 63\n// Returns a storage adapter, either the best on the system or a specific if      // 64\n// name is set as an argument.                                                    // 65\nStore.getStorage = function(name /* Optional */) {                                // 66\n                                                                                  // 67\n  // Check if name is set and is a string, if not set it to the best storage      // 68\n  // adapter available                                                            // 69\n  if (name !== ''+name) name = _getTheBestStorageAdapterAvailable();              // 70\n                                                                                  // 71\n  // Return the storage by name, if none found then return noop                   // 72\n  return Store[name] || function() {};                                            // 73\n                                                                                  // 74\n};                                                                                // 75\n                                                                                  // 76\n// Returns an instance of the best possible storage                               // 77\nStore.create = function(options) {                                                // 78\n                                                                                  // 79\n  // Get the best storage available                                               // 80\n  var storage = Store.getStorage();                                               // 81\n                                                                                  // 82\n  // Return the instance                                                          // 83\n  return new storage(options);                                                    // 84\n                                                                                  // 85\n};                                                                                // 86\n////////////////////////////////////////////////////////////////////////////////////    // 114\n                                                                                        // 115\n}).call(this);                                                                          // 116\n                                                                                        // 117\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['ground:store'] = {\n  Store: Store\n};\n\n})();\n","servePath":"/packages/ground_store.js","sourceMap":{"version":3,"sources":["/packages/ground_store/packages/ground_store.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8F","file":"/packages/ground_store.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////////////////\n//                                                                                //\n// packages/ground:store/storage.scope.js                                         //\n//                                                                                //\n////////////////////////////////////////////////////////////////////////////////////\n                                                                                  //\n// Define the Storage scope                                                       // 1\nStore = {};                                                                       // 2\n////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////\n//                                                                                //\n// packages/ground:store/client.js                                                //\n//                                                                                //\n////////////////////////////////////////////////////////////////////////////////////\n                                                                                  //\n// Users can add multiple storage adapters to Storage, but we might dont care     // 1\n// about wich to use, so here we provide a small helper api to the Storage object // 2\n// to get the \"best\" storage available.                                           // 3\n                                                                                  // 4\n// List of possible storage adapters, the best is at the top                      // 5\nvar _rankedStorageAdapterList = [                                                 // 6\n  'localStorage'                                                                  // 7\n];                                                                                // 8\n                                                                                  // 9\n// This function will return the name of best storage adapter available.          // 10\nvar _getTheBestStorageAdapterAvailable = function() {                             // 11\n                                                                                  // 12\n  // Iterate over the ranked list of storge adapters                              // 13\n  for (var i = 0; i < _rankedStorageAdapterList.length; i++) {                    // 14\n                                                                                  // 15\n    // Set surgestion to the name of a storage adapter                            // 16\n    var surgestion = _rankedStorageAdapterList[i];                                // 17\n                                                                                  // 18\n    // If the storage is found then this must be the best storage adapter         // 19\n    if (Store[surgestion]) return surgestion;                                     // 20\n  }                                                                               // 21\n                                                                                  // 22\n  // Got nothing, we return null                                                  // 23\n  return null;                                                                    // 24\n};                                                                                // 25\n                                                                                  // 26\n// This function will return the name of the passed in storage adapter            // 27\nvar _getStorageNameFromStorageAdapter = function(storageAdapterInstance) {        // 28\n                                                                                  // 29\n  // Iterate over the ranked list of storge adapters                              // 30\n  for (var i = 0; i <_rankedStorageAdapterList.length; i++) {                     // 31\n                                                                                  // 32\n    // Set storageAdapterName to the name of a storage adapter                    // 33\n    var storageAdapterName = _rankedStorageAdapterList[i];                        // 34\n                                                                                  // 35\n    // StorageAdapter                                                             // 36\n    var StorageAdapter = Store[storageAdapterName];                               // 37\n                                                                                  // 38\n    // Check if the storage adapter is found,                                     // 39\n    if (StorageAdapter) {                                                         // 40\n                                                                                  // 41\n      // check if the handed objectis an instance of the storage adapter, if so   // 42\n      // return the storage adapter name                                          // 43\n      if (storageAdapterInstance instanceof StorageAdapter)                       // 44\n        return storageAdapterName;                                                // 45\n                                                                                  // 46\n      // We could add a === check allowing a class check                          // 47\n      if (storageAdapterInstance === StorageAdapter)                              // 48\n        return storageAdapterName;                                                // 49\n                                                                                  // 50\n    }                                                                             // 51\n  }                                                                               // 52\n};                                                                                // 53\n                                                                                  // 54\n// Get the storage name from storage adapter or its instance                      // 55\nStore.getName = function(storageAdapterInstance) {                                // 56\n                                                                                  // 57\n  // Tries to find the name of the storage adapter or instance given              // 58\n  // returns null if no match                                                     // 59\n  return _getStorageNameFromStorageAdapter(storageAdapterInstance);               // 60\n                                                                                  // 61\n};                                                                                // 62\n                                                                                  // 63\n// Returns a storage adapter, either the best on the system or a specific if      // 64\n// name is set as an argument.                                                    // 65\nStore.getStorage = function(name /* Optional */) {                                // 66\n                                                                                  // 67\n  // Check if name is set and is a string, if not set it to the best storage      // 68\n  // adapter available                                                            // 69\n  if (name !== ''+name) name = _getTheBestStorageAdapterAvailable();              // 70\n                                                                                  // 71\n  // Return the storage by name, if none found then return noop                   // 72\n  return Store[name] || function() {};                                            // 73\n                                                                                  // 74\n};                                                                                // 75\n                                                                                  // 76\n// Returns an instance of the best possible storage                               // 77\nStore.create = function(options) {                                                // 78\n                                                                                  // 79\n  // Get the best storage available                                               // 80\n  var storage = Store.getStorage();                                               // 81\n                                                                                  // 82\n  // Return the instance                                                          // 83\n  return new storage(options);                                                    // 84\n                                                                                  // 85\n};                                                                                // 86\n////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]