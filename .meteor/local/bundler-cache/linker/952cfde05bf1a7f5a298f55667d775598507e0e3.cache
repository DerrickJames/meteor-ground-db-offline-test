[{"type":"js","data":"(function () {\n\n/* Imports */\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar Meteor;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/meteor/packages/meteor.js                                                                            //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\n(function(){                                                                                                     // 1\n                                                                                                                 // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 3\n//                                                                                                        //     // 4\n// packages/meteor/server_environment.js                                                                  //     // 5\n//                                                                                                        //     // 6\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 7\n                                                                                                          //     // 8\nMeteor = {                                                                                                // 1   // 9\n  isClient: false,                                                                                        // 2   // 10\n  isServer: true,                                                                                         // 3   // 11\n  isCordova: false                                                                                        // 4   // 12\n};                                                                                                        // 5   // 13\n                                                                                                          // 6   // 14\nMeteor.settings = {};                                                                                     // 7   // 15\n                                                                                                          // 8   // 16\nif (process.env.METEOR_SETTINGS) {                                                                        // 9   // 17\n  try {                                                                                                   // 10  // 18\n    Meteor.settings = JSON.parse(process.env.METEOR_SETTINGS);                                            // 11  // 19\n  } catch (e) {                                                                                           // 12  // 20\n    throw new Error(\"METEOR_SETTINGS are not valid JSON: \" + process.env.METEOR_SETTINGS);                // 13  // 21\n  }                                                                                                       // 14  // 22\n}                                                                                                         // 15  // 23\n                                                                                                          // 16  // 24\n// Make sure that there is always a public attribute                                                      // 17  // 25\n// to enable Meteor.settings.public on client                                                             // 18  // 26\nif (! Meteor.settings.public) {                                                                           // 19  // 27\n    Meteor.settings.public = {};                                                                          // 20  // 28\n}                                                                                                         // 21  // 29\n                                                                                                          // 22  // 30\n// Push a subset of settings to the client.  Note that the way this                                       // 23  // 31\n// code is written, if the app mutates `Meteor.settings.public` on the                                    // 24  // 32\n// server, it also mutates                                                                                // 25  // 33\n// `__meteor_runtime_config__.PUBLIC_SETTINGS`, and the modified                                          // 26  // 34\n// settings will be sent to the client.                                                                   // 27  // 35\nif (typeof __meteor_runtime_config__ === \"object\") {                                                      // 28  // 36\n  __meteor_runtime_config__.PUBLIC_SETTINGS = Meteor.settings.public;                                     // 29  // 37\n}                                                                                                         // 30  // 38\n                                                                                                          // 31  // 39\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 40\n                                                                                                                 // 41\n}).call(this);                                                                                                   // 42\n                                                                                                                 // 43\n                                                                                                                 // 44\n                                                                                                                 // 45\n                                                                                                                 // 46\n                                                                                                                 // 47\n                                                                                                                 // 48\n(function(){                                                                                                     // 49\n                                                                                                                 // 50\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 51\n//                                                                                                        //     // 52\n// packages/meteor/helpers.js                                                                             //     // 53\n//                                                                                                        //     // 54\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 55\n                                                                                                          //     // 56\nif (Meteor.isServer)                                                                                      // 1   // 57\n  var Future = Npm.require('fibers/future');                                                              // 2   // 58\n                                                                                                          // 3   // 59\nif (typeof __meteor_runtime_config__ === 'object' &&                                                      // 4   // 60\n    __meteor_runtime_config__.meteorRelease) {                                                            // 5   // 61\n  /**                                                                                                     // 6   // 62\n   * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `\"1.2.3\"`). It is `undefined` if the project was built using a git checkout of Meteor.\n   * @locus Anywhere                                                                                      // 8   // 64\n   * @type {String}                                                                                       // 9   // 65\n   */                                                                                                     // 10  // 66\n  Meteor.release = __meteor_runtime_config__.meteorRelease;                                               // 11  // 67\n}                                                                                                         // 12  // 68\n                                                                                                          // 13  // 69\n// XXX find a better home for these? Ideally they would be _.get,                                         // 14  // 70\n// _.ensure, _.delete..                                                                                   // 15  // 71\n                                                                                                          // 16  // 72\n_.extend(Meteor, {                                                                                        // 17  // 73\n  // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or                                       // 18  // 74\n  // a[b][c] doesn't exist.                                                                               // 19  // 75\n  //                                                                                                      // 20  // 76\n  _get: function (obj /*, arguments */) {                                                                 // 21  // 77\n    for (var i = 1; i < arguments.length; i++) {                                                          // 22  // 78\n      if (!(arguments[i] in obj))                                                                         // 23  // 79\n        return undefined;                                                                                 // 24  // 80\n      obj = obj[arguments[i]];                                                                            // 25  // 81\n    }                                                                                                     // 26  // 82\n    return obj;                                                                                           // 27  // 83\n  },                                                                                                      // 28  // 84\n                                                                                                          // 29  // 85\n  // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,                                     // 30  // 86\n  // it is created and set to {}. Either way, it is returned.                                             // 31  // 87\n  //                                                                                                      // 32  // 88\n  _ensure: function (obj /*, arguments */) {                                                              // 33  // 89\n    for (var i = 1; i < arguments.length; i++) {                                                          // 34  // 90\n      var key = arguments[i];                                                                             // 35  // 91\n      if (!(key in obj))                                                                                  // 36  // 92\n        obj[key] = {};                                                                                    // 37  // 93\n      obj = obj[key];                                                                                     // 38  // 94\n    }                                                                                                     // 39  // 95\n                                                                                                          // 40  // 96\n    return obj;                                                                                           // 41  // 97\n  },                                                                                                      // 42  // 98\n                                                                                                          // 43  // 99\n  // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it                                       // 44  // 100\n  // isn't empty, then a[b] unless it isn't empty.                                                        // 45  // 101\n  //                                                                                                      // 46  // 102\n  _delete: function (obj /*, arguments */) {                                                              // 47  // 103\n    var stack = [obj];                                                                                    // 48  // 104\n    var leaf = true;                                                                                      // 49  // 105\n    for (var i = 1; i < arguments.length - 1; i++) {                                                      // 50  // 106\n      var key = arguments[i];                                                                             // 51  // 107\n      if (!(key in obj)) {                                                                                // 52  // 108\n        leaf = false;                                                                                     // 53  // 109\n        break;                                                                                            // 54  // 110\n      }                                                                                                   // 55  // 111\n      obj = obj[key];                                                                                     // 56  // 112\n      if (typeof obj !== \"object\")                                                                        // 57  // 113\n        break;                                                                                            // 58  // 114\n      stack.push(obj);                                                                                    // 59  // 115\n    }                                                                                                     // 60  // 116\n                                                                                                          // 61  // 117\n    for (var i = stack.length - 1; i >= 0; i--) {                                                         // 62  // 118\n      var key = arguments[i+1];                                                                           // 63  // 119\n                                                                                                          // 64  // 120\n      if (leaf)                                                                                           // 65  // 121\n        leaf = false;                                                                                     // 66  // 122\n      else                                                                                                // 67  // 123\n        for (var other in stack[i][key])                                                                  // 68  // 124\n          return; // not empty -- we're done                                                              // 69  // 125\n                                                                                                          // 70  // 126\n      delete stack[i][key];                                                                               // 71  // 127\n    }                                                                                                     // 72  // 128\n  },                                                                                                      // 73  // 129\n                                                                                                          // 74  // 130\n  // wrapAsync can wrap any function that takes some number of arguments that                             // 75  // 131\n  // can't be undefined, followed by some optional arguments, where the callback                          // 76  // 132\n  // is the last optional argument.                                                                       // 77  // 133\n  // e.g. fs.readFile(pathname, [callback]),                                                              // 78  // 134\n  // fs.open(pathname, flags, [mode], [callback])                                                         // 79  // 135\n  // For maximum effectiveness and least confusion, wrapAsync should be used on                           // 80  // 136\n  // functions where the callback is the only argument of type Function.                                  // 81  // 137\n                                                                                                          // 82  // 138\n  /**                                                                                                     // 83  // 139\n   * @memberOf Meteor                                                                                     // 84  // 140\n   * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.\n   * @locus Anywhere                                                                                      // 86  // 142\n   * @param {Function} func A function that takes a callback as its final parameter                       // 87  // 143\n   * @param {Object} [context] Optional `this` object against which the original function will be invoked        // 144\n   */                                                                                                     // 89  // 145\n  wrapAsync: function (fn, context) {                                                                     // 90  // 146\n    return function (/* arguments */) {                                                                   // 91  // 147\n      var self = context || this;                                                                         // 92  // 148\n      var newArgs = _.toArray(arguments);                                                                 // 93  // 149\n      var callback;                                                                                       // 94  // 150\n                                                                                                          // 95  // 151\n      for (var i = newArgs.length - 1; i >= 0; --i) {                                                     // 96  // 152\n        var arg = newArgs[i];                                                                             // 97  // 153\n        var type = typeof arg;                                                                            // 98  // 154\n        if (type !== \"undefined\") {                                                                       // 99  // 155\n          if (type === \"function\") {                                                                      // 100\n            callback = arg;                                                                               // 101\n          }                                                                                               // 102\n          break;                                                                                          // 103\n        }                                                                                                 // 104\n      }                                                                                                   // 105\n                                                                                                          // 106\n      if (! callback) {                                                                                   // 107\n        if (Meteor.isClient) {                                                                            // 108\n          callback = logErr;                                                                              // 109\n        } else {                                                                                          // 110\n          var fut = new Future();                                                                         // 111\n          callback = fut.resolver();                                                                      // 112\n        }                                                                                                 // 113\n        ++i; // Insert the callback just after arg.                                                       // 114\n      }                                                                                                   // 115\n                                                                                                          // 116\n      newArgs[i] = Meteor.bindEnvironment(callback);                                                      // 117\n      var result = fn.apply(self, newArgs);                                                               // 118\n      return fut ? fut.wait() : result;                                                                   // 119\n    };                                                                                                    // 120\n  },                                                                                                      // 121\n                                                                                                          // 122\n  // Sets child's prototype to a new object whose prototype is parent's                                   // 123\n  // prototype. Used as:                                                                                  // 124\n  //   Meteor._inherits(ClassB, ClassA).                                                                  // 125\n  //   _.extend(ClassB.prototype, { ... })                                                                // 126\n  // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.                            // 127\n  _inherits: function (Child, Parent) {                                                                   // 128\n    // copy Parent static properties                                                                      // 129\n    for (var key in Parent) {                                                                             // 130\n      // make sure we only copy hasOwnProperty properties vs. prototype                                   // 131\n      // properties                                                                                       // 132\n      if (_.has(Parent, key))                                                                             // 133\n        Child[key] = Parent[key];                                                                         // 134\n    }                                                                                                     // 135\n                                                                                                          // 136\n    // a middle member of prototype chain: takes the prototype from the Parent                            // 137\n    var Middle = function () {                                                                            // 138\n      this.constructor = Child;                                                                           // 139\n    };                                                                                                    // 140\n    Middle.prototype = Parent.prototype;                                                                  // 141\n    Child.prototype = new Middle();                                                                       // 142\n    Child.__super__ = Parent.prototype;                                                                   // 143\n    return Child;                                                                                         // 144\n  }                                                                                                       // 145\n});                                                                                                       // 146\n                                                                                                          // 147\nvar warnedAboutWrapAsync = false;                                                                         // 148\n                                                                                                          // 149\n/**                                                                                                       // 150\n * @deprecated in 0.9.3                                                                                   // 151\n */                                                                                                       // 152\nMeteor._wrapAsync = function(fn, context) {                                                               // 153\n  if (! warnedAboutWrapAsync) {                                                                           // 154\n    Meteor._debug(\"Meteor._wrapAsync has been renamed to Meteor.wrapAsync\");                              // 155\n    warnedAboutWrapAsync = true;                                                                          // 156\n  }                                                                                                       // 157\n  return Meteor.wrapAsync.apply(Meteor, arguments);                                                       // 158\n};                                                                                                        // 159\n                                                                                                          // 160\nfunction logErr(err) {                                                                                    // 161\n  if (err) {                                                                                              // 162\n    return Meteor._debug(                                                                                 // 163\n      \"Exception in callback of async function\",                                                          // 164\n      err.stack ? err.stack : err                                                                         // 165\n    );                                                                                                    // 166\n  }                                                                                                       // 167\n}                                                                                                         // 168\n                                                                                                          // 169\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 226\n                                                                                                                 // 227\n}).call(this);                                                                                                   // 228\n                                                                                                                 // 229\n                                                                                                                 // 230\n                                                                                                                 // 231\n                                                                                                                 // 232\n                                                                                                                 // 233\n                                                                                                                 // 234\n(function(){                                                                                                     // 235\n                                                                                                                 // 236\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 237\n//                                                                                                        //     // 238\n// packages/meteor/setimmediate.js                                                                        //     // 239\n//                                                                                                        //     // 240\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 241\n                                                                                                          //     // 242\n// Chooses one of three setImmediate implementations:                                                     // 1   // 243\n//                                                                                                        // 2   // 244\n// * Native setImmediate (IE 10, Node 0.9+)                                                               // 3   // 245\n//                                                                                                        // 4   // 246\n// * postMessage (many browsers)                                                                          // 5   // 247\n//                                                                                                        // 6   // 248\n// * setTimeout  (fallback)                                                                               // 7   // 249\n//                                                                                                        // 8   // 250\n// The postMessage implementation is based on                                                             // 9   // 251\n// https://github.com/NobleJS/setImmediate/tree/1.0.1                                                     // 10  // 252\n//                                                                                                        // 11  // 253\n// Don't use `nextTick` for Node since it runs its callbacks before                                       // 12  // 254\n// I/O, which is stricter than we're looking for.                                                         // 13  // 255\n//                                                                                                        // 14  // 256\n// Not installed as a polyfill, as our public API is `Meteor.defer`.                                      // 15  // 257\n// Since we're not trying to be a polyfill, we have some                                                  // 16  // 258\n// simplifications:                                                                                       // 17  // 259\n//                                                                                                        // 18  // 260\n// If one invocation of a setImmediate callback pauses itself by a                                        // 19  // 261\n// call to alert/prompt/showModelDialog, the NobleJS polyfill                                             // 20  // 262\n// implementation ensured that no setImmedate callback would run until                                    // 21  // 263\n// the first invocation completed.  While correct per the spec, what it                                   // 22  // 264\n// would mean for us in practice is that any reactive updates relying                                     // 23  // 265\n// on Meteor.defer would be hung in the main window until the modal                                       // 24  // 266\n// dialog was dismissed.  Thus we only ensure that a setImmediate                                         // 25  // 267\n// function is called in a later event loop.                                                              // 26  // 268\n//                                                                                                        // 27  // 269\n// We don't need to support using a string to be eval'ed for the                                          // 28  // 270\n// callback, arguments to the function, or clearImmediate.                                                // 29  // 271\n                                                                                                          // 30  // 272\n\"use strict\";                                                                                             // 31  // 273\n                                                                                                          // 32  // 274\nvar global = this;                                                                                        // 33  // 275\n                                                                                                          // 34  // 276\n                                                                                                          // 35  // 277\n// IE 10, Node >= 9.1                                                                                     // 36  // 278\n                                                                                                          // 37  // 279\nfunction useSetImmediate() {                                                                              // 38  // 280\n  if (! global.setImmediate)                                                                              // 39  // 281\n    return null;                                                                                          // 40  // 282\n  else {                                                                                                  // 41  // 283\n    var setImmediate = function (fn) {                                                                    // 42  // 284\n      global.setImmediate(fn);                                                                            // 43  // 285\n    };                                                                                                    // 44  // 286\n    setImmediate.implementation = 'setImmediate';                                                         // 45  // 287\n    return setImmediate;                                                                                  // 46  // 288\n  }                                                                                                       // 47  // 289\n}                                                                                                         // 48  // 290\n                                                                                                          // 49  // 291\n                                                                                                          // 50  // 292\n// Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari                                         // 51  // 293\n                                                                                                          // 52  // 294\nfunction usePostMessage() {                                                                               // 53  // 295\n  // The test against `importScripts` prevents this implementation                                        // 54  // 296\n  // from being installed inside a web worker, where                                                      // 55  // 297\n  // `global.postMessage` means something completely different and                                        // 56  // 298\n  // can't be used for this purpose.                                                                      // 57  // 299\n                                                                                                          // 58  // 300\n  if (!global.postMessage || global.importScripts) {                                                      // 59  // 301\n    return null;                                                                                          // 60  // 302\n  }                                                                                                       // 61  // 303\n                                                                                                          // 62  // 304\n  // Avoid synchronous post message implementations.                                                      // 63  // 305\n                                                                                                          // 64  // 306\n  var postMessageIsAsynchronous = true;                                                                   // 65  // 307\n  var oldOnMessage = global.onmessage;                                                                    // 66  // 308\n  global.onmessage = function () {                                                                        // 67  // 309\n      postMessageIsAsynchronous = false;                                                                  // 68  // 310\n  };                                                                                                      // 69  // 311\n  global.postMessage(\"\", \"*\");                                                                            // 70  // 312\n  global.onmessage = oldOnMessage;                                                                        // 71  // 313\n                                                                                                          // 72  // 314\n  if (! postMessageIsAsynchronous)                                                                        // 73  // 315\n    return null;                                                                                          // 74  // 316\n                                                                                                          // 75  // 317\n  var funcIndex = 0;                                                                                      // 76  // 318\n  var funcs = {};                                                                                         // 77  // 319\n                                                                                                          // 78  // 320\n  // Installs an event handler on `global` for the `message` event: see                                   // 79  // 321\n  // * https://developer.mozilla.org/en/DOM/window.postMessage                                            // 80  // 322\n  // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages       // 81  // 323\n                                                                                                          // 82  // 324\n  // XXX use Random.id() here?                                                                            // 83  // 325\n  var MESSAGE_PREFIX = \"Meteor._setImmediate.\" + Math.random() + '.';                                     // 84  // 326\n                                                                                                          // 85  // 327\n  function isStringAndStartsWith(string, putativeStart) {                                                 // 86  // 328\n    return (typeof string === \"string\" &&                                                                 // 87  // 329\n            string.substring(0, putativeStart.length) === putativeStart);                                 // 88  // 330\n  }                                                                                                       // 89  // 331\n                                                                                                          // 90  // 332\n  function onGlobalMessage(event) {                                                                       // 91  // 333\n    // This will catch all incoming messages (even from other                                             // 92  // 334\n    // windows!), so we need to try reasonably hard to avoid letting                                      // 93  // 335\n    // anyone else trick us into firing off. We test the origin is                                        // 94  // 336\n    // still this window, and that a (randomly generated)                                                 // 95  // 337\n    // unpredictable identifying prefix is present.                                                       // 96  // 338\n    if (event.source === global &&                                                                        // 97  // 339\n        isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {                                              // 98  // 340\n      var index = event.data.substring(MESSAGE_PREFIX.length);                                            // 99  // 341\n      try {                                                                                               // 100\n        if (funcs[index])                                                                                 // 101\n          funcs[index]();                                                                                 // 102\n      }                                                                                                   // 103\n      finally {                                                                                           // 104\n        delete funcs[index];                                                                              // 105\n      }                                                                                                   // 106\n    }                                                                                                     // 107\n  }                                                                                                       // 108\n                                                                                                          // 109\n  if (global.addEventListener) {                                                                          // 110\n    global.addEventListener(\"message\", onGlobalMessage, false);                                           // 111\n  } else {                                                                                                // 112\n    global.attachEvent(\"onmessage\", onGlobalMessage);                                                     // 113\n  }                                                                                                       // 114\n                                                                                                          // 115\n  var setImmediate = function (fn) {                                                                      // 116\n    // Make `global` post a message to itself with the handle and                                         // 117\n    // identifying prefix, thus asynchronously invoking our                                               // 118\n    // onGlobalMessage listener above.                                                                    // 119\n    ++funcIndex;                                                                                          // 120\n    funcs[funcIndex] = fn;                                                                                // 121\n    global.postMessage(MESSAGE_PREFIX + funcIndex, \"*\");                                                  // 122\n  };                                                                                                      // 123\n  setImmediate.implementation = 'postMessage';                                                            // 124\n  return setImmediate;                                                                                    // 125\n}                                                                                                         // 126\n                                                                                                          // 127\n                                                                                                          // 128\nfunction useTimeout() {                                                                                   // 129\n  var setImmediate = function (fn) {                                                                      // 130\n    global.setTimeout(fn, 0);                                                                             // 131\n  };                                                                                                      // 132\n  setImmediate.implementation = 'setTimeout';                                                             // 133\n  return setImmediate;                                                                                    // 134\n}                                                                                                         // 135\n                                                                                                          // 136\n                                                                                                          // 137\nMeteor._setImmediate =                                                                                    // 138\n  useSetImmediate() ||                                                                                    // 139\n  usePostMessage() ||                                                                                     // 140\n  useTimeout();                                                                                           // 141\n                                                                                                          // 142\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 385\n                                                                                                                 // 386\n}).call(this);                                                                                                   // 387\n                                                                                                                 // 388\n                                                                                                                 // 389\n                                                                                                                 // 390\n                                                                                                                 // 391\n                                                                                                                 // 392\n                                                                                                                 // 393\n(function(){                                                                                                     // 394\n                                                                                                                 // 395\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 396\n//                                                                                                        //     // 397\n// packages/meteor/timers.js                                                                              //     // 398\n//                                                                                                        //     // 399\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 400\n                                                                                                          //     // 401\nvar withoutInvocation = function (f) {                                                                    // 1   // 402\n  if (Package.ddp) {                                                                                      // 2   // 403\n    var _CurrentInvocation = Package.ddp.DDP._CurrentInvocation;                                          // 3   // 404\n    if (_CurrentInvocation.get() && _CurrentInvocation.get().isSimulation)                                // 4   // 405\n      throw new Error(\"Can't set timers inside simulations\");                                             // 5   // 406\n    return function () { _CurrentInvocation.withValue(null, f); };                                        // 6   // 407\n  }                                                                                                       // 7   // 408\n  else                                                                                                    // 8   // 409\n    return f;                                                                                             // 9   // 410\n};                                                                                                        // 10  // 411\n                                                                                                          // 11  // 412\nvar bindAndCatch = function (context, f) {                                                                // 12  // 413\n  return Meteor.bindEnvironment(withoutInvocation(f), context);                                           // 13  // 414\n};                                                                                                        // 14  // 415\n                                                                                                          // 15  // 416\n_.extend(Meteor, {                                                                                        // 16  // 417\n  // Meteor.setTimeout and Meteor.setInterval callbacks scheduled                                         // 17  // 418\n  // inside a server method are not part of the method invocation and                                     // 18  // 419\n  // should clear out the CurrentInvocation environment variable.                                         // 19  // 420\n                                                                                                          // 20  // 421\n  /**                                                                                                     // 21  // 422\n   * @memberOf Meteor                                                                                     // 22  // 423\n   * @summary Call a function in the future after waiting for a specified delay.                          // 23  // 424\n   * @locus Anywhere                                                                                      // 24  // 425\n   * @param {Function} func The function to run                                                           // 25  // 426\n   * @param {Number} delay Number of milliseconds to wait before calling function                         // 26  // 427\n   */                                                                                                     // 27  // 428\n  setTimeout: function (f, duration) {                                                                    // 28  // 429\n    return setTimeout(bindAndCatch(\"setTimeout callback\", f), duration);                                  // 29  // 430\n  },                                                                                                      // 30  // 431\n                                                                                                          // 31  // 432\n  /**                                                                                                     // 32  // 433\n   * @memberOf Meteor                                                                                     // 33  // 434\n   * @summary Call a function repeatedly, with a time delay between calls.                                // 34  // 435\n   * @locus Anywhere                                                                                      // 35  // 436\n   * @param {Function} func The function to run                                                           // 36  // 437\n   * @param {Number} delay Number of milliseconds to wait between each function call.                     // 37  // 438\n   */                                                                                                     // 38  // 439\n  setInterval: function (f, duration) {                                                                   // 39  // 440\n    return setInterval(bindAndCatch(\"setInterval callback\", f), duration);                                // 40  // 441\n  },                                                                                                      // 41  // 442\n                                                                                                          // 42  // 443\n  /**                                                                                                     // 43  // 444\n   * @memberOf Meteor                                                                                     // 44  // 445\n   * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.                         // 45  // 446\n   * @locus Anywhere                                                                                      // 46  // 447\n   * @param {Number} id The handle returned by `Meteor.setInterval`                                       // 47  // 448\n   */                                                                                                     // 48  // 449\n  clearInterval: function(x) {                                                                            // 49  // 450\n    return clearInterval(x);                                                                              // 50  // 451\n  },                                                                                                      // 51  // 452\n                                                                                                          // 52  // 453\n  /**                                                                                                     // 53  // 454\n   * @memberOf Meteor                                                                                     // 54  // 455\n   * @summary Cancel a function call scheduled by `Meteor.setTimeout`.                                    // 55  // 456\n   * @locus Anywhere                                                                                      // 56  // 457\n   * @param {Number} id The handle returned by `Meteor.setTimeout`                                        // 57  // 458\n   */                                                                                                     // 58  // 459\n  clearTimeout: function(x) {                                                                             // 59  // 460\n    return clearTimeout(x);                                                                               // 60  // 461\n  },                                                                                                      // 61  // 462\n                                                                                                          // 62  // 463\n  // XXX consider making this guarantee ordering of defer'd callbacks, like                               // 63  // 464\n  // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:                              // 64  // 465\n  //    callSomethingThatDefersSomeWork();                                                                // 65  // 466\n  //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));                                  // 66  // 467\n  defer: function (f) {                                                                                   // 67  // 468\n    Meteor._setImmediate(bindAndCatch(\"defer callback\", f));                                              // 68  // 469\n  }                                                                                                       // 69  // 470\n});                                                                                                       // 70  // 471\n                                                                                                          // 71  // 472\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 473\n                                                                                                                 // 474\n}).call(this);                                                                                                   // 475\n                                                                                                                 // 476\n                                                                                                                 // 477\n                                                                                                                 // 478\n                                                                                                                 // 479\n                                                                                                                 // 480\n                                                                                                                 // 481\n(function(){                                                                                                     // 482\n                                                                                                                 // 483\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 484\n//                                                                                                        //     // 485\n// packages/meteor/errors.js                                                                              //     // 486\n//                                                                                                        //     // 487\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 488\n                                                                                                          //     // 489\n// Makes an error subclass which properly contains a stack trace in most                                  // 1   // 490\n// environments. constructor can set fields on `this` (and should probably set                            // 2   // 491\n// `message`, which is what gets displayed at the top of a stack trace).                                  // 3   // 492\n//                                                                                                        // 4   // 493\nMeteor.makeErrorType = function (name, constructor) {                                                     // 5   // 494\n  var errorClass = function (/*arguments*/) {                                                             // 6   // 495\n    var self = this;                                                                                      // 7   // 496\n                                                                                                          // 8   // 497\n    // Ensure we get a proper stack trace in most Javascript environments                                 // 9   // 498\n    if (Error.captureStackTrace) {                                                                        // 10  // 499\n      // V8 environments (Chrome and Node.js)                                                             // 11  // 500\n      Error.captureStackTrace(self, errorClass);                                                          // 12  // 501\n    } else {                                                                                              // 13  // 502\n      // Firefox                                                                                          // 14  // 503\n      var e = new Error;                                                                                  // 15  // 504\n      e.__proto__ = errorClass.prototype;                                                                 // 16  // 505\n      if (e instanceof errorClass)                                                                        // 17  // 506\n        self = e;                                                                                         // 18  // 507\n    }                                                                                                     // 19  // 508\n    // Safari magically works.                                                                            // 20  // 509\n                                                                                                          // 21  // 510\n    constructor.apply(self, arguments);                                                                   // 22  // 511\n                                                                                                          // 23  // 512\n    self.errorType = name;                                                                                // 24  // 513\n                                                                                                          // 25  // 514\n    return self;                                                                                          // 26  // 515\n  };                                                                                                      // 27  // 516\n                                                                                                          // 28  // 517\n  Meteor._inherits(errorClass, Error);                                                                    // 29  // 518\n                                                                                                          // 30  // 519\n  return errorClass;                                                                                      // 31  // 520\n};                                                                                                        // 32  // 521\n                                                                                                          // 33  // 522\n// This should probably be in the livedata package, but we don't want                                     // 34  // 523\n// to require you to use the livedata package to get it. Eventually we                                    // 35  // 524\n// should probably rename it to DDP.Error and put it back in the                                          // 36  // 525\n// 'livedata' package (which we should rename to 'ddp' also.)                                             // 37  // 526\n//                                                                                                        // 38  // 527\n// Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object                           // 39  // 528\n// containing 'error' and optionally 'reason' and 'details'.                                              // 40  // 529\n// The DDP client manually puts these into Meteor.Error objects. (We don't use                            // 41  // 530\n// EJSON.addType here because the type is determined by location in the                                   // 42  // 531\n// protocol, not text on the wire.)                                                                       // 43  // 532\n                                                                                                          // 44  // 533\n/**                                                                                                       // 45  // 534\n * @summary This class represents a symbolic error thrown by a method.                                    // 46  // 535\n * @locus Anywhere                                                                                        // 47  // 536\n * @class                                                                                                 // 48  // 537\n * @param {String} error A string code uniquely identifying this kind of error.                           // 49  // 538\n * This string should be used by callers of the method to determine the                                   // 50  // 539\n * appropriate action to take, instead of attempting to parse the reason                                  // 51  // 540\n * or details fields. For example:                                                                        // 52  // 541\n *                                                                                                        // 53  // 542\n * ```                                                                                                    // 54  // 543\n * // on the server, pick a code unique to this error                                                     // 55  // 544\n * // the reason field should be a useful debug message                                                   // 56  // 545\n * throw new Meteor.Error(\"logged-out\",                                                                   // 57  // 546\n *   \"The user must be logged in to post a comment.\");                                                    // 58  // 547\n *                                                                                                        // 59  // 548\n * // on the client                                                                                       // 60  // 549\n * Meteor.call(\"methodName\", function (error) {                                                           // 61  // 550\n *   // identify the error                                                                                // 62  // 551\n *   if (error && error.error === \"logged-out\") {                                                         // 63  // 552\n *     // show a nice error message                                                                       // 64  // 553\n *     Session.set(\"errorMessage\", \"Please log in to post a comment.\");                                   // 65  // 554\n *   }                                                                                                    // 66  // 555\n * });                                                                                                    // 67  // 556\n * ```                                                                                                    // 68  // 557\n *                                                                                                        // 69  // 558\n * For legacy reasons, some built-in Meteor functions such as `check` throw                               // 70  // 559\n * errors with a number in this field.                                                                    // 71  // 560\n *                                                                                                        // 72  // 561\n * @param {String} [reason] Optional.  A short human-readable summary of the                              // 73  // 562\n * error, like 'Not Found'.                                                                               // 74  // 563\n * @param {String} [details] Optional.  Additional information about the error,                           // 75  // 564\n * like a textual stack trace.                                                                            // 76  // 565\n */                                                                                                       // 77  // 566\nMeteor.Error = Meteor.makeErrorType(                                                                      // 78  // 567\n  \"Meteor.Error\",                                                                                         // 79  // 568\n  function (error, reason, details) {                                                                     // 80  // 569\n    var self = this;                                                                                      // 81  // 570\n                                                                                                          // 82  // 571\n    // String code uniquely identifying this kind of error.                                               // 83  // 572\n    self.error = error;                                                                                   // 84  // 573\n                                                                                                          // 85  // 574\n    // Optional: A short human-readable summary of the error. Not                                         // 86  // 575\n    // intended to be shown to end users, just developers. (\"Not Found\",                                  // 87  // 576\n    // \"Internal Server Error\")                                                                           // 88  // 577\n    self.reason = reason;                                                                                 // 89  // 578\n                                                                                                          // 90  // 579\n    // Optional: Additional information about the error, say for                                          // 91  // 580\n    // debugging. It might be a (textual) stack trace if the server is                                    // 92  // 581\n    // willing to provide one. The corresponding thing in HTTP would be                                   // 93  // 582\n    // the body of a 404 or 500 response. (The difference is that we                                      // 94  // 583\n    // never expect this to be shown to end users, only developers, so                                    // 95  // 584\n    // it doesn't need to be pretty.)                                                                     // 96  // 585\n    self.details = details;                                                                               // 97  // 586\n                                                                                                          // 98  // 587\n    // This is what gets displayed at the top of a stack trace. Current                                   // 99  // 588\n    // format is \"[404]\" (if no reason is set) or \"File not found [404]\"                                  // 100\n    if (self.reason)                                                                                      // 101\n      self.message = self.reason + ' [' + self.error + ']';                                               // 102\n    else                                                                                                  // 103\n      self.message = '[' + self.error + ']';                                                              // 104\n  });                                                                                                     // 105\n                                                                                                          // 106\n// Meteor.Error is basically data and is sent over DDP, so you should be able to                          // 107\n// properly EJSON-clone it. This is especially important because if a                                     // 108\n// Meteor.Error is thrown through a Future, the error, reason, and details                                // 109\n// properties become non-enumerable so a standard Object clone won't preserve                             // 110\n// them and they will be lost from DDP.                                                                   // 111\nMeteor.Error.prototype.clone = function () {                                                              // 112\n  var self = this;                                                                                        // 113\n  return new Meteor.Error(self.error, self.reason, self.details);                                         // 114\n};                                                                                                        // 115\n                                                                                                          // 116\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 606\n                                                                                                                 // 607\n}).call(this);                                                                                                   // 608\n                                                                                                                 // 609\n                                                                                                                 // 610\n                                                                                                                 // 611\n                                                                                                                 // 612\n                                                                                                                 // 613\n                                                                                                                 // 614\n(function(){                                                                                                     // 615\n                                                                                                                 // 616\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 617\n//                                                                                                        //     // 618\n// packages/meteor/fiber_helpers.js                                                                       //     // 619\n//                                                                                                        //     // 620\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 621\n                                                                                                          //     // 622\nvar path = Npm.require('path');                                                                           // 1   // 623\nvar Fiber = Npm.require('fibers');                                                                        // 2   // 624\nvar Future = Npm.require(path.join('fibers', 'future'));                                                  // 3   // 625\n                                                                                                          // 4   // 626\nMeteor._noYieldsAllowed = function (f) {                                                                  // 5   // 627\n  var savedYield = Fiber.yield;                                                                           // 6   // 628\n  Fiber.yield = function () {                                                                             // 7   // 629\n    throw new Error(\"Can't call yield in a noYieldsAllowed block!\");                                      // 8   // 630\n  };                                                                                                      // 9   // 631\n  try {                                                                                                   // 10  // 632\n    return f();                                                                                           // 11  // 633\n  } finally {                                                                                             // 12  // 634\n    Fiber.yield = savedYield;                                                                             // 13  // 635\n  }                                                                                                       // 14  // 636\n};                                                                                                        // 15  // 637\n                                                                                                          // 16  // 638\nMeteor._DoubleEndedQueue = Npm.require('meteor-deque');                                                   // 17  // 639\n                                                                                                          // 18  // 640\n// Meteor._SynchronousQueue is a queue which runs task functions serially.                                // 19  // 641\n// Tasks are assumed to be synchronous: ie, it's assumed that they are                                    // 20  // 642\n// done when they return.                                                                                 // 21  // 643\n//                                                                                                        // 22  // 644\n// It has two methods:                                                                                    // 23  // 645\n//   - queueTask queues a task to be run, and returns immediately.                                        // 24  // 646\n//   - runTask queues a task to be run, and then yields. It returns                                       // 25  // 647\n//     when the task finishes running.                                                                    // 26  // 648\n//                                                                                                        // 27  // 649\n// It's safe to call queueTask from within a task, but not runTask (unless                                // 28  // 650\n// you're calling runTask from a nested Fiber).                                                           // 29  // 651\n//                                                                                                        // 30  // 652\n// Somewhat inspired by async.queue, but specific to blocking tasks.                                      // 31  // 653\n// XXX break this out into an NPM module?                                                                 // 32  // 654\n// XXX could maybe use the npm 'schlock' module instead, which would                                      // 33  // 655\n//     also support multiple concurrent \"read\" tasks                                                      // 34  // 656\n//                                                                                                        // 35  // 657\nMeteor._SynchronousQueue = function () {                                                                  // 36  // 658\n  var self = this;                                                                                        // 37  // 659\n  // List of tasks to run (not including a currently-running task if any). Each                           // 38  // 660\n  // is an object with field 'task' (the task function to run) and 'future' (the                          // 39  // 661\n  // Future associated with the blocking runTask call that queued it, or null if                          // 40  // 662\n  // called from queueTask).                                                                              // 41  // 663\n  self._taskHandles = new Meteor._DoubleEndedQueue();                                                     // 42  // 664\n  // This is true if self._run() is either currently executing or scheduled to                            // 43  // 665\n  // do so soon.                                                                                          // 44  // 666\n  self._runningOrRunScheduled = false;                                                                    // 45  // 667\n  // During the execution of a task, this is set to the fiber used to execute                             // 46  // 668\n  // that task. We use this to throw an error rather than deadlocking if the                              // 47  // 669\n  // user calls runTask from within a task on the same fiber.                                             // 48  // 670\n  self._currentTaskFiber = undefined;                                                                     // 49  // 671\n  // This is true if we're currently draining.  While we're draining, a further                           // 50  // 672\n  // drain is a noop, to prevent infinite loops.  \"drain\" is a heuristic type                             // 51  // 673\n  // operation, that has a meaning like unto \"what a naive person would expect                            // 52  // 674\n  // when modifying a table from an observe\"                                                              // 53  // 675\n  self._draining = false;                                                                                 // 54  // 676\n};                                                                                                        // 55  // 677\n                                                                                                          // 56  // 678\n_.extend(Meteor._SynchronousQueue.prototype, {                                                            // 57  // 679\n  runTask: function (task) {                                                                              // 58  // 680\n    var self = this;                                                                                      // 59  // 681\n                                                                                                          // 60  // 682\n    if (!self.safeToRunTask()) {                                                                          // 61  // 683\n      if (Fiber.current)                                                                                  // 62  // 684\n        throw new Error(\"Can't runTask from another task in the same fiber\");                             // 63  // 685\n      else                                                                                                // 64  // 686\n        throw new Error(\"Can only call runTask in a Fiber\");                                              // 65  // 687\n    }                                                                                                     // 66  // 688\n                                                                                                          // 67  // 689\n    var fut = new Future;                                                                                 // 68  // 690\n    var handle = {                                                                                        // 69  // 691\n      task: Meteor.bindEnvironment(task, function (e) {                                                   // 70  // 692\n        Meteor._debug(\"Exception from task:\", e && e.stack || e);                                         // 71  // 693\n        throw e;                                                                                          // 72  // 694\n      }),                                                                                                 // 73  // 695\n      future: fut,                                                                                        // 74  // 696\n      name: task.name                                                                                     // 75  // 697\n    };                                                                                                    // 76  // 698\n    self._taskHandles.push(handle);                                                                       // 77  // 699\n    self._scheduleRun();                                                                                  // 78  // 700\n    // Yield. We'll get back here after the task is run (and will throw if the                            // 79  // 701\n    // task throws).                                                                                      // 80  // 702\n    fut.wait();                                                                                           // 81  // 703\n  },                                                                                                      // 82  // 704\n  queueTask: function (task) {                                                                            // 83  // 705\n    var self = this;                                                                                      // 84  // 706\n    self._taskHandles.push({                                                                              // 85  // 707\n      task: task,                                                                                         // 86  // 708\n      name: task.name                                                                                     // 87  // 709\n    });                                                                                                   // 88  // 710\n    self._scheduleRun();                                                                                  // 89  // 711\n    // No need to block.                                                                                  // 90  // 712\n  },                                                                                                      // 91  // 713\n                                                                                                          // 92  // 714\n  flush: function () {                                                                                    // 93  // 715\n    var self = this;                                                                                      // 94  // 716\n    self.runTask(function () {});                                                                         // 95  // 717\n  },                                                                                                      // 96  // 718\n                                                                                                          // 97  // 719\n  safeToRunTask: function () {                                                                            // 98  // 720\n    var self = this;                                                                                      // 99  // 721\n    return Fiber.current && self._currentTaskFiber !== Fiber.current;                                     // 100\n  },                                                                                                      // 101\n                                                                                                          // 102\n  drain: function () {                                                                                    // 103\n    var self = this;                                                                                      // 104\n    if (self._draining)                                                                                   // 105\n      return;                                                                                             // 106\n    if (!self.safeToRunTask())                                                                            // 107\n      return;                                                                                             // 108\n    self._draining = true;                                                                                // 109\n    while (! self._taskHandles.isEmpty()) {                                                               // 110\n      self.flush();                                                                                       // 111\n    }                                                                                                     // 112\n    self._draining = false;                                                                               // 113\n  },                                                                                                      // 114\n                                                                                                          // 115\n  _scheduleRun: function () {                                                                             // 116\n    var self = this;                                                                                      // 117\n    // Already running or scheduled? Do nothing.                                                          // 118\n    if (self._runningOrRunScheduled)                                                                      // 119\n      return;                                                                                             // 120\n                                                                                                          // 121\n    self._runningOrRunScheduled = true;                                                                   // 122\n    setImmediate(function () {                                                                            // 123\n      Fiber(function () {                                                                                 // 124\n        self._run();                                                                                      // 125\n      }).run();                                                                                           // 126\n    });                                                                                                   // 127\n  },                                                                                                      // 128\n  _run: function () {                                                                                     // 129\n    var self = this;                                                                                      // 130\n                                                                                                          // 131\n    if (!self._runningOrRunScheduled)                                                                     // 132\n      throw new Error(\"expected to be _runningOrRunScheduled\");                                           // 133\n                                                                                                          // 134\n    if (self._taskHandles.isEmpty()) {                                                                    // 135\n      // Done running tasks! Don't immediately schedule another run, but                                  // 136\n      // allow future tasks to do so.                                                                     // 137\n      self._runningOrRunScheduled = false;                                                                // 138\n      return;                                                                                             // 139\n    }                                                                                                     // 140\n    var taskHandle = self._taskHandles.shift();                                                           // 141\n                                                                                                          // 142\n    // Run the task.                                                                                      // 143\n    self._currentTaskFiber = Fiber.current;                                                               // 144\n    var exception = undefined;                                                                            // 145\n    try {                                                                                                 // 146\n      taskHandle.task();                                                                                  // 147\n    } catch (err) {                                                                                       // 148\n      if (taskHandle.future) {                                                                            // 149\n        // We'll throw this exception through runTask.                                                    // 150\n        exception = err;                                                                                  // 151\n      } else {                                                                                            // 152\n        Meteor._debug(\"Exception in queued task: \" + (err.stack || err));                                 // 153\n      }                                                                                                   // 154\n    }                                                                                                     // 155\n    self._currentTaskFiber = undefined;                                                                   // 156\n                                                                                                          // 157\n    // Soon, run the next task, if there is any.                                                          // 158\n    self._runningOrRunScheduled = false;                                                                  // 159\n    self._scheduleRun();                                                                                  // 160\n                                                                                                          // 161\n    // If this was queued with runTask, let the runTask call return (throwing if                          // 162\n    // the task threw).                                                                                   // 163\n    if (taskHandle.future) {                                                                              // 164\n      if (exception)                                                                                      // 165\n        taskHandle.future['throw'](exception);                                                            // 166\n      else                                                                                                // 167\n        taskHandle.future['return']();                                                                    // 168\n    }                                                                                                     // 169\n  }                                                                                                       // 170\n});                                                                                                       // 171\n                                                                                                          // 172\n// Sleep. Mostly used for debugging (eg, inserting latency into server                                    // 173\n// methods).                                                                                              // 174\n//                                                                                                        // 175\nMeteor._sleepForMs = function (ms) {                                                                      // 176\n  var fiber = Fiber.current;                                                                              // 177\n  setTimeout(function() {                                                                                 // 178\n    fiber.run();                                                                                          // 179\n  }, ms);                                                                                                 // 180\n  Fiber.yield();                                                                                          // 181\n};                                                                                                        // 182\n                                                                                                          // 183\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 806\n                                                                                                                 // 807\n}).call(this);                                                                                                   // 808\n                                                                                                                 // 809\n                                                                                                                 // 810\n                                                                                                                 // 811\n                                                                                                                 // 812\n                                                                                                                 // 813\n                                                                                                                 // 814\n(function(){                                                                                                     // 815\n                                                                                                                 // 816\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 817\n//                                                                                                        //     // 818\n// packages/meteor/startup_server.js                                                                      //     // 819\n//                                                                                                        //     // 820\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 821\n                                                                                                          //     // 822\nMeteor.startup = function (callback) {                                                                    // 1   // 823\n  if (__meteor_bootstrap__.startupHooks) {                                                                // 2   // 824\n    __meteor_bootstrap__.startupHooks.push(callback);                                                     // 3   // 825\n  } else {                                                                                                // 4   // 826\n    // We already started up. Just call it now.                                                           // 5   // 827\n    callback();                                                                                           // 6   // 828\n  }                                                                                                       // 7   // 829\n};                                                                                                        // 8   // 830\n                                                                                                          // 9   // 831\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 832\n                                                                                                                 // 833\n}).call(this);                                                                                                   // 834\n                                                                                                                 // 835\n                                                                                                                 // 836\n                                                                                                                 // 837\n                                                                                                                 // 838\n                                                                                                                 // 839\n                                                                                                                 // 840\n(function(){                                                                                                     // 841\n                                                                                                                 // 842\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 843\n//                                                                                                        //     // 844\n// packages/meteor/debug.js                                                                               //     // 845\n//                                                                                                        //     // 846\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 847\n                                                                                                          //     // 848\nvar suppress = 0;                                                                                         // 1   // 849\n                                                                                                          // 2   // 850\n// replacement for console.log. This is a temporary API. We should                                        // 3   // 851\n// provide a real logging API soon (possibly just a polyfill for                                          // 4   // 852\n// console?)                                                                                              // 5   // 853\n//                                                                                                        // 6   // 854\n// NOTE: this is used on the server to print the warning about                                            // 7   // 855\n// having autopublish enabled when you probably meant to turn it                                          // 8   // 856\n// off. it's not really the proper use of something called                                                // 9   // 857\n// _debug. the intent is for this message to go to the terminal and                                       // 10  // 858\n// be very visible. if you change _debug to go someplace else, etc,                                       // 11  // 859\n// please fix the autopublish code to do something reasonable.                                            // 12  // 860\n//                                                                                                        // 13  // 861\nMeteor._debug = function (/* arguments */) {                                                              // 14  // 862\n  if (suppress) {                                                                                         // 15  // 863\n    suppress--;                                                                                           // 16  // 864\n    return;                                                                                               // 17  // 865\n  }                                                                                                       // 18  // 866\n  if (typeof console !== 'undefined' &&                                                                   // 19  // 867\n      typeof console.log !== 'undefined') {                                                               // 20  // 868\n    if (arguments.length == 0) { // IE Companion breaks otherwise                                         // 21  // 869\n      // IE10 PP4 requires at least one argument                                                          // 22  // 870\n      console.log('');                                                                                    // 23  // 871\n    } else {                                                                                              // 24  // 872\n      // IE doesn't have console.log.apply, it's not a real Object.                                       // 25  // 873\n      // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9                  // 26  // 874\n      // http://patik.com/blog/complete-cross-browser-console-log/                                        // 27  // 875\n      if (typeof console.log.apply === \"function\") {                                                      // 28  // 876\n        // Most browsers                                                                                  // 29  // 877\n                                                                                                          // 30  // 878\n        // Chrome and Safari only hyperlink URLs to source files in first argument of                     // 31  // 879\n        // console.log, so try to call it with one argument if possible.                                  // 32  // 880\n        // Approach taken here: If all arguments are strings, join them on space.                         // 33  // 881\n        // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991                            // 34  // 882\n        var allArgumentsOfTypeString = true;                                                              // 35  // 883\n        for (var i = 0; i < arguments.length; i++)                                                        // 36  // 884\n          if (typeof arguments[i] !== \"string\")                                                           // 37  // 885\n            allArgumentsOfTypeString = false;                                                             // 38  // 886\n                                                                                                          // 39  // 887\n        if (allArgumentsOfTypeString)                                                                     // 40  // 888\n          console.log.apply(console, [Array.prototype.join.call(arguments, \" \")]);                        // 41  // 889\n        else                                                                                              // 42  // 890\n          console.log.apply(console, arguments);                                                          // 43  // 891\n                                                                                                          // 44  // 892\n      } else if (typeof Function.prototype.bind === \"function\") {                                         // 45  // 893\n        // IE9                                                                                            // 46  // 894\n        var log = Function.prototype.bind.call(console.log, console);                                     // 47  // 895\n        log.apply(console, arguments);                                                                    // 48  // 896\n      } else {                                                                                            // 49  // 897\n        // IE8                                                                                            // 50  // 898\n        Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));        // 51  // 899\n      }                                                                                                   // 52  // 900\n    }                                                                                                     // 53  // 901\n  }                                                                                                       // 54  // 902\n};                                                                                                        // 55  // 903\n                                                                                                          // 56  // 904\n// Suppress the next 'count' Meteor._debug messsages. Use this to                                         // 57  // 905\n// stop tests from spamming the console.                                                                  // 58  // 906\n//                                                                                                        // 59  // 907\nMeteor._suppress_log = function (count) {                                                                 // 60  // 908\n  suppress += count;                                                                                      // 61  // 909\n};                                                                                                        // 62  // 910\n                                                                                                          // 63  // 911\nMeteor._supressed_log_expected = function () {                                                            // 64  // 912\n  return suppress !== 0;                                                                                  // 65  // 913\n};                                                                                                        // 66  // 914\n                                                                                                          // 67  // 915\n                                                                                                          // 68  // 916\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 917\n                                                                                                                 // 918\n}).call(this);                                                                                                   // 919\n                                                                                                                 // 920\n                                                                                                                 // 921\n                                                                                                                 // 922\n                                                                                                                 // 923\n                                                                                                                 // 924\n                                                                                                                 // 925\n(function(){                                                                                                     // 926\n                                                                                                                 // 927\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 928\n//                                                                                                        //     // 929\n// packages/meteor/string_utils.js                                                                        //     // 930\n//                                                                                                        //     // 931\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 932\n                                                                                                          //     // 933\n// Like Perl's quotemeta: quotes all regexp metacharacters.                                               // 1   // 934\n// Code taken from                                                                                        // 2   // 935\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions                      // 3   // 936\nMeteor._escapeRegExp = function (string) {                                                                // 4   // 937\n    return String(string).replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");                                         // 5   // 938\n};                                                                                                        // 6   // 939\n                                                                                                          // 7   // 940\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 941\n                                                                                                                 // 942\n}).call(this);                                                                                                   // 943\n                                                                                                                 // 944\n                                                                                                                 // 945\n                                                                                                                 // 946\n                                                                                                                 // 947\n                                                                                                                 // 948\n                                                                                                                 // 949\n(function(){                                                                                                     // 950\n                                                                                                                 // 951\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 952\n//                                                                                                        //     // 953\n// packages/meteor/dynamics_nodejs.js                                                                     //     // 954\n//                                                                                                        //     // 955\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 956\n                                                                                                          //     // 957\n// Fiber-aware implementation of dynamic scoping, for use on the server                                   // 1   // 958\n                                                                                                          // 2   // 959\nvar Fiber = Npm.require('fibers');                                                                        // 3   // 960\n                                                                                                          // 4   // 961\nvar nextSlot = 0;                                                                                         // 5   // 962\n                                                                                                          // 6   // 963\nMeteor._nodeCodeMustBeInFiber = function () {                                                             // 7   // 964\n  if (!Fiber.current) {                                                                                   // 8   // 965\n    throw new Error(\"Meteor code must always run within a Fiber. \" +                                      // 9   // 966\n                    \"Try wrapping callbacks that you pass to non-Meteor \" +                               // 10  // 967\n                    \"libraries with Meteor.bindEnvironment.\");                                            // 11  // 968\n  }                                                                                                       // 12  // 969\n};                                                                                                        // 13  // 970\n                                                                                                          // 14  // 971\nMeteor.EnvironmentVariable = function () {                                                                // 15  // 972\n  this.slot = nextSlot++;                                                                                 // 16  // 973\n};                                                                                                        // 17  // 974\n                                                                                                          // 18  // 975\n_.extend(Meteor.EnvironmentVariable.prototype, {                                                          // 19  // 976\n  get: function () {                                                                                      // 20  // 977\n    Meteor._nodeCodeMustBeInFiber();                                                                      // 21  // 978\n                                                                                                          // 22  // 979\n    return Fiber.current._meteor_dynamics &&                                                              // 23  // 980\n      Fiber.current._meteor_dynamics[this.slot];                                                          // 24  // 981\n  },                                                                                                      // 25  // 982\n                                                                                                          // 26  // 983\n  // Most Meteor code ought to run inside a fiber, and the                                                // 27  // 984\n  // _nodeCodeMustBeInFiber assertion helps you remember to include appropriate                           // 28  // 985\n  // bindEnvironment calls (which will get you the *right value* for your                                 // 29  // 986\n  // environment variables, on the server).                                                               // 30  // 987\n  //                                                                                                      // 31  // 988\n  // In some very special cases, it's more important to run Meteor code on the                            // 32  // 989\n  // server in non-Fiber contexts rather than to strongly enforce the safeguard                           // 33  // 990\n  // against forgetting to use bindEnvironment. For example, using `check` in                             // 34  // 991\n  // some top-level constructs like connect handlers without needing unnecessary                          // 35  // 992\n  // Fibers on every request is more important that possibly failing to find the                          // 36  // 993\n  // correct argumentChecker. So this function is just like get(), but it                                 // 37  // 994\n  // returns null rather than throwing when called from outside a Fiber. (On the                          // 38  // 995\n  // client, it is identical to get().)                                                                   // 39  // 996\n  getOrNullIfOutsideFiber: function () {                                                                  // 40  // 997\n    if (!Fiber.current)                                                                                   // 41  // 998\n      return null;                                                                                        // 42  // 999\n    return this.get();                                                                                    // 43  // 1000\n  },                                                                                                      // 44  // 1001\n                                                                                                          // 45  // 1002\n  withValue: function (value, func) {                                                                     // 46  // 1003\n    Meteor._nodeCodeMustBeInFiber();                                                                      // 47  // 1004\n                                                                                                          // 48  // 1005\n    if (!Fiber.current._meteor_dynamics)                                                                  // 49  // 1006\n      Fiber.current._meteor_dynamics = [];                                                                // 50  // 1007\n    var currentValues = Fiber.current._meteor_dynamics;                                                   // 51  // 1008\n                                                                                                          // 52  // 1009\n    var saved = currentValues[this.slot];                                                                 // 53  // 1010\n    try {                                                                                                 // 54  // 1011\n      currentValues[this.slot] = value;                                                                   // 55  // 1012\n      var ret = func();                                                                                   // 56  // 1013\n    } finally {                                                                                           // 57  // 1014\n      currentValues[this.slot] = saved;                                                                   // 58  // 1015\n    }                                                                                                     // 59  // 1016\n                                                                                                          // 60  // 1017\n    return ret;                                                                                           // 61  // 1018\n  }                                                                                                       // 62  // 1019\n});                                                                                                       // 63  // 1020\n                                                                                                          // 64  // 1021\n// Meteor application code is always supposed to be run inside a                                          // 65  // 1022\n// fiber. bindEnvironment ensures that the function it wraps is run from                                  // 66  // 1023\n// inside a fiber and ensures it sees the values of Meteor environment                                    // 67  // 1024\n// variables that are set at the time bindEnvironment is called.                                          // 68  // 1025\n//                                                                                                        // 69  // 1026\n// If an environment-bound function is called from outside a fiber (eg, from                              // 70  // 1027\n// an asynchronous callback from a non-Meteor library such as MongoDB), it'll                             // 71  // 1028\n// kick off a new fiber to execute the function, and returns undefined as soon                            // 72  // 1029\n// as that fiber returns or yields (and func's return value is ignored).                                  // 73  // 1030\n//                                                                                                        // 74  // 1031\n// If it's called inside a fiber, it works normally (the                                                  // 75  // 1032\n// return value of the function will be passed through, and no new                                        // 76  // 1033\n// fiber will be created.)                                                                                // 77  // 1034\n//                                                                                                        // 78  // 1035\n// `onException` should be a function or a string.  When it is a                                          // 79  // 1036\n// function, it is called as a callback when the bound function raises                                    // 80  // 1037\n// an exception.  If it is a string, it should be a description of the                                    // 81  // 1038\n// callback, and when an exception is raised a debug message will be                                      // 82  // 1039\n// printed with the description.                                                                          // 83  // 1040\nMeteor.bindEnvironment = function (func, onException, _this) {                                            // 84  // 1041\n  Meteor._nodeCodeMustBeInFiber();                                                                        // 85  // 1042\n                                                                                                          // 86  // 1043\n  var boundValues = _.clone(Fiber.current._meteor_dynamics || []);                                        // 87  // 1044\n                                                                                                          // 88  // 1045\n  if (!onException || typeof(onException) === 'string') {                                                 // 89  // 1046\n    var description = onException || \"callback of async function\";                                        // 90  // 1047\n    onException = function (error) {                                                                      // 91  // 1048\n      Meteor._debug(                                                                                      // 92  // 1049\n        \"Exception in \" + description + \":\",                                                              // 93  // 1050\n        error && error.stack || error                                                                     // 94  // 1051\n      );                                                                                                  // 95  // 1052\n    };                                                                                                    // 96  // 1053\n  }                                                                                                       // 97  // 1054\n                                                                                                          // 98  // 1055\n  return function (/* arguments */) {                                                                     // 99  // 1056\n    var args = _.toArray(arguments);                                                                      // 100\n                                                                                                          // 101\n    var runWithEnvironment = function () {                                                                // 102\n      var savedValues = Fiber.current._meteor_dynamics;                                                   // 103\n      try {                                                                                               // 104\n        // Need to clone boundValues in case two fibers invoke this                                       // 105\n        // function at the same time                                                                      // 106\n        Fiber.current._meteor_dynamics = _.clone(boundValues);                                            // 107\n        var ret = func.apply(_this, args);                                                                // 108\n      } catch (e) {                                                                                       // 109\n        // note: callback-hook currently relies on the fact that if onException                           // 110\n        // throws and you were originally calling the wrapped callback from                               // 111\n        // within a Fiber, the wrapped call throws.                                                       // 112\n        onException(e);                                                                                   // 113\n      } finally {                                                                                         // 114\n        Fiber.current._meteor_dynamics = savedValues;                                                     // 115\n      }                                                                                                   // 116\n      return ret;                                                                                         // 117\n    };                                                                                                    // 118\n                                                                                                          // 119\n    if (Fiber.current)                                                                                    // 120\n      return runWithEnvironment();                                                                        // 121\n    Fiber(runWithEnvironment).run();                                                                      // 122\n  };                                                                                                      // 123\n};                                                                                                        // 124\n                                                                                                          // 125\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1083\n                                                                                                                 // 1084\n}).call(this);                                                                                                   // 1085\n                                                                                                                 // 1086\n                                                                                                                 // 1087\n                                                                                                                 // 1088\n                                                                                                                 // 1089\n                                                                                                                 // 1090\n                                                                                                                 // 1091\n(function(){                                                                                                     // 1092\n                                                                                                                 // 1093\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1094\n//                                                                                                        //     // 1095\n// packages/meteor/url_server.js                                                                          //     // 1096\n//                                                                                                        //     // 1097\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1098\n                                                                                                          //     // 1099\nif (process.env.ROOT_URL &&                                                                               // 1   // 1100\n    typeof __meteor_runtime_config__ === \"object\") {                                                      // 2   // 1101\n  __meteor_runtime_config__.ROOT_URL = process.env.ROOT_URL;                                              // 3   // 1102\n  if (__meteor_runtime_config__.ROOT_URL) {                                                               // 4   // 1103\n    var parsedUrl = Npm.require('url').parse(__meteor_runtime_config__.ROOT_URL);                         // 5   // 1104\n    // Sometimes users try to pass, eg, ROOT_URL=mydomain.com.                                            // 6   // 1105\n    if (!parsedUrl.host) {                                                                                // 7   // 1106\n      throw Error(\"$ROOT_URL, if specified, must be an URL\");                                             // 8   // 1107\n    }                                                                                                     // 9   // 1108\n    var pathPrefix = parsedUrl.pathname;                                                                  // 10  // 1109\n    if (pathPrefix.slice(-1) === '/') {                                                                   // 11  // 1110\n      // remove trailing slash (or turn \"/\" into \"\")                                                      // 12  // 1111\n      pathPrefix = pathPrefix.slice(0, -1);                                                               // 13  // 1112\n    }                                                                                                     // 14  // 1113\n    __meteor_runtime_config__.ROOT_URL_PATH_PREFIX = pathPrefix;                                          // 15  // 1114\n  } else {                                                                                                // 16  // 1115\n    __meteor_runtime_config__.ROOT_URL_PATH_PREFIX = \"\";                                                  // 17  // 1116\n  }                                                                                                       // 18  // 1117\n}                                                                                                         // 19  // 1118\n                                                                                                          // 20  // 1119\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1120\n                                                                                                                 // 1121\n}).call(this);                                                                                                   // 1122\n                                                                                                                 // 1123\n                                                                                                                 // 1124\n                                                                                                                 // 1125\n                                                                                                                 // 1126\n                                                                                                                 // 1127\n                                                                                                                 // 1128\n(function(){                                                                                                     // 1129\n                                                                                                                 // 1130\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1131\n//                                                                                                        //     // 1132\n// packages/meteor/url_common.js                                                                          //     // 1133\n//                                                                                                        //     // 1134\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1135\n                                                                                                          //     // 1136\n/**                                                                                                       // 1   // 1137\n * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed with `meteor deploy`, but must be provided when using `meteor build`.\n * @locus Anywhere                                                                                        // 3   // 1139\n * @param {String} [path] A path to append to the root URL. Do not include a leading \"`/`\".               // 4   // 1140\n * @param {Object} [options]                                                                              // 5   // 1141\n * @param {Boolean} options.secure Create an HTTPS URL.                                                   // 6   // 1142\n * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.\n * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: \"`http://foo.example.com`\"\n */                                                                                                       // 9   // 1145\nMeteor.absoluteUrl = function (path, options) {                                                           // 10  // 1146\n  // path is optional                                                                                     // 11  // 1147\n  if (!options && typeof path === 'object') {                                                             // 12  // 1148\n    options = path;                                                                                       // 13  // 1149\n    path = undefined;                                                                                     // 14  // 1150\n  }                                                                                                       // 15  // 1151\n  // merge options with defaults                                                                          // 16  // 1152\n  options = _.extend({}, Meteor.absoluteUrl.defaultOptions, options || {});                               // 17  // 1153\n                                                                                                          // 18  // 1154\n  var url = options.rootUrl;                                                                              // 19  // 1155\n  if (!url)                                                                                               // 20  // 1156\n    throw new Error(\"Must pass options.rootUrl or set ROOT_URL in the server environment\");               // 21  // 1157\n                                                                                                          // 22  // 1158\n  if (!/^http[s]?:\\/\\//i.test(url)) // url starts with 'http://' or 'https://'                            // 23  // 1159\n    url = 'http://' + url; // we will later fix to https if options.secure is set                         // 24  // 1160\n                                                                                                          // 25  // 1161\n  if (!/\\/$/.test(url)) // url ends with '/'                                                              // 26  // 1162\n    url += '/';                                                                                           // 27  // 1163\n                                                                                                          // 28  // 1164\n  if (path)                                                                                               // 29  // 1165\n    url += path;                                                                                          // 30  // 1166\n                                                                                                          // 31  // 1167\n  // turn http to https if secure option is set, and we're not talking                                    // 32  // 1168\n  // to localhost.                                                                                        // 33  // 1169\n  if (options.secure &&                                                                                   // 34  // 1170\n      /^http:/.test(url) && // url starts with 'http:'                                                    // 35  // 1171\n      !/http:\\/\\/localhost[:\\/]/.test(url) && // doesn't match localhost                                  // 36  // 1172\n      !/http:\\/\\/127\\.0\\.0\\.1[:\\/]/.test(url)) // or 127.0.0.1                                            // 37  // 1173\n    url = url.replace(/^http:/, 'https:');                                                                // 38  // 1174\n                                                                                                          // 39  // 1175\n  if (options.replaceLocalhost)                                                                           // 40  // 1176\n    url = url.replace(/^http:\\/\\/localhost([:\\/].*)/, 'http://127.0.0.1$1');                              // 41  // 1177\n                                                                                                          // 42  // 1178\n  return url;                                                                                             // 43  // 1179\n};                                                                                                        // 44  // 1180\n                                                                                                          // 45  // 1181\n// allow later packages to override default options                                                       // 46  // 1182\nMeteor.absoluteUrl.defaultOptions = { };                                                                  // 47  // 1183\nif (typeof __meteor_runtime_config__ === \"object\" &&                                                      // 48  // 1184\n    __meteor_runtime_config__.ROOT_URL)                                                                   // 49  // 1185\n  Meteor.absoluteUrl.defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;                         // 50  // 1186\n                                                                                                          // 51  // 1187\n                                                                                                          // 52  // 1188\nMeteor._relativeToSiteRootUrl = function (link) {                                                         // 53  // 1189\n  if (typeof __meteor_runtime_config__ === \"object\" &&                                                    // 54  // 1190\n      link.substr(0, 1) === \"/\")                                                                          // 55  // 1191\n    link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\") + link;                                 // 56  // 1192\n  return link;                                                                                            // 57  // 1193\n};                                                                                                        // 58  // 1194\n                                                                                                          // 59  // 1195\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1196\n                                                                                                                 // 1197\n}).call(this);                                                                                                   // 1198\n                                                                                                                 // 1199\n                                                                                                                 // 1200\n                                                                                                                 // 1201\n                                                                                                                 // 1202\n                                                                                                                 // 1203\n                                                                                                                 // 1204\n(function(){                                                                                                     // 1205\n                                                                                                                 // 1206\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1207\n//                                                                                                        //     // 1208\n// packages/meteor/flush-buffers-on-exit-in-windows.js                                                    //     // 1209\n//                                                                                                        //     // 1210\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1211\n                                                                                                          //     // 1212\nif (process.platform === \"win32\") {                                                                       // 1   // 1213\n  /*                                                                                                      // 2   // 1214\n   * Based on https://github.com/cowboy/node-exit                                                         // 3   // 1215\n   *                                                                                                      // 4   // 1216\n   * Copyright (c) 2013 \"Cowboy\" Ben Alman                                                                // 5   // 1217\n   * Licensed under the MIT license.                                                                      // 6   // 1218\n   */                                                                                                     // 7   // 1219\n  var origProcessExit = process.exit.bind(process);                                                       // 8   // 1220\n  process.exit = function (exitCode) {                                                                    // 9   // 1221\n    var streams = [process.stdout, process.stderr];                                                       // 10  // 1222\n    var drainCount = 0;                                                                                   // 11  // 1223\n    // Actually exit if all streams are drained.                                                          // 12  // 1224\n    function tryToExit() {                                                                                // 13  // 1225\n      if (drainCount === streams.length) {                                                                // 14  // 1226\n        origProcessExit(exitCode);                                                                        // 15  // 1227\n      }                                                                                                   // 16  // 1228\n    }                                                                                                     // 17  // 1229\n    streams.forEach(function(stream) {                                                                    // 18  // 1230\n      // Count drained streams now, but monitor non-drained streams.                                      // 19  // 1231\n      if (stream.bufferSize === 0) {                                                                      // 20  // 1232\n        drainCount++;                                                                                     // 21  // 1233\n      } else {                                                                                            // 22  // 1234\n        stream.write('', 'utf-8', function() {                                                            // 23  // 1235\n          drainCount++;                                                                                   // 24  // 1236\n          tryToExit();                                                                                    // 25  // 1237\n        });                                                                                               // 26  // 1238\n      }                                                                                                   // 27  // 1239\n      // Prevent further writing.                                                                         // 28  // 1240\n      stream.write = function() {};                                                                       // 29  // 1241\n    });                                                                                                   // 30  // 1242\n    // If all streams were already drained, exit now.                                                     // 31  // 1243\n    tryToExit();                                                                                          // 32  // 1244\n    // In Windows, when run as a Node.js child process, a script utilizing                                // 33  // 1245\n    // this library might just exit with a 0 exit code, regardless. This code,                            // 34  // 1246\n    // despite the fact that it looks a bit crazy, appears to fix that.                                   // 35  // 1247\n    process.on('exit', function() {                                                                       // 36  // 1248\n      origProcessExit(exitCode);                                                                          // 37  // 1249\n    });                                                                                                   // 38  // 1250\n  };                                                                                                      // 39  // 1251\n}                                                                                                         // 40  // 1252\n////////////////////////////////////////////////////////////////////////////////////////////////////////////     // 1253\n                                                                                                                 // 1254\n}).call(this);                                                                                                   // 1255\n                                                                                                                 // 1256\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.meteor = {\n  Meteor: Meteor\n};\n\n})();\n","servePath":"/packages/meteor.js","sourceMap":{"version":3,"sources":["/packages/meteor/packages/meteor.js"],"names":[],"mappingswH","file":"/packages/meteor.js","sourcesContent":["(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/server_environment.js                                                                  //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nMeteor = {                                                                                                // 1\n  isClient: false,                                                                                        // 2\n  isServer: true,                                                                                         // 3\n  isCordova: false                                                                                        // 4\n};                                                                                                        // 5\n                                                                                                          // 6\nMeteor.settings = {};                                                                                     // 7\n                                                                                                          // 8\nif (process.env.METEOR_SETTINGS) {                                                                        // 9\n  try {                                                                                                   // 10\n    Meteor.settings = JSON.parse(process.env.METEOR_SETTINGS);                                            // 11\n  } catch (e) {                                                                                           // 12\n    throw new Error(\"METEOR_SETTINGS are not valid JSON: \" + process.env.METEOR_SETTINGS);                // 13\n  }                                                                                                       // 14\n}                                                                                                         // 15\n                                                                                                          // 16\n// Make sure that there is always a public attribute                                                      // 17\n// to enable Meteor.settings.public on client                                                             // 18\nif (! Meteor.settings.public) {                                                                           // 19\n    Meteor.settings.public = {};                                                                          // 20\n}                                                                                                         // 21\n                                                                                                          // 22\n// Push a subset of settings to the client.  Note that the way this                                       // 23\n// code is written, if the app mutates `Meteor.settings.public` on the                                    // 24\n// server, it also mutates                                                                                // 25\n// `__meteor_runtime_config__.PUBLIC_SETTINGS`, and the modified                                          // 26\n// settings will be sent to the client.                                                                   // 27\nif (typeof __meteor_runtime_config__ === \"object\") {                                                      // 28\n  __meteor_runtime_config__.PUBLIC_SETTINGS = Meteor.settings.public;                                     // 29\n}                                                                                                         // 30\n                                                                                                          // 31\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/helpers.js                                                                             //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nif (Meteor.isServer)                                                                                      // 1\n  var Future = Npm.require('fibers/future');                                                              // 2\n                                                                                                          // 3\nif (typeof __meteor_runtime_config__ === 'object' &&                                                      // 4\n    __meteor_runtime_config__.meteorRelease) {                                                            // 5\n  /**                                                                                                     // 6\n   * @summary `Meteor.release` is a string containing the name of the [release](#meteorupdate) with which the project was built (for example, `\"1.2.3\"`). It is `undefined` if the project was built using a git checkout of Meteor.\n   * @locus Anywhere                                                                                      // 8\n   * @type {String}                                                                                       // 9\n   */                                                                                                     // 10\n  Meteor.release = __meteor_runtime_config__.meteorRelease;                                               // 11\n}                                                                                                         // 12\n                                                                                                          // 13\n// XXX find a better home for these? Ideally they would be _.get,                                         // 14\n// _.ensure, _.delete..                                                                                   // 15\n                                                                                                          // 16\n_.extend(Meteor, {                                                                                        // 17\n  // _get(a,b,c,d) returns a[b][c][d], or else undefined if a[b] or                                       // 18\n  // a[b][c] doesn't exist.                                                                               // 19\n  //                                                                                                      // 20\n  _get: function (obj /*, arguments */) {                                                                 // 21\n    for (var i = 1; i < arguments.length; i++) {                                                          // 22\n      if (!(arguments[i] in obj))                                                                         // 23\n        return undefined;                                                                                 // 24\n      obj = obj[arguments[i]];                                                                            // 25\n    }                                                                                                     // 26\n    return obj;                                                                                           // 27\n  },                                                                                                      // 28\n                                                                                                          // 29\n  // _ensure(a,b,c,d) ensures that a[b][c][d] exists. If it does not,                                     // 30\n  // it is created and set to {}. Either way, it is returned.                                             // 31\n  //                                                                                                      // 32\n  _ensure: function (obj /*, arguments */) {                                                              // 33\n    for (var i = 1; i < arguments.length; i++) {                                                          // 34\n      var key = arguments[i];                                                                             // 35\n      if (!(key in obj))                                                                                  // 36\n        obj[key] = {};                                                                                    // 37\n      obj = obj[key];                                                                                     // 38\n    }                                                                                                     // 39\n                                                                                                          // 40\n    return obj;                                                                                           // 41\n  },                                                                                                      // 42\n                                                                                                          // 43\n  // _delete(a, b, c, d) deletes a[b][c][d], then a[b][c] unless it                                       // 44\n  // isn't empty, then a[b] unless it isn't empty.                                                        // 45\n  //                                                                                                      // 46\n  _delete: function (obj /*, arguments */) {                                                              // 47\n    var stack = [obj];                                                                                    // 48\n    var leaf = true;                                                                                      // 49\n    for (var i = 1; i < arguments.length - 1; i++) {                                                      // 50\n      var key = arguments[i];                                                                             // 51\n      if (!(key in obj)) {                                                                                // 52\n        leaf = false;                                                                                     // 53\n        break;                                                                                            // 54\n      }                                                                                                   // 55\n      obj = obj[key];                                                                                     // 56\n      if (typeof obj !== \"object\")                                                                        // 57\n        break;                                                                                            // 58\n      stack.push(obj);                                                                                    // 59\n    }                                                                                                     // 60\n                                                                                                          // 61\n    for (var i = stack.length - 1; i >= 0; i--) {                                                         // 62\n      var key = arguments[i+1];                                                                           // 63\n                                                                                                          // 64\n      if (leaf)                                                                                           // 65\n        leaf = false;                                                                                     // 66\n      else                                                                                                // 67\n        for (var other in stack[i][key])                                                                  // 68\n          return; // not empty -- we're done                                                              // 69\n                                                                                                          // 70\n      delete stack[i][key];                                                                               // 71\n    }                                                                                                     // 72\n  },                                                                                                      // 73\n                                                                                                          // 74\n  // wrapAsync can wrap any function that takes some number of arguments that                             // 75\n  // can't be undefined, followed by some optional arguments, where the callback                          // 76\n  // is the last optional argument.                                                                       // 77\n  // e.g. fs.readFile(pathname, [callback]),                                                              // 78\n  // fs.open(pathname, flags, [mode], [callback])                                                         // 79\n  // For maximum effectiveness and least confusion, wrapAsync should be used on                           // 80\n  // functions where the callback is the only argument of type Function.                                  // 81\n                                                                                                          // 82\n  /**                                                                                                     // 83\n   * @memberOf Meteor                                                                                     // 84\n   * @summary Wrap a function that takes a callback function as its final parameter. The signature of the callback of the wrapped function should be `function(error, result){}`. On the server, the wrapped function can be used either synchronously (without passing a callback) or asynchronously (when a callback is passed). On the client, a callback is always required; errors will be logged if there is no callback. If a callback is provided, the environment captured when the original function was called will be restored in the callback.\n   * @locus Anywhere                                                                                      // 86\n   * @param {Function} func A function that takes a callback as its final parameter                       // 87\n   * @param {Object} [context] Optional `this` object against which the original function will be invoked\n   */                                                                                                     // 89\n  wrapAsync: function (fn, context) {                                                                     // 90\n    return function (/* arguments */) {                                                                   // 91\n      var self = context || this;                                                                         // 92\n      var newArgs = _.toArray(arguments);                                                                 // 93\n      var callback;                                                                                       // 94\n                                                                                                          // 95\n      for (var i = newArgs.length - 1; i >= 0; --i) {                                                     // 96\n        var arg = newArgs[i];                                                                             // 97\n        var type = typeof arg;                                                                            // 98\n        if (type !== \"undefined\") {                                                                       // 99\n          if (type === \"function\") {                                                                      // 100\n            callback = arg;                                                                               // 101\n          }                                                                                               // 102\n          break;                                                                                          // 103\n        }                                                                                                 // 104\n      }                                                                                                   // 105\n                                                                                                          // 106\n      if (! callback) {                                                                                   // 107\n        if (Meteor.isClient) {                                                                            // 108\n          callback = logErr;                                                                              // 109\n        } else {                                                                                          // 110\n          var fut = new Future();                                                                         // 111\n          callback = fut.resolver();                                                                      // 112\n        }                                                                                                 // 113\n        ++i; // Insert the callback just after arg.                                                       // 114\n      }                                                                                                   // 115\n                                                                                                          // 116\n      newArgs[i] = Meteor.bindEnvironment(callback);                                                      // 117\n      var result = fn.apply(self, newArgs);                                                               // 118\n      return fut ? fut.wait() : result;                                                                   // 119\n    };                                                                                                    // 120\n  },                                                                                                      // 121\n                                                                                                          // 122\n  // Sets child's prototype to a new object whose prototype is parent's                                   // 123\n  // prototype. Used as:                                                                                  // 124\n  //   Meteor._inherits(ClassB, ClassA).                                                                  // 125\n  //   _.extend(ClassB.prototype, { ... })                                                                // 126\n  // Inspired by CoffeeScript's `extend` and Google Closure's `goog.inherits`.                            // 127\n  _inherits: function (Child, Parent) {                                                                   // 128\n    // copy Parent static properties                                                                      // 129\n    for (var key in Parent) {                                                                             // 130\n      // make sure we only copy hasOwnProperty properties vs. prototype                                   // 131\n      // properties                                                                                       // 132\n      if (_.has(Parent, key))                                                                             // 133\n        Child[key] = Parent[key];                                                                         // 134\n    }                                                                                                     // 135\n                                                                                                          // 136\n    // a middle member of prototype chain: takes the prototype from the Parent                            // 137\n    var Middle = function () {                                                                            // 138\n      this.constructor = Child;                                                                           // 139\n    };                                                                                                    // 140\n    Middle.prototype = Parent.prototype;                                                                  // 141\n    Child.prototype = new Middle();                                                                       // 142\n    Child.__super__ = Parent.prototype;                                                                   // 143\n    return Child;                                                                                         // 144\n  }                                                                                                       // 145\n});                                                                                                       // 146\n                                                                                                          // 147\nvar warnedAboutWrapAsync = false;                                                                         // 148\n                                                                                                          // 149\n/**                                                                                                       // 150\n * @deprecated in 0.9.3                                                                                   // 151\n */                                                                                                       // 152\nMeteor._wrapAsync = function(fn, context) {                                                               // 153\n  if (! warnedAboutWrapAsync) {                                                                           // 154\n    Meteor._debug(\"Meteor._wrapAsync has been renamed to Meteor.wrapAsync\");                              // 155\n    warnedAboutWrapAsync = true;                                                                          // 156\n  }                                                                                                       // 157\n  return Meteor.wrapAsync.apply(Meteor, arguments);                                                       // 158\n};                                                                                                        // 159\n                                                                                                          // 160\nfunction logErr(err) {                                                                                    // 161\n  if (err) {                                                                                              // 162\n    return Meteor._debug(                                                                                 // 163\n      \"Exception in callback of async function\",                                                          // 164\n      err.stack ? err.stack : err                                                                         // 165\n    );                                                                                                    // 166\n  }                                                                                                       // 167\n}                                                                                                         // 168\n                                                                                                          // 169\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/setimmediate.js                                                                        //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n// Chooses one of three setImmediate implementations:                                                     // 1\n//                                                                                                        // 2\n// * Native setImmediate (IE 10, Node 0.9+)                                                               // 3\n//                                                                                                        // 4\n// * postMessage (many browsers)                                                                          // 5\n//                                                                                                        // 6\n// * setTimeout  (fallback)                                                                               // 7\n//                                                                                                        // 8\n// The postMessage implementation is based on                                                             // 9\n// https://github.com/NobleJS/setImmediate/tree/1.0.1                                                     // 10\n//                                                                                                        // 11\n// Don't use `nextTick` for Node since it runs its callbacks before                                       // 12\n// I/O, which is stricter than we're looking for.                                                         // 13\n//                                                                                                        // 14\n// Not installed as a polyfill, as our public API is `Meteor.defer`.                                      // 15\n// Since we're not trying to be a polyfill, we have some                                                  // 16\n// simplifications:                                                                                       // 17\n//                                                                                                        // 18\n// If one invocation of a setImmediate callback pauses itself by a                                        // 19\n// call to alert/prompt/showModelDialog, the NobleJS polyfill                                             // 20\n// implementation ensured that no setImmedate callback would run until                                    // 21\n// the first invocation completed.  While correct per the spec, what it                                   // 22\n// would mean for us in practice is that any reactive updates relying                                     // 23\n// on Meteor.defer would be hung in the main window until the modal                                       // 24\n// dialog was dismissed.  Thus we only ensure that a setImmediate                                         // 25\n// function is called in a later event loop.                                                              // 26\n//                                                                                                        // 27\n// We don't need to support using a string to be eval'ed for the                                          // 28\n// callback, arguments to the function, or clearImmediate.                                                // 29\n                                                                                                          // 30\n\"use strict\";                                                                                             // 31\n                                                                                                          // 32\nvar global = this;                                                                                        // 33\n                                                                                                          // 34\n                                                                                                          // 35\n// IE 10, Node >= 9.1                                                                                     // 36\n                                                                                                          // 37\nfunction useSetImmediate() {                                                                              // 38\n  if (! global.setImmediate)                                                                              // 39\n    return null;                                                                                          // 40\n  else {                                                                                                  // 41\n    var setImmediate = function (fn) {                                                                    // 42\n      global.setImmediate(fn);                                                                            // 43\n    };                                                                                                    // 44\n    setImmediate.implementation = 'setImmediate';                                                         // 45\n    return setImmediate;                                                                                  // 46\n  }                                                                                                       // 47\n}                                                                                                         // 48\n                                                                                                          // 49\n                                                                                                          // 50\n// Android 2.3.6, Chrome 26, Firefox 20, IE 8-9, iOS 5.1.1 Safari                                         // 51\n                                                                                                          // 52\nfunction usePostMessage() {                                                                               // 53\n  // The test against `importScripts` prevents this implementation                                        // 54\n  // from being installed inside a web worker, where                                                      // 55\n  // `global.postMessage` means something completely different and                                        // 56\n  // can't be used for this purpose.                                                                      // 57\n                                                                                                          // 58\n  if (!global.postMessage || global.importScripts) {                                                      // 59\n    return null;                                                                                          // 60\n  }                                                                                                       // 61\n                                                                                                          // 62\n  // Avoid synchronous post message implementations.                                                      // 63\n                                                                                                          // 64\n  var postMessageIsAsynchronous = true;                                                                   // 65\n  var oldOnMessage = global.onmessage;                                                                    // 66\n  global.onmessage = function () {                                                                        // 67\n      postMessageIsAsynchronous = false;                                                                  // 68\n  };                                                                                                      // 69\n  global.postMessage(\"\", \"*\");                                                                            // 70\n  global.onmessage = oldOnMessage;                                                                        // 71\n                                                                                                          // 72\n  if (! postMessageIsAsynchronous)                                                                        // 73\n    return null;                                                                                          // 74\n                                                                                                          // 75\n  var funcIndex = 0;                                                                                      // 76\n  var funcs = {};                                                                                         // 77\n                                                                                                          // 78\n  // Installs an event handler on `global` for the `message` event: see                                   // 79\n  // * https://developer.mozilla.org/en/DOM/window.postMessage                                            // 80\n  // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages       // 81\n                                                                                                          // 82\n  // XXX use Random.id() here?                                                                            // 83\n  var MESSAGE_PREFIX = \"Meteor._setImmediate.\" + Math.random() + '.';                                     // 84\n                                                                                                          // 85\n  function isStringAndStartsWith(string, putativeStart) {                                                 // 86\n    return (typeof string === \"string\" &&                                                                 // 87\n            string.substring(0, putativeStart.length) === putativeStart);                                 // 88\n  }                                                                                                       // 89\n                                                                                                          // 90\n  function onGlobalMessage(event) {                                                                       // 91\n    // This will catch all incoming messages (even from other                                             // 92\n    // windows!), so we need to try reasonably hard to avoid letting                                      // 93\n    // anyone else trick us into firing off. We test the origin is                                        // 94\n    // still this window, and that a (randomly generated)                                                 // 95\n    // unpredictable identifying prefix is present.                                                       // 96\n    if (event.source === global &&                                                                        // 97\n        isStringAndStartsWith(event.data, MESSAGE_PREFIX)) {                                              // 98\n      var index = event.data.substring(MESSAGE_PREFIX.length);                                            // 99\n      try {                                                                                               // 100\n        if (funcs[index])                                                                                 // 101\n          funcs[index]();                                                                                 // 102\n      }                                                                                                   // 103\n      finally {                                                                                           // 104\n        delete funcs[index];                                                                              // 105\n      }                                                                                                   // 106\n    }                                                                                                     // 107\n  }                                                                                                       // 108\n                                                                                                          // 109\n  if (global.addEventListener) {                                                                          // 110\n    global.addEventListener(\"message\", onGlobalMessage, false);                                           // 111\n  } else {                                                                                                // 112\n    global.attachEvent(\"onmessage\", onGlobalMessage);                                                     // 113\n  }                                                                                                       // 114\n                                                                                                          // 115\n  var setImmediate = function (fn) {                                                                      // 116\n    // Make `global` post a message to itself with the handle and                                         // 117\n    // identifying prefix, thus asynchronously invoking our                                               // 118\n    // onGlobalMessage listener above.                                                                    // 119\n    ++funcIndex;                                                                                          // 120\n    funcs[funcIndex] = fn;                                                                                // 121\n    global.postMessage(MESSAGE_PREFIX + funcIndex, \"*\");                                                  // 122\n  };                                                                                                      // 123\n  setImmediate.implementation = 'postMessage';                                                            // 124\n  return setImmediate;                                                                                    // 125\n}                                                                                                         // 126\n                                                                                                          // 127\n                                                                                                          // 128\nfunction useTimeout() {                                                                                   // 129\n  var setImmediate = function (fn) {                                                                      // 130\n    global.setTimeout(fn, 0);                                                                             // 131\n  };                                                                                                      // 132\n  setImmediate.implementation = 'setTimeout';                                                             // 133\n  return setImmediate;                                                                                    // 134\n}                                                                                                         // 135\n                                                                                                          // 136\n                                                                                                          // 137\nMeteor._setImmediate =                                                                                    // 138\n  useSetImmediate() ||                                                                                    // 139\n  usePostMessage() ||                                                                                     // 140\n  useTimeout();                                                                                           // 141\n                                                                                                          // 142\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/timers.js                                                                              //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nvar withoutInvocation = function (f) {                                                                    // 1\n  if (Package.ddp) {                                                                                      // 2\n    var _CurrentInvocation = Package.ddp.DDP._CurrentInvocation;                                          // 3\n    if (_CurrentInvocation.get() && _CurrentInvocation.get().isSimulation)                                // 4\n      throw new Error(\"Can't set timers inside simulations\");                                             // 5\n    return function () { _CurrentInvocation.withValue(null, f); };                                        // 6\n  }                                                                                                       // 7\n  else                                                                                                    // 8\n    return f;                                                                                             // 9\n};                                                                                                        // 10\n                                                                                                          // 11\nvar bindAndCatch = function (context, f) {                                                                // 12\n  return Meteor.bindEnvironment(withoutInvocation(f), context);                                           // 13\n};                                                                                                        // 14\n                                                                                                          // 15\n_.extend(Meteor, {                                                                                        // 16\n  // Meteor.setTimeout and Meteor.setInterval callbacks scheduled                                         // 17\n  // inside a server method are not part of the method invocation and                                     // 18\n  // should clear out the CurrentInvocation environment variable.                                         // 19\n                                                                                                          // 20\n  /**                                                                                                     // 21\n   * @memberOf Meteor                                                                                     // 22\n   * @summary Call a function in the future after waiting for a specified delay.                          // 23\n   * @locus Anywhere                                                                                      // 24\n   * @param {Function} func The function to run                                                           // 25\n   * @param {Number} delay Number of milliseconds to wait before calling function                         // 26\n   */                                                                                                     // 27\n  setTimeout: function (f, duration) {                                                                    // 28\n    return setTimeout(bindAndCatch(\"setTimeout callback\", f), duration);                                  // 29\n  },                                                                                                      // 30\n                                                                                                          // 31\n  /**                                                                                                     // 32\n   * @memberOf Meteor                                                                                     // 33\n   * @summary Call a function repeatedly, with a time delay between calls.                                // 34\n   * @locus Anywhere                                                                                      // 35\n   * @param {Function} func The function to run                                                           // 36\n   * @param {Number} delay Number of milliseconds to wait between each function call.                     // 37\n   */                                                                                                     // 38\n  setInterval: function (f, duration) {                                                                   // 39\n    return setInterval(bindAndCatch(\"setInterval callback\", f), duration);                                // 40\n  },                                                                                                      // 41\n                                                                                                          // 42\n  /**                                                                                                     // 43\n   * @memberOf Meteor                                                                                     // 44\n   * @summary Cancel a repeating function call scheduled by `Meteor.setInterval`.                         // 45\n   * @locus Anywhere                                                                                      // 46\n   * @param {Number} id The handle returned by `Meteor.setInterval`                                       // 47\n   */                                                                                                     // 48\n  clearInterval: function(x) {                                                                            // 49\n    return clearInterval(x);                                                                              // 50\n  },                                                                                                      // 51\n                                                                                                          // 52\n  /**                                                                                                     // 53\n   * @memberOf Meteor                                                                                     // 54\n   * @summary Cancel a function call scheduled by `Meteor.setTimeout`.                                    // 55\n   * @locus Anywhere                                                                                      // 56\n   * @param {Number} id The handle returned by `Meteor.setTimeout`                                        // 57\n   */                                                                                                     // 58\n  clearTimeout: function(x) {                                                                             // 59\n    return clearTimeout(x);                                                                               // 60\n  },                                                                                                      // 61\n                                                                                                          // 62\n  // XXX consider making this guarantee ordering of defer'd callbacks, like                               // 63\n  // Tracker.afterFlush or Node's nextTick (in practice). Then tests can do:                              // 64\n  //    callSomethingThatDefersSomeWork();                                                                // 65\n  //    Meteor.defer(expect(somethingThatValidatesThatTheWorkHappened));                                  // 66\n  defer: function (f) {                                                                                   // 67\n    Meteor._setImmediate(bindAndCatch(\"defer callback\", f));                                              // 68\n  }                                                                                                       // 69\n});                                                                                                       // 70\n                                                                                                          // 71\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/errors.js                                                                              //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n// Makes an error subclass which properly contains a stack trace in most                                  // 1\n// environments. constructor can set fields on `this` (and should probably set                            // 2\n// `message`, which is what gets displayed at the top of a stack trace).                                  // 3\n//                                                                                                        // 4\nMeteor.makeErrorType = function (name, constructor) {                                                     // 5\n  var errorClass = function (/*arguments*/) {                                                             // 6\n    var self = this;                                                                                      // 7\n                                                                                                          // 8\n    // Ensure we get a proper stack trace in most Javascript environments                                 // 9\n    if (Error.captureStackTrace) {                                                                        // 10\n      // V8 environments (Chrome and Node.js)                                                             // 11\n      Error.captureStackTrace(self, errorClass);                                                          // 12\n    } else {                                                                                              // 13\n      // Firefox                                                                                          // 14\n      var e = new Error;                                                                                  // 15\n      e.__proto__ = errorClass.prototype;                                                                 // 16\n      if (e instanceof errorClass)                                                                        // 17\n        self = e;                                                                                         // 18\n    }                                                                                                     // 19\n    // Safari magically works.                                                                            // 20\n                                                                                                          // 21\n    constructor.apply(self, arguments);                                                                   // 22\n                                                                                                          // 23\n    self.errorType = name;                                                                                // 24\n                                                                                                          // 25\n    return self;                                                                                          // 26\n  };                                                                                                      // 27\n                                                                                                          // 28\n  Meteor._inherits(errorClass, Error);                                                                    // 29\n                                                                                                          // 30\n  return errorClass;                                                                                      // 31\n};                                                                                                        // 32\n                                                                                                          // 33\n// This should probably be in the livedata package, but we don't want                                     // 34\n// to require you to use the livedata package to get it. Eventually we                                    // 35\n// should probably rename it to DDP.Error and put it back in the                                          // 36\n// 'livedata' package (which we should rename to 'ddp' also.)                                             // 37\n//                                                                                                        // 38\n// Note: The DDP server assumes that Meteor.Error EJSON-serializes as an object                           // 39\n// containing 'error' and optionally 'reason' and 'details'.                                              // 40\n// The DDP client manually puts these into Meteor.Error objects. (We don't use                            // 41\n// EJSON.addType here because the type is determined by location in the                                   // 42\n// protocol, not text on the wire.)                                                                       // 43\n                                                                                                          // 44\n/**                                                                                                       // 45\n * @summary This class represents a symbolic error thrown by a method.                                    // 46\n * @locus Anywhere                                                                                        // 47\n * @class                                                                                                 // 48\n * @param {String} error A string code uniquely identifying this kind of error.                           // 49\n * This string should be used by callers of the method to determine the                                   // 50\n * appropriate action to take, instead of attempting to parse the reason                                  // 51\n * or details fields. For example:                                                                        // 52\n *                                                                                                        // 53\n * ```                                                                                                    // 54\n * // on the server, pick a code unique to this error                                                     // 55\n * // the reason field should be a useful debug message                                                   // 56\n * throw new Meteor.Error(\"logged-out\",                                                                   // 57\n *   \"The user must be logged in to post a comment.\");                                                    // 58\n *                                                                                                        // 59\n * // on the client                                                                                       // 60\n * Meteor.call(\"methodName\", function (error) {                                                           // 61\n *   // identify the error                                                                                // 62\n *   if (error && error.error === \"logged-out\") {                                                         // 63\n *     // show a nice error message                                                                       // 64\n *     Session.set(\"errorMessage\", \"Please log in to post a comment.\");                                   // 65\n *   }                                                                                                    // 66\n * });                                                                                                    // 67\n * ```                                                                                                    // 68\n *                                                                                                        // 69\n * For legacy reasons, some built-in Meteor functions such as `check` throw                               // 70\n * errors with a number in this field.                                                                    // 71\n *                                                                                                        // 72\n * @param {String} [reason] Optional.  A short human-readable summary of the                              // 73\n * error, like 'Not Found'.                                                                               // 74\n * @param {String} [details] Optional.  Additional information about the error,                           // 75\n * like a textual stack trace.                                                                            // 76\n */                                                                                                       // 77\nMeteor.Error = Meteor.makeErrorType(                                                                      // 78\n  \"Meteor.Error\",                                                                                         // 79\n  function (error, reason, details) {                                                                     // 80\n    var self = this;                                                                                      // 81\n                                                                                                          // 82\n    // String code uniquely identifying this kind of error.                                               // 83\n    self.error = error;                                                                                   // 84\n                                                                                                          // 85\n    // Optional: A short human-readable summary of the error. Not                                         // 86\n    // intended to be shown to end users, just developers. (\"Not Found\",                                  // 87\n    // \"Internal Server Error\")                                                                           // 88\n    self.reason = reason;                                                                                 // 89\n                                                                                                          // 90\n    // Optional: Additional information about the error, say for                                          // 91\n    // debugging. It might be a (textual) stack trace if the server is                                    // 92\n    // willing to provide one. The corresponding thing in HTTP would be                                   // 93\n    // the body of a 404 or 500 response. (The difference is that we                                      // 94\n    // never expect this to be shown to end users, only developers, so                                    // 95\n    // it doesn't need to be pretty.)                                                                     // 96\n    self.details = details;                                                                               // 97\n                                                                                                          // 98\n    // This is what gets displayed at the top of a stack trace. Current                                   // 99\n    // format is \"[404]\" (if no reason is set) or \"File not found [404]\"                                  // 100\n    if (self.reason)                                                                                      // 101\n      self.message = self.reason + ' [' + self.error + ']';                                               // 102\n    else                                                                                                  // 103\n      self.message = '[' + self.error + ']';                                                              // 104\n  });                                                                                                     // 105\n                                                                                                          // 106\n// Meteor.Error is basically data and is sent over DDP, so you should be able to                          // 107\n// properly EJSON-clone it. This is especially important because if a                                     // 108\n// Meteor.Error is thrown through a Future, the error, reason, and details                                // 109\n// properties become non-enumerable so a standard Object clone won't preserve                             // 110\n// them and they will be lost from DDP.                                                                   // 111\nMeteor.Error.prototype.clone = function () {                                                              // 112\n  var self = this;                                                                                        // 113\n  return new Meteor.Error(self.error, self.reason, self.details);                                         // 114\n};                                                                                                        // 115\n                                                                                                          // 116\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/fiber_helpers.js                                                                       //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nvar path = Npm.require('path');                                                                           // 1\nvar Fiber = Npm.require('fibers');                                                                        // 2\nvar Future = Npm.require(path.join('fibers', 'future'));                                                  // 3\n                                                                                                          // 4\nMeteor._noYieldsAllowed = function (f) {                                                                  // 5\n  var savedYield = Fiber.yield;                                                                           // 6\n  Fiber.yield = function () {                                                                             // 7\n    throw new Error(\"Can't call yield in a noYieldsAllowed block!\");                                      // 8\n  };                                                                                                      // 9\n  try {                                                                                                   // 10\n    return f();                                                                                           // 11\n  } finally {                                                                                             // 12\n    Fiber.yield = savedYield;                                                                             // 13\n  }                                                                                                       // 14\n};                                                                                                        // 15\n                                                                                                          // 16\nMeteor._DoubleEndedQueue = Npm.require('meteor-deque');                                                   // 17\n                                                                                                          // 18\n// Meteor._SynchronousQueue is a queue which runs task functions serially.                                // 19\n// Tasks are assumed to be synchronous: ie, it's assumed that they are                                    // 20\n// done when they return.                                                                                 // 21\n//                                                                                                        // 22\n// It has two methods:                                                                                    // 23\n//   - queueTask queues a task to be run, and returns immediately.                                        // 24\n//   - runTask queues a task to be run, and then yields. It returns                                       // 25\n//     when the task finishes running.                                                                    // 26\n//                                                                                                        // 27\n// It's safe to call queueTask from within a task, but not runTask (unless                                // 28\n// you're calling runTask from a nested Fiber).                                                           // 29\n//                                                                                                        // 30\n// Somewhat inspired by async.queue, but specific to blocking tasks.                                      // 31\n// XXX break this out into an NPM module?                                                                 // 32\n// XXX could maybe use the npm 'schlock' module instead, which would                                      // 33\n//     also support multiple concurrent \"read\" tasks                                                      // 34\n//                                                                                                        // 35\nMeteor._SynchronousQueue = function () {                                                                  // 36\n  var self = this;                                                                                        // 37\n  // List of tasks to run (not including a currently-running task if any). Each                           // 38\n  // is an object with field 'task' (the task function to run) and 'future' (the                          // 39\n  // Future associated with the blocking runTask call that queued it, or null if                          // 40\n  // called from queueTask).                                                                              // 41\n  self._taskHandles = new Meteor._DoubleEndedQueue();                                                     // 42\n  // This is true if self._run() is either currently executing or scheduled to                            // 43\n  // do so soon.                                                                                          // 44\n  self._runningOrRunScheduled = false;                                                                    // 45\n  // During the execution of a task, this is set to the fiber used to execute                             // 46\n  // that task. We use this to throw an error rather than deadlocking if the                              // 47\n  // user calls runTask from within a task on the same fiber.                                             // 48\n  self._currentTaskFiber = undefined;                                                                     // 49\n  // This is true if we're currently draining.  While we're draining, a further                           // 50\n  // drain is a noop, to prevent infinite loops.  \"drain\" is a heuristic type                             // 51\n  // operation, that has a meaning like unto \"what a naive person would expect                            // 52\n  // when modifying a table from an observe\"                                                              // 53\n  self._draining = false;                                                                                 // 54\n};                                                                                                        // 55\n                                                                                                          // 56\n_.extend(Meteor._SynchronousQueue.prototype, {                                                            // 57\n  runTask: function (task) {                                                                              // 58\n    var self = this;                                                                                      // 59\n                                                                                                          // 60\n    if (!self.safeToRunTask()) {                                                                          // 61\n      if (Fiber.current)                                                                                  // 62\n        throw new Error(\"Can't runTask from another task in the same fiber\");                             // 63\n      else                                                                                                // 64\n        throw new Error(\"Can only call runTask in a Fiber\");                                              // 65\n    }                                                                                                     // 66\n                                                                                                          // 67\n    var fut = new Future;                                                                                 // 68\n    var handle = {                                                                                        // 69\n      task: Meteor.bindEnvironment(task, function (e) {                                                   // 70\n        Meteor._debug(\"Exception from task:\", e && e.stack || e);                                         // 71\n        throw e;                                                                                          // 72\n      }),                                                                                                 // 73\n      future: fut,                                                                                        // 74\n      name: task.name                                                                                     // 75\n    };                                                                                                    // 76\n    self._taskHandles.push(handle);                                                                       // 77\n    self._scheduleRun();                                                                                  // 78\n    // Yield. We'll get back here after the task is run (and will throw if the                            // 79\n    // task throws).                                                                                      // 80\n    fut.wait();                                                                                           // 81\n  },                                                                                                      // 82\n  queueTask: function (task) {                                                                            // 83\n    var self = this;                                                                                      // 84\n    self._taskHandles.push({                                                                              // 85\n      task: task,                                                                                         // 86\n      name: task.name                                                                                     // 87\n    });                                                                                                   // 88\n    self._scheduleRun();                                                                                  // 89\n    // No need to block.                                                                                  // 90\n  },                                                                                                      // 91\n                                                                                                          // 92\n  flush: function () {                                                                                    // 93\n    var self = this;                                                                                      // 94\n    self.runTask(function () {});                                                                         // 95\n  },                                                                                                      // 96\n                                                                                                          // 97\n  safeToRunTask: function () {                                                                            // 98\n    var self = this;                                                                                      // 99\n    return Fiber.current && self._currentTaskFiber !== Fiber.current;                                     // 100\n  },                                                                                                      // 101\n                                                                                                          // 102\n  drain: function () {                                                                                    // 103\n    var self = this;                                                                                      // 104\n    if (self._draining)                                                                                   // 105\n      return;                                                                                             // 106\n    if (!self.safeToRunTask())                                                                            // 107\n      return;                                                                                             // 108\n    self._draining = true;                                                                                // 109\n    while (! self._taskHandles.isEmpty()) {                                                               // 110\n      self.flush();                                                                                       // 111\n    }                                                                                                     // 112\n    self._draining = false;                                                                               // 113\n  },                                                                                                      // 114\n                                                                                                          // 115\n  _scheduleRun: function () {                                                                             // 116\n    var self = this;                                                                                      // 117\n    // Already running or scheduled? Do nothing.                                                          // 118\n    if (self._runningOrRunScheduled)                                                                      // 119\n      return;                                                                                             // 120\n                                                                                                          // 121\n    self._runningOrRunScheduled = true;                                                                   // 122\n    setImmediate(function () {                                                                            // 123\n      Fiber(function () {                                                                                 // 124\n        self._run();                                                                                      // 125\n      }).run();                                                                                           // 126\n    });                                                                                                   // 127\n  },                                                                                                      // 128\n  _run: function () {                                                                                     // 129\n    var self = this;                                                                                      // 130\n                                                                                                          // 131\n    if (!self._runningOrRunScheduled)                                                                     // 132\n      throw new Error(\"expected to be _runningOrRunScheduled\");                                           // 133\n                                                                                                          // 134\n    if (self._taskHandles.isEmpty()) {                                                                    // 135\n      // Done running tasks! Don't immediately schedule another run, but                                  // 136\n      // allow future tasks to do so.                                                                     // 137\n      self._runningOrRunScheduled = false;                                                                // 138\n      return;                                                                                             // 139\n    }                                                                                                     // 140\n    var taskHandle = self._taskHandles.shift();                                                           // 141\n                                                                                                          // 142\n    // Run the task.                                                                                      // 143\n    self._currentTaskFiber = Fiber.current;                                                               // 144\n    var exception = undefined;                                                                            // 145\n    try {                                                                                                 // 146\n      taskHandle.task();                                                                                  // 147\n    } catch (err) {                                                                                       // 148\n      if (taskHandle.future) {                                                                            // 149\n        // We'll throw this exception through runTask.                                                    // 150\n        exception = err;                                                                                  // 151\n      } else {                                                                                            // 152\n        Meteor._debug(\"Exception in queued task: \" + (err.stack || err));                                 // 153\n      }                                                                                                   // 154\n    }                                                                                                     // 155\n    self._currentTaskFiber = undefined;                                                                   // 156\n                                                                                                          // 157\n    // Soon, run the next task, if there is any.                                                          // 158\n    self._runningOrRunScheduled = false;                                                                  // 159\n    self._scheduleRun();                                                                                  // 160\n                                                                                                          // 161\n    // If this was queued with runTask, let the runTask call return (throwing if                          // 162\n    // the task threw).                                                                                   // 163\n    if (taskHandle.future) {                                                                              // 164\n      if (exception)                                                                                      // 165\n        taskHandle.future['throw'](exception);                                                            // 166\n      else                                                                                                // 167\n        taskHandle.future['return']();                                                                    // 168\n    }                                                                                                     // 169\n  }                                                                                                       // 170\n});                                                                                                       // 171\n                                                                                                          // 172\n// Sleep. Mostly used for debugging (eg, inserting latency into server                                    // 173\n// methods).                                                                                              // 174\n//                                                                                                        // 175\nMeteor._sleepForMs = function (ms) {                                                                      // 176\n  var fiber = Fiber.current;                                                                              // 177\n  setTimeout(function() {                                                                                 // 178\n    fiber.run();                                                                                          // 179\n  }, ms);                                                                                                 // 180\n  Fiber.yield();                                                                                          // 181\n};                                                                                                        // 182\n                                                                                                          // 183\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/startup_server.js                                                                      //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nMeteor.startup = function (callback) {                                                                    // 1\n  if (__meteor_bootstrap__.startupHooks) {                                                                // 2\n    __meteor_bootstrap__.startupHooks.push(callback);                                                     // 3\n  } else {                                                                                                // 4\n    // We already started up. Just call it now.                                                           // 5\n    callback();                                                                                           // 6\n  }                                                                                                       // 7\n};                                                                                                        // 8\n                                                                                                          // 9\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/debug.js                                                                               //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nvar suppress = 0;                                                                                         // 1\n                                                                                                          // 2\n// replacement for console.log. This is a temporary API. We should                                        // 3\n// provide a real logging API soon (possibly just a polyfill for                                          // 4\n// console?)                                                                                              // 5\n//                                                                                                        // 6\n// NOTE: this is used on the server to print the warning about                                            // 7\n// having autopublish enabled when you probably meant to turn it                                          // 8\n// off. it's not really the proper use of something called                                                // 9\n// _debug. the intent is for this message to go to the terminal and                                       // 10\n// be very visible. if you change _debug to go someplace else, etc,                                       // 11\n// please fix the autopublish code to do something reasonable.                                            // 12\n//                                                                                                        // 13\nMeteor._debug = function (/* arguments */) {                                                              // 14\n  if (suppress) {                                                                                         // 15\n    suppress--;                                                                                           // 16\n    return;                                                                                               // 17\n  }                                                                                                       // 18\n  if (typeof console !== 'undefined' &&                                                                   // 19\n      typeof console.log !== 'undefined') {                                                               // 20\n    if (arguments.length == 0) { // IE Companion breaks otherwise                                         // 21\n      // IE10 PP4 requires at least one argument                                                          // 22\n      console.log('');                                                                                    // 23\n    } else {                                                                                              // 24\n      // IE doesn't have console.log.apply, it's not a real Object.                                       // 25\n      // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9                  // 26\n      // http://patik.com/blog/complete-cross-browser-console-log/                                        // 27\n      if (typeof console.log.apply === \"function\") {                                                      // 28\n        // Most browsers                                                                                  // 29\n                                                                                                          // 30\n        // Chrome and Safari only hyperlink URLs to source files in first argument of                     // 31\n        // console.log, so try to call it with one argument if possible.                                  // 32\n        // Approach taken here: If all arguments are strings, join them on space.                         // 33\n        // See https://github.com/meteor/meteor/pull/732#issuecomment-13975991                            // 34\n        var allArgumentsOfTypeString = true;                                                              // 35\n        for (var i = 0; i < arguments.length; i++)                                                        // 36\n          if (typeof arguments[i] !== \"string\")                                                           // 37\n            allArgumentsOfTypeString = false;                                                             // 38\n                                                                                                          // 39\n        if (allArgumentsOfTypeString)                                                                     // 40\n          console.log.apply(console, [Array.prototype.join.call(arguments, \" \")]);                        // 41\n        else                                                                                              // 42\n          console.log.apply(console, arguments);                                                          // 43\n                                                                                                          // 44\n      } else if (typeof Function.prototype.bind === \"function\") {                                         // 45\n        // IE9                                                                                            // 46\n        var log = Function.prototype.bind.call(console.log, console);                                     // 47\n        log.apply(console, arguments);                                                                    // 48\n      } else {                                                                                            // 49\n        // IE8                                                                                            // 50\n        Function.prototype.call.call(console.log, console, Array.prototype.slice.call(arguments));        // 51\n      }                                                                                                   // 52\n    }                                                                                                     // 53\n  }                                                                                                       // 54\n};                                                                                                        // 55\n                                                                                                          // 56\n// Suppress the next 'count' Meteor._debug messsages. Use this to                                         // 57\n// stop tests from spamming the console.                                                                  // 58\n//                                                                                                        // 59\nMeteor._suppress_log = function (count) {                                                                 // 60\n  suppress += count;                                                                                      // 61\n};                                                                                                        // 62\n                                                                                                          // 63\nMeteor._supressed_log_expected = function () {                                                            // 64\n  return suppress !== 0;                                                                                  // 65\n};                                                                                                        // 66\n                                                                                                          // 67\n                                                                                                          // 68\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/string_utils.js                                                                        //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n// Like Perl's quotemeta: quotes all regexp metacharacters.                                               // 1\n// Code taken from                                                                                        // 2\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions                      // 3\nMeteor._escapeRegExp = function (string) {                                                                // 4\n    return String(string).replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");                                         // 5\n};                                                                                                        // 6\n                                                                                                          // 7\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/dynamics_nodejs.js                                                                     //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n// Fiber-aware implementation of dynamic scoping, for use on the server                                   // 1\n                                                                                                          // 2\nvar Fiber = Npm.require('fibers');                                                                        // 3\n                                                                                                          // 4\nvar nextSlot = 0;                                                                                         // 5\n                                                                                                          // 6\nMeteor._nodeCodeMustBeInFiber = function () {                                                             // 7\n  if (!Fiber.current) {                                                                                   // 8\n    throw new Error(\"Meteor code must always run within a Fiber. \" +                                      // 9\n                    \"Try wrapping callbacks that you pass to non-Meteor \" +                               // 10\n                    \"libraries with Meteor.bindEnvironment.\");                                            // 11\n  }                                                                                                       // 12\n};                                                                                                        // 13\n                                                                                                          // 14\nMeteor.EnvironmentVariable = function () {                                                                // 15\n  this.slot = nextSlot++;                                                                                 // 16\n};                                                                                                        // 17\n                                                                                                          // 18\n_.extend(Meteor.EnvironmentVariable.prototype, {                                                          // 19\n  get: function () {                                                                                      // 20\n    Meteor._nodeCodeMustBeInFiber();                                                                      // 21\n                                                                                                          // 22\n    return Fiber.current._meteor_dynamics &&                                                              // 23\n      Fiber.current._meteor_dynamics[this.slot];                                                          // 24\n  },                                                                                                      // 25\n                                                                                                          // 26\n  // Most Meteor code ought to run inside a fiber, and the                                                // 27\n  // _nodeCodeMustBeInFiber assertion helps you remember to include appropriate                           // 28\n  // bindEnvironment calls (which will get you the *right value* for your                                 // 29\n  // environment variables, on the server).                                                               // 30\n  //                                                                                                      // 31\n  // In some very special cases, it's more important to run Meteor code on the                            // 32\n  // server in non-Fiber contexts rather than to strongly enforce the safeguard                           // 33\n  // against forgetting to use bindEnvironment. For example, using `check` in                             // 34\n  // some top-level constructs like connect handlers without needing unnecessary                          // 35\n  // Fibers on every request is more important that possibly failing to find the                          // 36\n  // correct argumentChecker. So this function is just like get(), but it                                 // 37\n  // returns null rather than throwing when called from outside a Fiber. (On the                          // 38\n  // client, it is identical to get().)                                                                   // 39\n  getOrNullIfOutsideFiber: function () {                                                                  // 40\n    if (!Fiber.current)                                                                                   // 41\n      return null;                                                                                        // 42\n    return this.get();                                                                                    // 43\n  },                                                                                                      // 44\n                                                                                                          // 45\n  withValue: function (value, func) {                                                                     // 46\n    Meteor._nodeCodeMustBeInFiber();                                                                      // 47\n                                                                                                          // 48\n    if (!Fiber.current._meteor_dynamics)                                                                  // 49\n      Fiber.current._meteor_dynamics = [];                                                                // 50\n    var currentValues = Fiber.current._meteor_dynamics;                                                   // 51\n                                                                                                          // 52\n    var saved = currentValues[this.slot];                                                                 // 53\n    try {                                                                                                 // 54\n      currentValues[this.slot] = value;                                                                   // 55\n      var ret = func();                                                                                   // 56\n    } finally {                                                                                           // 57\n      currentValues[this.slot] = saved;                                                                   // 58\n    }                                                                                                     // 59\n                                                                                                          // 60\n    return ret;                                                                                           // 61\n  }                                                                                                       // 62\n});                                                                                                       // 63\n                                                                                                          // 64\n// Meteor application code is always supposed to be run inside a                                          // 65\n// fiber. bindEnvironment ensures that the function it wraps is run from                                  // 66\n// inside a fiber and ensures it sees the values of Meteor environment                                    // 67\n// variables that are set at the time bindEnvironment is called.                                          // 68\n//                                                                                                        // 69\n// If an environment-bound function is called from outside a fiber (eg, from                              // 70\n// an asynchronous callback from a non-Meteor library such as MongoDB), it'll                             // 71\n// kick off a new fiber to execute the function, and returns undefined as soon                            // 72\n// as that fiber returns or yields (and func's return value is ignored).                                  // 73\n//                                                                                                        // 74\n// If it's called inside a fiber, it works normally (the                                                  // 75\n// return value of the function will be passed through, and no new                                        // 76\n// fiber will be created.)                                                                                // 77\n//                                                                                                        // 78\n// `onException` should be a function or a string.  When it is a                                          // 79\n// function, it is called as a callback when the bound function raises                                    // 80\n// an exception.  If it is a string, it should be a description of the                                    // 81\n// callback, and when an exception is raised a debug message will be                                      // 82\n// printed with the description.                                                                          // 83\nMeteor.bindEnvironment = function (func, onException, _this) {                                            // 84\n  Meteor._nodeCodeMustBeInFiber();                                                                        // 85\n                                                                                                          // 86\n  var boundValues = _.clone(Fiber.current._meteor_dynamics || []);                                        // 87\n                                                                                                          // 88\n  if (!onException || typeof(onException) === 'string') {                                                 // 89\n    var description = onException || \"callback of async function\";                                        // 90\n    onException = function (error) {                                                                      // 91\n      Meteor._debug(                                                                                      // 92\n        \"Exception in \" + description + \":\",                                                              // 93\n        error && error.stack || error                                                                     // 94\n      );                                                                                                  // 95\n    };                                                                                                    // 96\n  }                                                                                                       // 97\n                                                                                                          // 98\n  return function (/* arguments */) {                                                                     // 99\n    var args = _.toArray(arguments);                                                                      // 100\n                                                                                                          // 101\n    var runWithEnvironment = function () {                                                                // 102\n      var savedValues = Fiber.current._meteor_dynamics;                                                   // 103\n      try {                                                                                               // 104\n        // Need to clone boundValues in case two fibers invoke this                                       // 105\n        // function at the same time                                                                      // 106\n        Fiber.current._meteor_dynamics = _.clone(boundValues);                                            // 107\n        var ret = func.apply(_this, args);                                                                // 108\n      } catch (e) {                                                                                       // 109\n        // note: callback-hook currently relies on the fact that if onException                           // 110\n        // throws and you were originally calling the wrapped callback from                               // 111\n        // within a Fiber, the wrapped call throws.                                                       // 112\n        onException(e);                                                                                   // 113\n      } finally {                                                                                         // 114\n        Fiber.current._meteor_dynamics = savedValues;                                                     // 115\n      }                                                                                                   // 116\n      return ret;                                                                                         // 117\n    };                                                                                                    // 118\n                                                                                                          // 119\n    if (Fiber.current)                                                                                    // 120\n      return runWithEnvironment();                                                                        // 121\n    Fiber(runWithEnvironment).run();                                                                      // 122\n  };                                                                                                      // 123\n};                                                                                                        // 124\n                                                                                                          // 125\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/url_server.js                                                                          //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nif (process.env.ROOT_URL &&                                                                               // 1\n    typeof __meteor_runtime_config__ === \"object\") {                                                      // 2\n  __meteor_runtime_config__.ROOT_URL = process.env.ROOT_URL;                                              // 3\n  if (__meteor_runtime_config__.ROOT_URL) {                                                               // 4\n    var parsedUrl = Npm.require('url').parse(__meteor_runtime_config__.ROOT_URL);                         // 5\n    // Sometimes users try to pass, eg, ROOT_URL=mydomain.com.                                            // 6\n    if (!parsedUrl.host) {                                                                                // 7\n      throw Error(\"$ROOT_URL, if specified, must be an URL\");                                             // 8\n    }                                                                                                     // 9\n    var pathPrefix = parsedUrl.pathname;                                                                  // 10\n    if (pathPrefix.slice(-1) === '/') {                                                                   // 11\n      // remove trailing slash (or turn \"/\" into \"\")                                                      // 12\n      pathPrefix = pathPrefix.slice(0, -1);                                                               // 13\n    }                                                                                                     // 14\n    __meteor_runtime_config__.ROOT_URL_PATH_PREFIX = pathPrefix;                                          // 15\n  } else {                                                                                                // 16\n    __meteor_runtime_config__.ROOT_URL_PATH_PREFIX = \"\";                                                  // 17\n  }                                                                                                       // 18\n}                                                                                                         // 19\n                                                                                                          // 20\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/url_common.js                                                                          //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\n/**                                                                                                       // 1\n * @summary Generate an absolute URL pointing to the application. The server reads from the `ROOT_URL` environment variable to determine where it is running. This is taken care of automatically for apps deployed with `meteor deploy`, but must be provided when using `meteor build`.\n * @locus Anywhere                                                                                        // 3\n * @param {String} [path] A path to append to the root URL. Do not include a leading \"`/`\".               // 4\n * @param {Object} [options]                                                                              // 5\n * @param {Boolean} options.secure Create an HTTPS URL.                                                   // 6\n * @param {Boolean} options.replaceLocalhost Replace localhost with 127.0.0.1. Useful for services that don't recognize localhost as a domain name.\n * @param {String} options.rootUrl Override the default ROOT_URL from the server environment. For example: \"`http://foo.example.com`\"\n */                                                                                                       // 9\nMeteor.absoluteUrl = function (path, options) {                                                           // 10\n  // path is optional                                                                                     // 11\n  if (!options && typeof path === 'object') {                                                             // 12\n    options = path;                                                                                       // 13\n    path = undefined;                                                                                     // 14\n  }                                                                                                       // 15\n  // merge options with defaults                                                                          // 16\n  options = _.extend({}, Meteor.absoluteUrl.defaultOptions, options || {});                               // 17\n                                                                                                          // 18\n  var url = options.rootUrl;                                                                              // 19\n  if (!url)                                                                                               // 20\n    throw new Error(\"Must pass options.rootUrl or set ROOT_URL in the server environment\");               // 21\n                                                                                                          // 22\n  if (!/^http[s]?:\\/\\//i.test(url)) // url starts with 'http://' or 'https://'                            // 23\n    url = 'http://' + url; // we will later fix to https if options.secure is set                         // 24\n                                                                                                          // 25\n  if (!/\\/$/.test(url)) // url ends with '/'                                                              // 26\n    url += '/';                                                                                           // 27\n                                                                                                          // 28\n  if (path)                                                                                               // 29\n    url += path;                                                                                          // 30\n                                                                                                          // 31\n  // turn http to https if secure option is set, and we're not talking                                    // 32\n  // to localhost.                                                                                        // 33\n  if (options.secure &&                                                                                   // 34\n      /^http:/.test(url) && // url starts with 'http:'                                                    // 35\n      !/http:\\/\\/localhost[:\\/]/.test(url) && // doesn't match localhost                                  // 36\n      !/http:\\/\\/127\\.0\\.0\\.1[:\\/]/.test(url)) // or 127.0.0.1                                            // 37\n    url = url.replace(/^http:/, 'https:');                                                                // 38\n                                                                                                          // 39\n  if (options.replaceLocalhost)                                                                           // 40\n    url = url.replace(/^http:\\/\\/localhost([:\\/].*)/, 'http://127.0.0.1$1');                              // 41\n                                                                                                          // 42\n  return url;                                                                                             // 43\n};                                                                                                        // 44\n                                                                                                          // 45\n// allow later packages to override default options                                                       // 46\nMeteor.absoluteUrl.defaultOptions = { };                                                                  // 47\nif (typeof __meteor_runtime_config__ === \"object\" &&                                                      // 48\n    __meteor_runtime_config__.ROOT_URL)                                                                   // 49\n  Meteor.absoluteUrl.defaultOptions.rootUrl = __meteor_runtime_config__.ROOT_URL;                         // 50\n                                                                                                          // 51\n                                                                                                          // 52\nMeteor._relativeToSiteRootUrl = function (link) {                                                         // 53\n  if (typeof __meteor_runtime_config__ === \"object\" &&                                                    // 54\n      link.substr(0, 1) === \"/\")                                                                          // 55\n    link = (__meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\") + link;                                 // 56\n  return link;                                                                                            // 57\n};                                                                                                        // 58\n                                                                                                          // 59\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                        //\n// packages/meteor/flush-buffers-on-exit-in-windows.js                                                    //\n//                                                                                                        //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                          //\nif (process.platform === \"win32\") {                                                                       // 1\n  /*                                                                                                      // 2\n   * Based on https://github.com/cowboy/node-exit                                                         // 3\n   *                                                                                                      // 4\n   * Copyright (c) 2013 \"Cowboy\" Ben Alman                                                                // 5\n   * Licensed under the MIT license.                                                                      // 6\n   */                                                                                                     // 7\n  var origProcessExit = process.exit.bind(process);                                                       // 8\n  process.exit = function (exitCode) {                                                                    // 9\n    var streams = [process.stdout, process.stderr];                                                       // 10\n    var drainCount = 0;                                                                                   // 11\n    // Actually exit if all streams are drained.                                                          // 12\n    function tryToExit() {                                                                                // 13\n      if (drainCount === streams.length) {                                                                // 14\n        origProcessExit(exitCode);                                                                        // 15\n      }                                                                                                   // 16\n    }                                                                                                     // 17\n    streams.forEach(function(stream) {                                                                    // 18\n      // Count drained streams now, but monitor non-drained streams.                                      // 19\n      if (stream.bufferSize === 0) {                                                                      // 20\n        drainCount++;                                                                                     // 21\n      } else {                                                                                            // 22\n        stream.write('', 'utf-8', function() {                                                            // 23\n          drainCount++;                                                                                   // 24\n          tryToExit();                                                                                    // 25\n        });                                                                                               // 26\n      }                                                                                                   // 27\n      // Prevent further writing.                                                                         // 28\n      stream.write = function() {};                                                                       // 29\n    });                                                                                                   // 30\n    // If all streams were already drained, exit now.                                                     // 31\n    tryToExit();                                                                                          // 32\n    // In Windows, when run as a Node.js child process, a script utilizing                                // 33\n    // this library might just exit with a 0 exit code, regardless. This code,                            // 34\n    // despite the fact that it looks a bit crazy, appears to fix that.                                   // 35\n    process.on('exit', function() {                                                                       // 36\n      origProcessExit(exitCode);                                                                          // 37\n    });                                                                                                   // 38\n  };                                                                                                      // 39\n}                                                                                                         // 40\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}}]