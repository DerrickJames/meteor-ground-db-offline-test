{"version":3,"sources":["meteor://ðŸ’»app/packages/raix_onetimeout/packages/raix_onetimeout.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iF","file":"/packages/raix_onetimeout.js","sourcesContent":["(function () {\n\n////////////////////////////////////////////////////////////////////////\n//                                                                    //\n// packages/raix:onetimeout/onetimeout.js                             //\n//                                                                    //\n////////////////////////////////////////////////////////////////////////\n                                                                      //\nOneTimeout = function(delay) {                                        // 1\n  if (typeof delay == 'undefined')                                    // 2\n    throw new Error('New api');                                       // 3\n  // Pointer to Meteor.setTimeout                                     // 4\n  var id = null;                                                      // 5\n  // Save the methods into the localstorage                           // 6\n  return function oneTimeout(f) {                                     // 7\n    // If a timeout is in progress                                    // 8\n    if (id !== null) {                                                // 9\n      // then stop the current timeout - we have updates              // 10\n      Meteor.clearTimeout(id);                                        // 11\n    }                                                                 // 12\n    // Spawn new timeout                                              // 13\n    id = Meteor.setTimeout(function runOneTimeout() {                 // 14\n      // Ok, we reset reference so we dont get cleared and go to work // 15\n      id = null;                                                      // 16\n      // Run function                                                 // 17\n      f();                                                            // 18\n      // Delay execution a bit                                        // 19\n    }, delay);                                                        // 20\n  };                                                                  // 21\n};                                                                    // 22\n////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}