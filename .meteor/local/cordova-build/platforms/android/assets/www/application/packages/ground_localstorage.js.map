{"version":3,"sources":["meteor://ðŸ’»app/packages/ground_localstorage/packages/ground_localstorage.js"],"names":[],"mappingsoH","file":"/packages/ground_localstorage.js","sourcesContent":["(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/ground:localstorage/client.js                                                              //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\n// This function will test localstorage to see if its actually available and                           // 1\n// working.                                                                                            // 2\nvar _getLocalStorage = function() {                                                                    // 3\n                                                                                                       // 4\n  // Set storage to localStorage - if test fails storage is set to null                                // 5\n  var storage = window.localStorage;                                                                   // 6\n                                                                                                       // 7\n  // We initialize the fail flag defaulting to true                                                    // 8\n  var fail = true;                                                                                     // 9\n                                                                                                       // 10\n  // In the test we test the localstorage api setItem/getItem/removeItem this                          // 11\n  // uid will hopefully prevent any overwriting of existing data                                       // 12\n  var uid = Random.id();                                                                               // 13\n                                                                                                       // 14\n  try {                                                                                                // 15\n    // Use the setItem api                                                                             // 16\n    storage.setItem(uid, uid);                                                                         // 17\n    // Test the getItem api and check if the value could be set and retrieved                          // 18\n    fail = (storage.getItem(uid) !== uid);                                                             // 19\n    // Test removeItem and clean up the test data                                                      // 20\n    storage.removeItem(uid);                                                                           // 21\n                                                                                                       // 22\n    // If the test failed then set the storage to null                                                 // 23\n    if (fail) storage = null;                                                                          // 24\n                                                                                                       // 25\n  } catch(e) {                                                                                         // 26\n    // Noop, cant do much about it                                                                     // 27\n  }                                                                                                    // 28\n                                                                                                       // 29\n  // Return the tested localstorage                                                                    // 30\n  return storage;                                                                                      // 31\n};                                                                                                     // 32\n                                                                                                       // 33\n// Get storage if available                                                                            // 34\nvar _storage = _getLocalStorage();                                                                     // 35\n                                                                                                       // 36\n                                                                                                       // 37\n// Check to see if we got any localstorage to add                                                      // 38\nif (_storage) {                                                                                        // 39\n                                                                                                       // 40\n  // Create a namespace to track storage name spacing                                                  // 41\n  var _localStorageNS = {};                                                                            // 42\n                                                                                                       // 43\n  // Create a noop function                                                                            // 44\n  var noop = function() {};                                                                            // 45\n                                                                                                       // 46\n  // Prefix convention                                                                                 // 47\n  var _prefix = function(name) {                                                                       // 48\n    return '_storage.' + name;                                                                         // 49\n  };                                                                                                   // 50\n                                                                                                       // 51\n  // Prefix database                                                                                   // 52\n  var _prefixDatabase = function(name) {                                                               // 53\n    return _prefix(name) + '.db.';                                                                     // 54\n  };                                                                                                   // 55\n                                                                                                       // 56\n  // Prefix database record                                                                            // 57\n  var _prefixDatabaseRecord = function(name) {                                                         // 58\n    return _prefix(name) + '.record';                                                                  // 59\n  };                                                                                                   // 60\n                                                                                                       // 61\n  // Helper getting and updating the table record                                                      // 62\n  var _setTableRecord = function(SAInstance, migrationCallback) {                                      // 63\n                                                                                                       // 64\n    // Database record name in localstorage                                                            // 65\n    var recordName = _prefixDatabaseRecord(SAInstance.name);                                           // 66\n                                                                                                       // 67\n    // Get the database record                                                                         // 68\n    var oldRecordString = _storage.getItem(recordName);                                                // 69\n                                                                                                       // 70\n    // Set the default empty record object                                                             // 71\n    var record = {};                                                                                   // 72\n                                                                                                       // 73\n    try {                                                                                              // 74\n                                                                                                       // 75\n      // Get old record object                                                                         // 76\n      record = oldRecordString && EJSON.parse(oldRecordString) || {};                                  // 77\n                                                                                                       // 78\n    } catch(err) {                                                                                     // 79\n      // Noop, cant do much about it, we assume that data is lost                                      // 80\n    }                                                                                                  // 81\n                                                                                                       // 82\n    // Set new version helper                                                                          // 83\n    var newVersion = SAInstance.version;                                                               // 84\n                                                                                                       // 85\n    // Set old version helper                                                                          // 86\n    var oldVersion = record.version ||Â 1.0;                                                            // 87\n                                                                                                       // 88\n    // Update the record                                                                               // 89\n    record.version = SAInstance.version;                                                               // 90\n                                                                                                       // 91\n    try {                                                                                              // 92\n                                                                                                       // 93\n      // Create new record as string                                                                   // 94\n      var newRecordString = EJSON.stringify(record);                                                   // 95\n                                                                                                       // 96\n      // Store the new record                                                                          // 97\n      _storage.setItem(recordName, newRecordString);                                                   // 98\n                                                                                                       // 99\n    } catch(err) {                                                                                     // 100\n      // Noop, cant do much here                                                                       // 101\n    }                                                                                                  // 102\n                                                                                                       // 103\n    migrationCallback.call(SAInstance, {                                                               // 104\n      version: oldVersion                                                                              // 105\n    }, {                                                                                               // 106\n      version: newVersion                                                                              // 107\n    });                                                                                                // 108\n  };                                                                                                   // 109\n                                                                                                       // 110\n  // Yeah, got it - add the api to the Storage global                                                  // 111\n  Store.localStorage = function(options) {                                                             // 112\n    var self = this;                                                                                   // 113\n                                                                                                       // 114\n    if (!(self instanceof Store.localStorage))                                                         // 115\n      return new Store.localStorage(self.name);                                                        // 116\n                                                                                                       // 117\n    // Inheritance EventEmitter                                                                        // 118\n    self.eventemitter = new EventEmitter();                                                            // 119\n                                                                                                       // 120\n    // Make sure options is at least an empty object                                                   // 121\n    options = options || {};                                                                           // 122\n                                                                                                       // 123\n    // Set the name on the instance                                                                    // 124\n    self.name = options.name;                                                                          // 125\n                                                                                                       // 126\n    // Check to see if the storage is already defined                                                  // 127\n    if (_localStorageNS[self.name])                                                                    // 128\n      throw new Error('Storage.localStorage \"' + self.name + '\" is already in use');                   // 129\n                                                                                                       // 130\n    // Make sure that the user dont use '.db.'                                                         // 131\n    if (/\\.db\\./.test(self.name))                                                                      // 132\n      throw new Error('Storage.localStorage \"' + self.name + '\" contains \".db.\" this is not allowed'); // 133\n                                                                                                       // 134\n    // Set the size of db 0 === disable quota                                                          // 135\n    // TODO: Implement                                                                                 // 136\n    self.size = options.size || 0;                                                                     // 137\n                                                                                                       // 138\n    // Set version - if this is bumped then the data is cleared pr. default                            // 139\n    // migration                                                                                       // 140\n    self.version = options.version ||Â 1.0;                                                             // 141\n                                                                                                       // 142\n    // Set migration function                                                                          // 143\n    var migrationFunction = options.migration || function(oldRecord, newRecord) {                      // 144\n                                                                                                       // 145\n      // Check storage versions                                                                        // 146\n      if (oldRecord.version !== newRecord.version) {                                                   // 147\n        // We allow the user to customize a migration algoritme but here we just                       // 148\n        // clear the storage if versions mismatch                                                      // 149\n        self.clear(noop);                                                                              // 150\n      }                                                                                                // 151\n    };                                                                                                 // 152\n                                                                                                       // 153\n    // Store the instance                                                                              // 154\n    _localStorageNS[self.name] = self;                                                                 // 155\n                                                                                                       // 156\n                                                                                                       // 157\n    // Set the table record, at the moment this is only handling the version                           // 158\n    _setTableRecord(self, migrationFunction);                                                          // 159\n                                                                                                       // 160\n  };                                                                                                   // 161\n                                                                                                       // 162\n  // Simple helper to return the storage type name                                                     // 163\n  Store.localStorage.prototype.typeName = function() {                                                 // 164\n    return 'localStorage';                                                                             // 165\n  };                                                                                                   // 166\n                                                                                                       // 167\n  Store.localStorage.prototype.prefix = function() {                                                   // 168\n    var self = this;                                                                                   // 169\n    return _prefixDatabase(self.name);                                                                 // 170\n  };                                                                                                   // 171\n                                                                                                       // 172\n  Store.localStorage.prototype.getPrefixedId = function(name) {                                        // 173\n    var self = this;                                                                                   // 174\n    return self.prefix() + name;                                                                       // 175\n  };                                                                                                   // 176\n                                                                                                       // 177\n  //////////////////////////////////////////////////////////////////////////////                       // 178\n  // WRAP LOCALSTORAGE API                                                                             // 179\n  //////////////////////////////////////////////////////////////////////////////                       // 180\n                                                                                                       // 181\n  Store.localStorage.prototype.getItem = function(name, callback) {                                    // 182\n    var self = this;                                                                                   // 183\n                                                                                                       // 184\n    // Check if callback is function                                                                   // 185\n    if (typeof callback !== 'function')                                                                // 186\n      throw new Error('Storage.localStorage.getItem require a callback function');                     // 187\n                                                                                                       // 188\n    try {                                                                                              // 189\n                                                                                                       // 190\n      // Get the string value                                                                          // 191\n      var jsonObj = _storage.getItem(self.getPrefixedId(name));                                        // 192\n                                                                                                       // 193\n      // Try to return the object of the parsed string                                                 // 194\n      callback(null, jsonObj && EJSON.parse(jsonObj) || jsonObj);                                      // 195\n                                                                                                       // 196\n    } catch(err) {                                                                                     // 197\n      // Callback with error                                                                           // 198\n      callback(err);                                                                                   // 199\n                                                                                                       // 200\n    }                                                                                                  // 201\n                                                                                                       // 202\n  };                                                                                                   // 203\n                                                                                                       // 204\n  Store.localStorage.prototype.setItem = function(name, obj, callback) {                               // 205\n    var self = this;                                                                                   // 206\n                                                                                                       // 207\n    // Check if callback is function                                                                   // 208\n    if (typeof callback !== 'function')                                                                // 209\n      throw new Error('Storage.localStorage.setItem require a callback function');                     // 210\n                                                                                                       // 211\n    try {                                                                                              // 212\n                                                                                                       // 213\n      // Stringify the object                                                                          // 214\n      var jsonObj = EJSON.stringify(obj);                                                              // 215\n                                                                                                       // 216\n      // Try to set the stringified object                                                             // 217\n      callback(null, _storage.setItem(self.getPrefixedId(name), jsonObj));                             // 218\n                                                                                                       // 219\n    } catch(err) {                                                                                     // 220\n                                                                                                       // 221\n      // Callback with error                                                                           // 222\n      callback(err);                                                                                   // 223\n                                                                                                       // 224\n    }                                                                                                  // 225\n  };                                                                                                   // 226\n                                                                                                       // 227\n  Store.localStorage.prototype.removeItem = function(name, callback) {                                 // 228\n    var self = this;                                                                                   // 229\n                                                                                                       // 230\n    // Check if callback is function                                                                   // 231\n    if (typeof callback !== 'function')                                                                // 232\n      throw new Error('Storage.localStorage.removeItem require a callback function');                  // 233\n                                                                                                       // 234\n    try {                                                                                              // 235\n                                                                                                       // 236\n      // Try to remove the item                                                                        // 237\n      callback(null, _storage.removeItem(self.getPrefixedId(name)));                                   // 238\n                                                                                                       // 239\n    } catch(err) {                                                                                     // 240\n                                                                                                       // 241\n      // callback with error                                                                           // 242\n      callback(err);                                                                                   // 243\n                                                                                                       // 244\n    }                                                                                                  // 245\n  };                                                                                                   // 246\n                                                                                                       // 247\n  Store.localStorage.prototype.clear = function(callback) {                                            // 248\n    var self = this;                                                                                   // 249\n                                                                                                       // 250\n    // Check if callback is function                                                                   // 251\n    if (typeof callback !== 'function')                                                                // 252\n      throw new Error('Storage.localStorage.clear require a callback function');                       // 253\n                                                                                                       // 254\n    try {                                                                                              // 255\n                                                                                                       // 256\n      // Find all relevant keys for this storage                                                       // 257\n      self.keys(function(err, keys) {                                                                  // 258\n        if (err) {                                                                                     // 259\n                                                                                                       // 260\n          // On error we just callback                                                                 // 261\n          callback(err);                                                                               // 262\n                                                                                                       // 263\n        } else {                                                                                       // 264\n                                                                                                       // 265\n          // Iterate over keys and removing them one by one                                            // 266\n          for (var i=0; i < keys.length; i++)                                                          // 267\n            self.removeItem(keys[i], noop);                                                            // 268\n                                                                                                       // 269\n          // Callback                                                                                  // 270\n          callback(null, keys.length);                                                                 // 271\n        }                                                                                              // 272\n      });                                                                                              // 273\n                                                                                                       // 274\n    } catch(err) {                                                                                     // 275\n                                                                                                       // 276\n      // callback with error                                                                           // 277\n      callback(err);                                                                                   // 278\n                                                                                                       // 279\n    }                                                                                                  // 280\n  };                                                                                                   // 281\n                                                                                                       // 282\n  Store.localStorage.prototype.keys = function(callback) {                                             // 283\n    var self = this;                                                                                   // 284\n                                                                                                       // 285\n    // Check if callback is function                                                                   // 286\n    if (typeof callback !== 'function')                                                                // 287\n      throw new Error('Storage.localStorage.keys require a callback function');                        // 288\n                                                                                                       // 289\n    // Result to return                                                                                // 290\n    var result = [];                                                                                   // 291\n                                                                                                       // 292\n    try {                                                                                              // 293\n                                                                                                       // 294\n      // Create the prefix test                                                                        // 295\n      var regex = new RegExp('^' + self.prefix());                                                     // 296\n                                                                                                       // 297\n      for (var i = 0; i < _storage.length; i++) {                                                      // 298\n                                                                                                       // 299\n        // Test if the key is relevant to this store                                                   // 300\n        if (regex.test(_storage.key(i)))                                                               // 301\n          // Add the name                                                                              // 302\n          result.push(_storage.key(i).replace(regex, ''));                                             // 303\n      }                                                                                                // 304\n                                                                                                       // 305\n      // Return the result                                                                             // 306\n      callback(null, result);                                                                          // 307\n                                                                                                       // 308\n    } catch(err) {                                                                                     // 309\n                                                                                                       // 310\n      // callback with error                                                                           // 311\n      callback(err);                                                                                   // 312\n                                                                                                       // 313\n    }                                                                                                  // 314\n  };                                                                                                   // 315\n                                                                                                       // 316\n  Store.localStorage.prototype.length = function(callback) {                                           // 317\n    var self = this;                                                                                   // 318\n                                                                                                       // 319\n    // Check if callback is function                                                                   // 320\n    if (typeof callback !== 'function')                                                                // 321\n      throw new Error('Storage.localStorage.length require a callback function');                      // 322\n                                                                                                       // 323\n    try {                                                                                              // 324\n                                                                                                       // 325\n      // Get the keys                                                                                  // 326\n      self.keys(function(error, keys) {                                                                // 327\n                                                                                                       // 328\n        // Return the length                                                                           // 329\n        callback(error, keys && keys.length || null);                                                  // 330\n                                                                                                       // 331\n      });                                                                                              // 332\n                                                                                                       // 333\n    } catch(err) {                                                                                     // 334\n                                                                                                       // 335\n      // callback with error                                                                           // 336\n      callback(err);                                                                                   // 337\n                                                                                                       // 338\n    }                                                                                                  // 339\n  };                                                                                                   // 340\n                                                                                                       // 341\n  Store.localStorage.prototype.toObject = function(callback) {                                         // 342\n    var self = this;                                                                                   // 343\n                                                                                                       // 344\n    // Check if callback is function                                                                   // 345\n    if (typeof callback !== 'function')                                                                // 346\n      throw new Error('Storage.localStorage.toObject require a callback function');                    // 347\n                                                                                                       // 348\n    // Result to return                                                                                // 349\n    var result = {};                                                                                   // 350\n                                                                                                       // 351\n    try {                                                                                              // 352\n                                                                                                       // 353\n      // Create the prefix test                                                                        // 354\n      var regex = new RegExp('^' + self.prefix());                                                     // 355\n                                                                                                       // 356\n      for (var i = 0; i < _storage.length; i++) {                                                      // 357\n        // Helper                                                                                      // 358\n        var key = _storage.key(i);                                                                     // 359\n                                                                                                       // 360\n        // Test if the key is relevant to this store                                                   // 361\n        if (regex.test(key)) {                                                                         // 362\n          try {                                                                                        // 363\n                                                                                                       // 364\n            // Get the string value                                                                    // 365\n            var jsonObj = _storage.getItem(key);                                                       // 366\n                                                                                                       // 367\n            // Try to return the object of the parsed string                                           // 368\n            result[key.replace(regex, '')] = jsonObj && EJSON.parse(jsonObj) || jsonObj;               // 369\n                                                                                                       // 370\n          } catch(err) {                                                                               // 371\n            // NOOP                                                                                    // 372\n          }                                                                                            // 373\n        }                                                                                              // 374\n                                                                                                       // 375\n      }                                                                                                // 376\n                                                                                                       // 377\n      // Return the result                                                                             // 378\n      callback(null, result);                                                                          // 379\n                                                                                                       // 380\n    } catch(err) {                                                                                     // 381\n                                                                                                       // 382\n      // callback with error                                                                           // 383\n      callback(err);                                                                                   // 384\n                                                                                                       // 385\n    }                                                                                                  // 386\n  };                                                                                                   // 387\n                                                                                                       // 388\n  //////////////////////////////////////////////////////////////////////////////                       // 389\n  // WRAP EVENTEMITTER API                                                                             // 390\n  //////////////////////////////////////////////////////////////////////////////                       // 391\n                                                                                                       // 392\n  // Wrap the Event Emitter Api \"on\"                                                                   // 393\n  Store.localStorage.prototype.on = function(/* arguments */) {                                        // 394\n    this.eventemitter.on.apply(this.eventemitter, _.toArray(arguments));                               // 395\n  };                                                                                                   // 396\n                                                                                                       // 397\n  // Wrap the Event Emitter Api \"once\"                                                                 // 398\n  Store.localStorage.prototype.once = function(/* arguments */) {                                      // 399\n    this.eventemitter.once.apply(this.eventemitter, _.toArray(arguments));                             // 400\n  };                                                                                                   // 401\n                                                                                                       // 402\n  // Wrap the Event Emitter Api \"off\"                                                                  // 403\n  Store.localStorage.prototype.off = function(/* arguments */) {                                       // 404\n    this.eventemitter.off.apply(this.eventemitter, _.toArray(arguments));                              // 405\n  };                                                                                                   // 406\n                                                                                                       // 407\n  // Wrap the Event Emitter Api \"emit\"                                                                 // 408\n  Store.localStorage.prototype.emit = function(/* arguments */) {                                      // 409\n    this.eventemitter.emit.apply(this.eventemitter, _.toArray(arguments));                             // 410\n  };                                                                                                   // 411\n                                                                                                       // 412\n                                                                                                       // 413\n  // Add api helpers                                                                                   // 414\n  Store.localStorage.prototype.addListener = Store.localStorage.prototype.on;                          // 415\n  Store.localStorage.prototype.removeListener = Store.localStorage.prototype.off;                      // 416\n  Store.localStorage.prototype.removeAllListeners = Store.localStorage.prototype.off;                  // 417\n                                                                                                       // 418\n  // Add jquery like helpers                                                                           // 419\n  Store.localStorage.prototype.one = Store.localStorage.prototype.once;                                // 420\n  Store.localStorage.prototype.trigger = Store.localStorage.prototype.emit;                            // 421\n                                                                                                       // 422\n                                                                                                       // 423\n                                                                                                       // 424\n  //////////////////////////////////////////////////////////////////////////////                       // 425\n  // WRAP LOCALSTORAGE EVENTHANDLER                                                                    // 426\n  //////////////////////////////////////////////////////////////////////////////                       // 427\n                                                                                                       // 428\n  // This will be a quick test to see if we have any relations to the data                             // 429\n  var _prefixedByUs = new RegExp('^' + _prefix(''));                                                   // 430\n                                                                                                       // 431\n  // Add event handlers                                                                                // 432\n  if (typeof window.addEventListener !== 'undefined') {                                                // 433\n      // Add support for multiple tabs                                                                 // 434\n      window.addEventListener('storage', function(e) {                                                 // 435\n      // Data changed in another tab, it would have updated localstorage, I'm                          // 436\n      // outdated so reload the tab and localstorage - but we test the prefix on the                   // 437\n      // key - since we actually make writes in the localstorage feature test                          // 438\n                                                                                                       // 439\n      // First of lets make sure that it was actually prefixed by us                                   // 440\n      if (e.key && _prefixedByUs.test(e.key)) {                                                        // 441\n                                                                                                       // 442\n        // Okay, this looks familiar, now we try to lookup the storage instance                        // 443\n        // to emit an event on...                                                                      // 444\n                                                                                                       // 445\n        // Remove the prefix                                                                           // 446\n        var noPrefix = e.key.replace(_prefixedByUs, '');                                               // 447\n                                                                                                       // 448\n        // So we know that the name dont contain suffix \".db.\"                                         // 449\n        var elements = noPrefix.split('.db.');                                                         // 450\n                                                                                                       // 451\n        var storageName = elements.shift();                                                            // 452\n                                                                                                       // 453\n        // Get the remaining key                                                                       // 454\n        var key = elements.join('.db.');                                                               // 455\n                                                                                                       // 456\n        // Get the affected storage                                                                    // 457\n        var storageAdapter = _localStorageNS[storageName];                                             // 458\n                                                                                                       // 459\n        if (storageAdapter) {                                                                          // 460\n                                                                                                       // 461\n          // Emit the event on the storage                                                             // 462\n          storageAdapter.emit('storage', {                                                             // 463\n            key: key,                                                                                  // 464\n            newValue: e.newValue && EJSON.parse(e.newValue) || e.newValue,                             // 465\n            oldValue: e.oldValue && EJSON.parse(e.oldValue) || e.oldValue,                             // 466\n            originalKey: e.key,                                                                        // 467\n            updatedAt: new Date(e.timeStamp),                                                          // 468\n            url: e.url,                                                                                // 469\n            storage: storageAdapter                                                                    // 470\n          });                                                                                          // 471\n        }                                                                                              // 472\n                                                                                                       // 473\n      }                                                                                                // 474\n                                                                                                       // 475\n    }, false);                                                                                         // 476\n}                                                                                                      // 477\n                                                                                                       // 478\n}                                                                                                      // 479\n                                                                                                       // 480\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}